{
    "sourceFile": "New folder/app/src/features/sale-panel/ObserveOrder.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1747902546451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747902630954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -396,237 +396,114 @@\n           )}\n         </InfoItem>\n         <SubTitle>اطلاعات پمپ ها</SubTitle>\n         <SubTitle>اطلاعات پمپ ها</SubTitle>\n-<Pumps>\n-  {editableOrder.pumps.length === 0 ? (\n-    <Empty> پمپی در این سفارش وجود ندارد!</Empty>\n-  ) : (\n-    editableOrder.pumps.map((pump, index) => {\n-      const selectedPump = pumpList.find((p) => p.id === pump.pump?.id);\n-      const subPumpOptions = selectedPump?.sub_pumps || [];\n-\n-      return (\n-        <Pump key={index}>\n-          <InfoItem>پمپ شماره {index + 1}</InfoItem>\n-\n-          <InfoItem>\n-            نوع پمپ:\n-            {isEditMode ? (\n-              <select\n-                value={pump.pump?.id || \"\"}\n-                onChange={(e) => {\n-                  const updated = [...editableOrder.pumps];\n-                  const selected = pumpList.find(\n-                    (p) => p.id === parseInt(e.target.value)\n-                  );\n-                  updated[index].pump = selected;\n-                  updated[index].sub_pump = null; // ریست زیرمجموعه\n-                  setEditableOrder((prev) => ({\n-                    ...prev,\n-                    pumps: updated,\n-                  }));\n-                }}\n-              >\n-                <option value=\"\">انتخاب کنید</option>\n-                {pumpList.map((p) => (\n-                  <option key={p.id} value={p.id}>\n-                    {p.title}\n-                  </option>\n-                ))}\n-              </select>\n-            ) : (\n-              <span>{pump.pump?.title || \"نامشخص\"}</span>\n-            )}\n-          </InfoItem>\n-\n-          <InfoItem>\n-            نوع پمپ زیرمجموعه:\n-            {isEditMode ? (\n-              <select\n-                value={pump.sub_pump?.id || \"\"}\n-                onChange={(e) => {\n-                  const updated = [...editableOrder.pumps];\n-                  updated[index].sub_pump = subPumpOptions.find(\n-                    (sp) => sp.id === parseInt(e.target.value)\n-                  );\n-                  setEditableOrder((prev) => ({\n-                    ...prev,\n-                    pumps: updated,\n-                  }));\n-                }}\n-              >\n-                <option value=\"\">ندارد</option>\n-                {subPumpOptions.map((sp) => (\n-                  <option key={sp.id} value={sp.id}>\n-                    {sp.title}\n-                  </option>\n-                ))}\n-              </select>\n-            ) : (\n-              <span>{pump.sub_pump?.title || \"ندارد\"}</span>\n-            )}\n-          </InfoItem>\n-\n-          <InfoItem>\n-            تعداد:\n-            {isEditMode ? (\n-              <input\n-                type=\"number\"\n-                value={pump.count}\n-                onChange={(e) => {\n-                  const updated = [...editableOrder.pumps];\n-                  updated[index].count = e.target.value;\n-                  setEditableOrder((prev) => ({\n-                    ...prev,\n-                    pumps: updated,\n-                  }));\n-                }}\n-              />\n-            ) : (\n-              <span>{pump.count}</span>\n-            )}\n-          </InfoItem>\n-\n-          <InfoItem>\n-            <button\n-              type=\"button\"\n-              onClick={() => {\n-                const updated = [...editableOrder.pumps];\n-                updated.splice(index, 1);\n-                setEditableOrder((prev) => ({\n-                  ...prev,\n-                  pumps: updated,\n-                }));\n-              }}\n-            >\n-              حذف پمپ\n-            </button>\n-          </InfoItem>\n-        </Pump>\n-      );\n-    })\n-  )}\n-\n-  {isEditMode && (\n-    <button\n-      type=\"button\"\n-      onClick={() =>\n-        setEditableOrder((prev) => ({\n-          ...prev,\n-          pumps: [\n-            ...prev.pumps,\n-            { pump: null, sub_pump: null, count: 1 },\n-          ],\n-        }))\n-      }\n-    >\n-      + افزودن پمپ جدید\n-    </button>\n-  )}\n-</Pumps>\n-\n-\n-        <SubTitle>اطلاعات ویبراتور ها</SubTitle>\n-        <Vibrators>\n-          {editableOrder.vibrators.length === 0 ? (\n-            <Empty> ویبراتوری در این سفارش وجود ندارد!</Empty>\n+        <Pumps>\n+          {editableOrder.pumps.length === 0 ? (\n+            <Empty> پمپی در این سفارش وجود ندارد!</Empty>\n           ) : (\n-            editableOrder.vibrators.map((vibrator, index) => {\n-              const subVibratorOptions = vibrator.vibrator?.sub_vibrators || []; // اگر داشته باشه\n+            editableOrder.pumps.map((pump, index) => {\n+              const selectedPump = pumpList.find((p) => p.id === pump.pump?.id);\n+              const subPumpOptions = selectedPump?.sub_pumps || [];\n \n               return (\n-                <Vibrator key={index}>\n-                  <InfoItem>ویبراتور شماره {index + 1}</InfoItem>\n+                <Pump key={index}>\n+                  <InfoItem>پمپ شماره {index + 1}</InfoItem>\n \n                   <InfoItem>\n-                    نوع ویبراتور:\n+                    نوع پمپ:\n                     {isEditMode ? (\n                       <select\n-                        value={vibrator.vibrator?.id || \"\"}\n+                        value={pump.pump?.id || \"\"}\n                         onChange={(e) => {\n-                          const updated = [...editableOrder.vibrators];\n-                          updated[index].vibrator = vibratorList.find(\n-                            (v) => v.id === parseInt(e.target.value)\n+                          const updated = [...editableOrder.pumps];\n+                          const selected = pumpList.find(\n+                            (p) => p.id === parseInt(e.target.value)\n                           );\n+                          updated[index].pump = selected;\n+                          updated[index].sub_pump = null; // ریست زیرمجموعه\n                           setEditableOrder((prev) => ({\n                             ...prev,\n-                            vibrators: updated,\n+                            pumps: updated,\n                           }));\n                         }}\n                       >\n                         <option value=\"\">انتخاب کنید</option>\n-                        {vibratorList.map((v) => (\n-                          <option key={v.id} value={v.id}>\n-                            {v.title}\n+                        {pumpList.map((p) => (\n+                          <option key={p.id} value={p.id}>\n+                            {p.title}\n                           </option>\n                         ))}\n                       </select>\n                     ) : (\n-                      <span>\n-                        {vibratorList.find(\n-                          (v) => v.id === vibrator.vibrator?.id\n-                        )?.title || \"نامشخص\"}\n-                      </span>\n+                      <span>{pump.pump?.title || \"نامشخص\"}</span>\n                     )}\n                   </InfoItem>\n \n                   <InfoItem>\n-                    نوع ویبراتور زیرمجموعه:\n+                    نوع پمپ زیرمجموعه:\n                     {isEditMode ? (\n-                      <input\n-                        value={vibrator.sub_vibrator?.title || \"\"}\n+                      <select\n+                        value={pump.sub_pump?.id || \"\"}\n                         onChange={(e) => {\n-                          const updated = [...editableOrder.vibrators];\n-                          updated[index].sub_vibrator = {\n-                            title: e.target.value,\n-                          };\n+                          const updated = [...editableOrder.pumps];\n+                          updated[index].sub_pump = subPumpOptions.find(\n+                            (sp) => sp.id === parseInt(e.target.value)\n+                          );\n                           setEditableOrder((prev) => ({\n                             ...prev,\n-                            vibrators: updated,\n+                            pumps: updated,\n                           }));\n                         }}\n-                      />\n+                      >\n+                        <option value=\"\">ندارد</option>\n+                        {subPumpOptions.map((sp) => (\n+                          <option key={sp.id} value={sp.id}>\n+                            {sp.title}\n+                          </option>\n+                        ))}\n+                      </select>\n                     ) : (\n-                      <span>{vibrator.sub_vibrator?.title || \"ندارد\"}</span>\n+                      <span>{pump.sub_pump?.title || \"ندارد\"}</span>\n                     )}\n                   </InfoItem>\n \n                   <InfoItem>\n                     تعداد:\n                     {isEditMode ? (\n                       <input\n                         type=\"number\"\n-                        value={vibrator.count}\n+                        value={pump.count}\n                         onChange={(e) => {\n-                          const updated = [...editableOrder.vibrators];\n+                          const updated = [...editableOrder.pumps];\n                           updated[index].count = e.target.value;\n                           setEditableOrder((prev) => ({\n                             ...prev,\n-                            vibrators: updated,\n+                            pumps: updated,\n                           }));\n                         }}\n                       />\n                     ) : (\n-                      <span>{vibrator.count}</span>\n+                      <span>{pump.count}</span>\n                     )}\n                   </InfoItem>\n+\n                   <InfoItem>\n                     <button\n                       type=\"button\"\n                       onClick={() => {\n-                        const updated = [...editableOrder.vibrators];\n-                        updated.splice(index, 1); // حذف این ویبراتور\n+                        const updated = [...editableOrder.pumps];\n+                        updated.splice(index, 1);\n                         setEditableOrder((prev) => ({\n                           ...prev,\n-                          vibrators: updated,\n+                          pumps: updated,\n                         }));\n                       }}\n                     >\n-                      حذف ویبراتور\n+                      حذف پمپ\n                     </button>\n                   </InfoItem>\n-                </Vibrator>\n+                </Pump>\n               );\n             })\n           )}\n \n@@ -635,20 +512,22 @@\n               type=\"button\"\n               onClick={() =>\n                 setEditableOrder((prev) => ({\n                   ...prev,\n-                  vibrators: [\n-                    ...prev.vibrators,\n-                    { vibrator: null, sub_vibrator: null, count: 1 },\n+                  pumps: [\n+                    ...prev.pumps,\n+                    { pump: null, sub_pump: null, count: 1 },\n                   ],\n                 }))\n               }\n             >\n-              + افزودن ویبراتور جدید\n+              + افزودن پمپ جدید\n             </button>\n           )}\n-        </Vibrators>\n+        </Pumps>\n \n+        <SubTitle>اطلاعات ویبراتور ها</SubTitle>\n+\n         {/* باقی فیلدها مانند بالا ویرایش‌پذیر می‌شن */}\n \n         <SubTitle>اطلاعات تکمیلی</SubTitle>\n \n"
                },
                {
                    "date": 1747902638706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -525,9 +525,137 @@\n           )}\n         </Pumps>\n \n         <SubTitle>اطلاعات ویبراتور ها</SubTitle>\n+<Vibrators>\n+  {editableOrder.vibrators.length === 0 ? (\n+    <Empty> ویبراتوری در این سفارش وجود ندارد!</Empty>\n+  ) : (\n+    editableOrder.vibrators.map((vibrator, index) => {\n+      const selectedVibrator = vibratorList.find((v) => v.id === vibrator.vibrator?.id);\n+      const subVibratorOptions = selectedVibrator?.sub_vibrators || [];\n \n+      return (\n+        <Vibrator key={index}>\n+          <InfoItem>ویبراتور شماره {index + 1}</InfoItem>\n+\n+          <InfoItem>\n+            نوع ویبراتور:\n+            {isEditMode ? (\n+              <select\n+                value={vibrator.vibrator?.id || \"\"}\n+                onChange={(e) => {\n+                  const updated = [...editableOrder.vibrators];\n+                  const selected = vibratorList.find(\n+                    (v) => v.id === parseInt(e.target.value)\n+                  );\n+                  updated[index].vibrator = selected;\n+                  updated[index].sub_vibrator = null;\n+                  setEditableOrder((prev) => ({\n+                    ...prev,\n+                    vibrators: updated,\n+                  }));\n+                }}\n+              >\n+                <option value=\"\">انتخاب کنید</option>\n+                {vibratorList.map((v) => (\n+                  <option key={v.id} value={v.id}>\n+                    {v.title}\n+                  </option>\n+                ))}\n+              </select>\n+            ) : (\n+              <span>{vibrator.vibrator?.title || \"نامشخص\"}</span>\n+            )}\n+          </InfoItem>\n+\n+          <InfoItem>\n+            نوع ویبراتور زیرمجموعه:\n+            {isEditMode ? (\n+              <select\n+                value={vibrator.sub_vibrator?.id || \"\"}\n+                onChange={(e) => {\n+                  const updated = [...editableOrder.vibrators];\n+                  updated[index].sub_vibrator = subVibratorOptions.find(\n+                    (sv) => sv.id === parseInt(e.target.value)\n+                  );\n+                  setEditableOrder((prev) => ({\n+                    ...prev,\n+                    vibrators: updated,\n+                  }));\n+                }}\n+              >\n+                <option value=\"\">ندارد</option>\n+                {subVibratorOptions.map((sv) => (\n+                  <option key={sv.id} value={sv.id}>\n+                    {sv.title}\n+                  </option>\n+                ))}\n+              </select>\n+            ) : (\n+              <span>{vibrator.sub_vibrator?.title || \"ندارد\"}</span>\n+            )}\n+          </InfoItem>\n+\n+          <InfoItem>\n+            تعداد:\n+            {isEditMode ? (\n+              <input\n+                type=\"number\"\n+                value={vibrator.count}\n+                onChange={(e) => {\n+                  const updated = [...editableOrder.vibrators];\n+                  updated[index].count = e.target.value;\n+                  setEditableOrder((prev) => ({\n+                    ...prev,\n+                    vibrators: updated,\n+                  }));\n+                }}\n+              />\n+            ) : (\n+              <span>{vibrator.count}</span>\n+            )}\n+          </InfoItem>\n+\n+          <InfoItem>\n+            <button\n+              type=\"button\"\n+              onClick={() => {\n+                const updated = [...editableOrder.vibrators];\n+                updated.splice(index, 1);\n+                setEditableOrder((prev) => ({\n+                  ...prev,\n+                  vibrators: updated,\n+                }));\n+              }}\n+            >\n+              حذف ویبراتور\n+            </button>\n+          </InfoItem>\n+        </Vibrator>\n+      );\n+    })\n+  )}\n+\n+  {isEditMode && (\n+    <button\n+      type=\"button\"\n+      onClick={() =>\n+        setEditableOrder((prev) => ({\n+          ...prev,\n+          vibrators: [\n+            ...prev.vibrators,\n+            { vibrator: null, sub_vibrator: null, count: 1 },\n+          ],\n+        }))\n+      }\n+    >\n+      + افزودن ویبراتور جدید\n+    </button>\n+  )}\n+</Vibrators>\n+\n+\n         {/* باقی فیلدها مانند بالا ویرایش‌پذیر می‌شن */}\n \n         <SubTitle>اطلاعات تکمیلی</SubTitle>\n \n"
                },
                {
                    "date": 1747902909822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,13 +204,15 @@\n   const saveVibrators = async (headers) => {\n     const body = {\n       order_id: editableOrder.id,\n       vibrators: editableOrder.vibrators.map((v) => ({\n-        vibrator_id: v.vibrator?.id || null,\n-        sub_vibrator_title: v.sub_vibrator?.title || null,\n+        vibrator: v.vibrator?.id || null,\n+        sub_vibrator: v.sub_vibrator?.id || null,\n         count: parseInt(v.count),\n       })),\n     };\n+    \n+    };\n \n     const res = await fetch(\n       \"https://amin-beton-back.chbk.app/api/order-management/update-vibrator-order/\",\n       {\n"
                },
                {
                    "date": 1747903065263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,56 +176,57 @@\n       alert(\"خطا در ذخیره‌سازی سفارش\");\n     }\n   };\n \n-  const savePumps = async (headers) => {\n+  const saveVibrators = async (headers) => {\n     const body = {\n       order_id: editableOrder.id,\n-      pumps: editableOrder.pumps.map((p) => ({\n-        pump_id: p.pump?.id || null,\n-        sub_pump_id: p.sub_pump?.id || null,\n-        count: parseInt(p.count),\n+      vibrators: editableOrder.vibrators.map((v) => ({\n+        vibrator: v.vibrator?.id || null,\n+        sub_vibrator: v.sub_vibrator?.id || null,\n+        count: parseInt(v.count),\n       })),\n     };\n \n     const res = await fetch(\n-      \"https://amin-beton-back.chbk.app/api/order-management/update-pump-order/\",\n+      \"https://amin-beton-back.chbk.app/api/order-management/update-vibrator-order/\",\n       {\n         method: \"PATCH\",\n         headers,\n         body: JSON.stringify(body),\n       }\n     );\n \n     if (!res.ok) {\n-      throw new Error(\"ذخیره پمپ‌ها با خطا مواجه شد\");\n+      throw new Error(\"ذخیره ویبراتورها با خطا مواجه شد\");\n     }\n   };\n-\n-  const saveVibrators = async (headers) => {\n+  const savePumps = async (headers) => {\n     const body = {\n       order_id: editableOrder.id,\n-      vibrators: editableOrder.vibrators.map((v) => ({\n-        vibrator: v.vibrator?.id || null,\n-        sub_vibrator: v.sub_vibrator?.id || null,\n-        count: parseInt(v.count),\n+      pumps: editableOrder.pumps.map((p) => ({\n+        pump_id: p.pump?.id || null,\n+        sub_pump_id: p.sub_pump?.id || null,\n+        count: parseInt(p.count),\n       })),\n     };\n \n     const res = await fetch(\n-      \"https://amin-beton-back.chbk.app/api/order-management/update-vibrator-order/\",\n+      \"https://amin-beton-back.chbk.app/api/order-management/update-pump-order/\",\n       {\n         method: \"PATCH\",\n         headers,\n         body: JSON.stringify(body),\n       }\n     );\n \n     if (!res.ok) {\n-      throw new Error(\"ذخیره ویبراتورها با خطا مواجه شد\");\n+      throw new Error(\"ذخیره پمپ‌ها با خطا مواجه شد\");\n     }\n   };\n \n+\n+\n   const { isLoadingPumpList, pumpList } = usePumpList(\"all\");\n   const { isLoadingVibratorList, vibratorList } = useVibratorList(\"all\");\n \n   if (\n"
                },
                {
                    "date": 1747903106933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,8 +185,9 @@\n         sub_vibrator: v.sub_vibrator?.id || null,\n         count: parseInt(v.count),\n       })),\n     };\n+    console.log(\"BODY که برای ویبراتور ارسال میشه:\", body);\n \n     const res = await fetch(\n       \"https://amin-beton-back.chbk.app/api/order-management/update-vibrator-order/\",\n       {\n"
                }
            ],
            "date": 1747902546451,
            "name": "Commit-0",
            "content": "/*eslint-disable */\nimport styled, { css } from \"styled-components\";\nimport React, { useState } from \"react\";\n\nimport { convertGeorgianDateToJalali } from \"../../utils/helpers\";\nimport {\n  useConcreteList,\n  useConcretePouringTypeList,\n  useConcreteResistanceClassList,\n  usePumpList,\n  useVibratorList,\n} from \"../../hooks/useDropdownsData\";\nimport Spinner from \"../../ui/Spinner\";\n\nconst StyledObserveOrder = styled.div`\n  width: 75vw;\n  height: 70vh;\n  overflow-y: scroll;\n`;\n\nconst Title = styled.h4`\n  font-size: 2rem;\n  font-weight: 800;\n  text-align: center;\n  margin-bottom: 4rem;\n  span {\n    color: var(--color-brand-600);\n  }\n`;\n\nconst Info = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 3rem;\n  text-align: center;\n\n  padding: 2rem;\n  background-color: var(--color-grey-100);\n\n  span {\n    color: var(--color-brand-800);\n  }\n`;\n\nconst InfoItem = styled.div`\n  padding: 1.5rem 2rem;\n  border-radius: 1.5rem;\n  background-color: white;\n  line-height: 2;\n\n  ${(props) =>\n    props.className === \"full-row\" &&\n    css`\n      grid-column: 1/-1;\n    `}\n\n  ${(props) =>\n    props.className === \"half-row-1\" &&\n    css`\n      grid-column: 1/3;\n    `}\n\n  ${(props) =>\n    props.className === \"half-row-2\" &&\n    css`\n      grid-column: 3/5;\n    `}\n`;\n\nconst SubTitle = styled.h4`\n  font-size: 1.5rem;\n  font-weight: 600;\n\n  grid-column: 1/-1;\n  text-align: center;\n`;\n\nconst Pumps = styled.div`\n  grid-column: 1/-1;\n\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 3rem;\n`;\n\nconst Pump = styled.div`\n  & > * {\n    margin-bottom: 1rem;\n  }\n`;\n\nconst Vibrators = styled.div`\n  grid-column: 1/-1;\n\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 3rem;\n`;\n\nconst Vibrator = styled.div`\n  & > * {\n    margin-bottom: 1rem;\n  }\n`;\n\nconst Empty = styled.div`\n  grid-column: 1/-1;\n  color: var(--color-red-600);\n`;\n\nfunction ObserveOrder({ order }) {\n  const { concreteList, isLoadingConcreteList } = useConcreteList();\n  const { concretePouringTypeList, isLoadingConcretePouringTypeList } =\n    useConcretePouringTypeList();\n  const { concreteResistanceClassList, isLoadingConcreteResistanceClassList } =\n    useConcreteResistanceClassList();\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [editableOrder, setEditableOrder] = useState(order);\n\n  const handleChange = (field, value) => {\n    setEditableOrder((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const toggleEdit = () => setIsEditMode((prev) => !prev);\n  const handleSave = async () => {\n    try {\n      const token = JSON.parse(localStorage.getItem(\"token\"));\n      if (!token || !token.access) {\n        alert(\"توکن یافت نشد\");\n        return;\n      }\n\n      const headers = {\n        Authorization: `Bearer ${token.access}`,\n        \"Content-Type\": \"application/json\",\n      };\n\n      console.log(\"در حال ذخیره سفارش...\");\n      const orderRes = await fetch(\n        `https://amin-beton-back.chbk.app/api/orders/${editableOrder.id}/`,\n        {\n          method: \"PATCH\",\n          headers,\n          body: JSON.stringify(editableOrder),\n        }\n      );\n\n      if (!orderRes.ok) {\n        throw new Error(\"ذخیره سفارش با خطا مواجه شد\");\n      }\n      console.log(\"سفارش ذخیره شد.\");\n\n      try {\n        console.log(\"در حال ذخیره پمپ...\");\n        await savePumps(headers);\n        console.log(\"پمپ ذخیره شد.\");\n      } catch (e) {\n        console.error(\"خطا در پمپ:\", e);\n      }\n\n      try {\n        console.log(\"در حال ذخیره ویبراتور...\");\n        await saveVibrators(headers);\n        console.log(\"ویبراتور ذخیره شد.\");\n      } catch (e) {\n        console.error(\"خطا در ویبراتور:\", e);\n      }\n\n      alert(\"سفارش با موفقیت ذخیره شد\");\n      setIsEditMode(false);\n    } catch (err) {\n      console.error(\"خطای کلی:\", err);\n      alert(\"خطا در ذخیره‌سازی سفارش\");\n    }\n  };\n\n  const savePumps = async (headers) => {\n    const body = {\n      order_id: editableOrder.id,\n      pumps: editableOrder.pumps.map((p) => ({\n        pump_id: p.pump?.id || null,\n        sub_pump_id: p.sub_pump?.id || null,\n        count: parseInt(p.count),\n      })),\n    };\n\n    const res = await fetch(\n      \"https://amin-beton-back.chbk.app/api/order-management/update-pump-order/\",\n      {\n        method: \"PATCH\",\n        headers,\n        body: JSON.stringify(body),\n      }\n    );\n\n    if (!res.ok) {\n      throw new Error(\"ذخیره پمپ‌ها با خطا مواجه شد\");\n    }\n  };\n\n  const saveVibrators = async (headers) => {\n    const body = {\n      order_id: editableOrder.id,\n      vibrators: editableOrder.vibrators.map((v) => ({\n        vibrator_id: v.vibrator?.id || null,\n        sub_vibrator_title: v.sub_vibrator?.title || null,\n        count: parseInt(v.count),\n      })),\n    };\n\n    const res = await fetch(\n      \"https://amin-beton-back.chbk.app/api/order-management/update-vibrator-order/\",\n      {\n        method: \"PATCH\",\n        headers,\n        body: JSON.stringify(body),\n      }\n    );\n\n    if (!res.ok) {\n      throw new Error(\"ذخیره ویبراتورها با خطا مواجه شد\");\n    }\n  };\n\n  const { isLoadingPumpList, pumpList } = usePumpList(\"all\");\n  const { isLoadingVibratorList, vibratorList } = useVibratorList(\"all\");\n\n  if (\n    isLoadingConcreteList ||\n    isLoadingConcretePouringTypeList ||\n    isLoadingConcreteResistanceClassList ||\n    isLoadingPumpList ||\n    isLoadingVibratorList\n  )\n    return <Spinner />;\n  // return <Spinner />;\n\n  return (\n    <StyledObserveOrder>\n      <Title>\n        مشاهده سفارش <span>{order.id}#</span> از\n        <span> {order.project.user_fullname} </span>\n      </Title>\n\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          marginBottom: \"2rem\",\n        }}\n      >\n        <button\n          type=\"button\"\n          onClick={() => {\n            console.log(\"clicked\");\n            isEditMode ? handleSave() : toggleEdit();\n          }}\n          style={{\n            backgroundColor: \"#3b82f6\",\n            color: \"white\",\n            padding: \"0.5rem 1.2rem\",\n            borderRadius: \"0.8rem\",\n            fontSize: \"1rem\",\n            cursor: \"pointer\",\n          }}\n        >\n          {isEditMode ? \"ذخیره تغییرات\" : \"ویرایش\"}\n        </button>\n      </div>\n\n      <Info>\n        <SubTitle>اطلاعات پروژه</SubTitle>\n\n        <InfoItem>\n          نام پروژه :\n          {isEditMode ? (\n            <input\n              value={editableOrder.project.title}\n              onChange={(e) =>\n                setEditableOrder({\n                  ...editableOrder,\n                  project: {\n                    ...editableOrder.project,\n                    title: e.target.value,\n                  },\n                })\n              }\n            />\n          ) : (\n            <span>{order.project.title}</span>\n          )}\n        </InfoItem>\n\n        <InfoItem>\n          نام کاربری :<span>{order.project.user_username}</span>\n        </InfoItem>\n\n        <InfoItem>\n          شماره پروژه :<span>{order.project.id}</span>\n        </InfoItem>\n\n        <InfoItem>\n          تاریخ آغاز پروژه :\n          <span>{convertGeorgianDateToJalali(order.project.start_date)}</span>\n        </InfoItem>\n\n        <SubTitle>اطلاعات سفارش</SubTitle>\n\n        <InfoItem>\n          شماره سفارش : <span>{order.order_id}</span>\n        </InfoItem>\n\n        <InfoItem>\n          متراژ بتن :\n          {isEditMode ? (\n            <input\n              type=\"number\"\n              value={editableOrder.concrete_area_size}\n              onChange={(e) =>\n                handleChange(\"concrete_area_size\", e.target.value)\n              }\n            />\n          ) : (\n            <span>{order.concrete_area_size} مترمکعب</span>\n          )}\n        </InfoItem>\n\n        <InfoItem>\n          ارتفاع بتن‌ریزی از محل استقرار پمپ:\n          {isEditMode ? (\n            <input\n              type=\"number\"\n              value={editableOrder.concrete_pouring_height}\n              onChange={(e) =>\n                handleChange(\"concrete_pouring_height\", e.target.value)\n              }\n            />\n          ) : (\n            <span>{order.concrete_pouring_height} متر</span>\n          )}\n        </InfoItem>\n\n        <InfoItem>\n          حداکثر متراژ لوله کشی:\n          {isEditMode ? (\n            <input\n              type=\"number\"\n              value={editableOrder.piping_area_size}\n              onChange={(e) => handleChange(\"piping_area_size\", e.target.value)}\n            />\n          ) : (\n            <span>{order.piping_area_size} متر</span>\n          )}\n        </InfoItem>\n\n        <InfoItem>\n          ماله پروانه :\n          {isEditMode ? (\n            <select\n              value={editableOrder.power_trowel ? \"yes\" : \"no\"}\n              onChange={(e) =>\n                handleChange(\"power_trowel\", e.target.value === \"yes\")\n              }\n            >\n              <option value=\"yes\">بله</option>\n              <option value=\"no\">خیر</option>\n            </select>\n          ) : (\n            <span>{order.power_trowel ? \"بله\" : \"خیر\"}</span>\n          )}\n        </InfoItem>\n\n        <InfoItem>\n          نوع بتن :\n          {isEditMode ? (\n            <select\n              value={editableOrder.concrete_type}\n              onChange={(e) =>\n                handleChange(\"concrete_type\", parseInt(e.target.value))\n              }\n            >\n              {concreteList.map((c) => (\n                <option key={c.id} value={c.id}>\n                  {c.title}\n                </option>\n              ))}\n            </select>\n          ) : (\n            <span>\n              {concreteList.find((c) => c.id === order.concrete_type)?.title ||\n                \"نامشخص\"}\n            </span>\n          )}\n        </InfoItem>\n        <SubTitle>اطلاعات پمپ ها</SubTitle>\n        <SubTitle>اطلاعات پمپ ها</SubTitle>\n<Pumps>\n  {editableOrder.pumps.length === 0 ? (\n    <Empty> پمپی در این سفارش وجود ندارد!</Empty>\n  ) : (\n    editableOrder.pumps.map((pump, index) => {\n      const selectedPump = pumpList.find((p) => p.id === pump.pump?.id);\n      const subPumpOptions = selectedPump?.sub_pumps || [];\n\n      return (\n        <Pump key={index}>\n          <InfoItem>پمپ شماره {index + 1}</InfoItem>\n\n          <InfoItem>\n            نوع پمپ:\n            {isEditMode ? (\n              <select\n                value={pump.pump?.id || \"\"}\n                onChange={(e) => {\n                  const updated = [...editableOrder.pumps];\n                  const selected = pumpList.find(\n                    (p) => p.id === parseInt(e.target.value)\n                  );\n                  updated[index].pump = selected;\n                  updated[index].sub_pump = null; // ریست زیرمجموعه\n                  setEditableOrder((prev) => ({\n                    ...prev,\n                    pumps: updated,\n                  }));\n                }}\n              >\n                <option value=\"\">انتخاب کنید</option>\n                {pumpList.map((p) => (\n                  <option key={p.id} value={p.id}>\n                    {p.title}\n                  </option>\n                ))}\n              </select>\n            ) : (\n              <span>{pump.pump?.title || \"نامشخص\"}</span>\n            )}\n          </InfoItem>\n\n          <InfoItem>\n            نوع پمپ زیرمجموعه:\n            {isEditMode ? (\n              <select\n                value={pump.sub_pump?.id || \"\"}\n                onChange={(e) => {\n                  const updated = [...editableOrder.pumps];\n                  updated[index].sub_pump = subPumpOptions.find(\n                    (sp) => sp.id === parseInt(e.target.value)\n                  );\n                  setEditableOrder((prev) => ({\n                    ...prev,\n                    pumps: updated,\n                  }));\n                }}\n              >\n                <option value=\"\">ندارد</option>\n                {subPumpOptions.map((sp) => (\n                  <option key={sp.id} value={sp.id}>\n                    {sp.title}\n                  </option>\n                ))}\n              </select>\n            ) : (\n              <span>{pump.sub_pump?.title || \"ندارد\"}</span>\n            )}\n          </InfoItem>\n\n          <InfoItem>\n            تعداد:\n            {isEditMode ? (\n              <input\n                type=\"number\"\n                value={pump.count}\n                onChange={(e) => {\n                  const updated = [...editableOrder.pumps];\n                  updated[index].count = e.target.value;\n                  setEditableOrder((prev) => ({\n                    ...prev,\n                    pumps: updated,\n                  }));\n                }}\n              />\n            ) : (\n              <span>{pump.count}</span>\n            )}\n          </InfoItem>\n\n          <InfoItem>\n            <button\n              type=\"button\"\n              onClick={() => {\n                const updated = [...editableOrder.pumps];\n                updated.splice(index, 1);\n                setEditableOrder((prev) => ({\n                  ...prev,\n                  pumps: updated,\n                }));\n              }}\n            >\n              حذف پمپ\n            </button>\n          </InfoItem>\n        </Pump>\n      );\n    })\n  )}\n\n  {isEditMode && (\n    <button\n      type=\"button\"\n      onClick={() =>\n        setEditableOrder((prev) => ({\n          ...prev,\n          pumps: [\n            ...prev.pumps,\n            { pump: null, sub_pump: null, count: 1 },\n          ],\n        }))\n      }\n    >\n      + افزودن پمپ جدید\n    </button>\n  )}\n</Pumps>\n\n\n        <SubTitle>اطلاعات ویبراتور ها</SubTitle>\n        <Vibrators>\n          {editableOrder.vibrators.length === 0 ? (\n            <Empty> ویبراتوری در این سفارش وجود ندارد!</Empty>\n          ) : (\n            editableOrder.vibrators.map((vibrator, index) => {\n              const subVibratorOptions = vibrator.vibrator?.sub_vibrators || []; // اگر داشته باشه\n\n              return (\n                <Vibrator key={index}>\n                  <InfoItem>ویبراتور شماره {index + 1}</InfoItem>\n\n                  <InfoItem>\n                    نوع ویبراتور:\n                    {isEditMode ? (\n                      <select\n                        value={vibrator.vibrator?.id || \"\"}\n                        onChange={(e) => {\n                          const updated = [...editableOrder.vibrators];\n                          updated[index].vibrator = vibratorList.find(\n                            (v) => v.id === parseInt(e.target.value)\n                          );\n                          setEditableOrder((prev) => ({\n                            ...prev,\n                            vibrators: updated,\n                          }));\n                        }}\n                      >\n                        <option value=\"\">انتخاب کنید</option>\n                        {vibratorList.map((v) => (\n                          <option key={v.id} value={v.id}>\n                            {v.title}\n                          </option>\n                        ))}\n                      </select>\n                    ) : (\n                      <span>\n                        {vibratorList.find(\n                          (v) => v.id === vibrator.vibrator?.id\n                        )?.title || \"نامشخص\"}\n                      </span>\n                    )}\n                  </InfoItem>\n\n                  <InfoItem>\n                    نوع ویبراتور زیرمجموعه:\n                    {isEditMode ? (\n                      <input\n                        value={vibrator.sub_vibrator?.title || \"\"}\n                        onChange={(e) => {\n                          const updated = [...editableOrder.vibrators];\n                          updated[index].sub_vibrator = {\n                            title: e.target.value,\n                          };\n                          setEditableOrder((prev) => ({\n                            ...prev,\n                            vibrators: updated,\n                          }));\n                        }}\n                      />\n                    ) : (\n                      <span>{vibrator.sub_vibrator?.title || \"ندارد\"}</span>\n                    )}\n                  </InfoItem>\n\n                  <InfoItem>\n                    تعداد:\n                    {isEditMode ? (\n                      <input\n                        type=\"number\"\n                        value={vibrator.count}\n                        onChange={(e) => {\n                          const updated = [...editableOrder.vibrators];\n                          updated[index].count = e.target.value;\n                          setEditableOrder((prev) => ({\n                            ...prev,\n                            vibrators: updated,\n                          }));\n                        }}\n                      />\n                    ) : (\n                      <span>{vibrator.count}</span>\n                    )}\n                  </InfoItem>\n                  <InfoItem>\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                        const updated = [...editableOrder.vibrators];\n                        updated.splice(index, 1); // حذف این ویبراتور\n                        setEditableOrder((prev) => ({\n                          ...prev,\n                          vibrators: updated,\n                        }));\n                      }}\n                    >\n                      حذف ویبراتور\n                    </button>\n                  </InfoItem>\n                </Vibrator>\n              );\n            })\n          )}\n\n          {isEditMode && (\n            <button\n              type=\"button\"\n              onClick={() =>\n                setEditableOrder((prev) => ({\n                  ...prev,\n                  vibrators: [\n                    ...prev.vibrators,\n                    { vibrator: null, sub_vibrator: null, count: 1 },\n                  ],\n                }))\n              }\n            >\n              + افزودن ویبراتور جدید\n            </button>\n          )}\n        </Vibrators>\n\n        {/* باقی فیلدها مانند بالا ویرایش‌پذیر می‌شن */}\n\n        <SubTitle>اطلاعات تکمیلی</SubTitle>\n\n        <InfoItem className=\"half-row-1\">\n          اجرا و نظارت آبندی:\n          {isEditMode ? (\n            <input\n              value={editableOrder.sealing_implementation}\n              onChange={(e) =>\n                handleChange(\"sealing_implementation\", e.target.value)\n              }\n            />\n          ) : (\n            <span>{order.sealing_implementation}</span>\n          )}\n        </InfoItem>\n\n        <InfoItem className=\"half-row-2\">\n          تاریخ و ساعت درخواستی:\n          {isEditMode ? (\n            <input\n              type=\"datetime-local\"\n              value={editableOrder.delivery_datetime}\n              onChange={(e) =>\n                handleChange(\"delivery_datetime\", e.target.value)\n              }\n            />\n          ) : (\n            <span>\n              {convertGeorgianDateToJalali(\n                order.delivery_datetime.split(\" \")[0]\n              )}{\" \"}\n              - {order.delivery_datetime.split(\" \")[1]}\n            </span>\n          )}\n        </InfoItem>\n\n        <InfoItem className=\"full-row\">\n          نحوه تسویه:\n          {isEditMode ? (\n            <input\n              value={editableOrder.settlement_type}\n              onChange={(e) => handleChange(\"settlement_type\", e.target.value)}\n            />\n          ) : (\n            <span>{order.settlement_type}</span>\n          )}\n        </InfoItem>\n\n        <InfoItem className=\"full-row\">\n          توضیحات تکمیلی:\n          {isEditMode ? (\n            <textarea\n              rows=\"3\"\n              value={editableOrder.additional_description}\n              onChange={(e) =>\n                handleChange(\"additional_description\", e.target.value)\n              }\n            />\n          ) : (\n            <span>{order.additional_description}</span>\n          )}\n        </InfoItem>\n      </Info>\n    </StyledObserveOrder>\n  );\n}\n\nexport default ObserveOrder;\n"
        }
    ]
}