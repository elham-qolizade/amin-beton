{
    "sourceFile": "src/Sales/SaleProject.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1744179214908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744179834577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,10 +78,15 @@\n     };\r\n \r\n     fetchData();\r\n   }, [navigate]);\r\n+  // const { id } = useParams();\r\n \r\n   useEffect(() => {\r\n+    fetchData(id);\r\n+  }, [id]); // اینجا id تغییر می‌کنه => useEffect دوباره اجرا می‌شه\r\n+  \r\n+  useEffect(() => {\r\n     if (selectedDay) {\r\n       setIsTimeModalOpen(true); // وقتی تاریخ انتخاب شد، مودال ساعت باز شود\r\n     }\r\n   }, [selectedDay]);\r\n"
                },
                {
                    "date": 1744179872503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,11 +80,9 @@\n     fetchData();\r\n   }, [navigate]);\r\n   // const { id } = useParams();\r\n \r\n-  useEffect(() => {\r\n-    fetchData(id);\r\n-  }, [id]); // اینجا id تغییر می‌کنه => useEffect دوباره اجرا می‌شه\r\n+// اینجا id تغییر می‌کنه => useEffect دوباره اجرا می‌شه\r\n \r\n   useEffect(() => {\r\n     if (selectedDay) {\r\n       setIsTimeModalOpen(true); // وقتی تاریخ انتخاب شد، مودال ساعت باز شود\r\n"
                },
                {
                    "date": 1744180054451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     };\r\n \r\n     fetchData();\r\n   }, [navigate]);\r\n-  // const { id } = useParams();\r\n+  \r\n \r\n   // اینجا id تغییر می‌کنه => useEffect دوباره اجرا می‌شه\r\n \r\n   useEffect(() => {\r\n"
                }
            ],
            "date": 1744179214908,
            "name": "Commit-0",
            "content": "import ButtonProject from \"../ui/ButtonProject\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport CustomCalendar from \"../ui/Calender\";\r\nimport Input from \"../ui/Input\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport jalaali from \"jalaali-js\";\r\n\r\nfunction SaleProject() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [isTimeModalOpen, setIsTimeModalOpen] = useState(false);\r\n  const [projectTitle, setProjectTitle] = useState(\"\");\r\n  const [selectedDay, setSelectedDay] = useState(null);\r\n  const [shift, setShift] = useState(1);\r\n  const [selectedTime, setSelectedTime] = useState(\"08:00\");\r\n  const [errors, setErrors] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [concreteTypes, setConcreteTypes] = useState([]);\r\n  const [concretePouringTypes, setConcretePouringTypes] = useState([]);\r\n  const [resistanceClasses, setResistanceClasses] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false); // برای کنترل باز و بسته شدن مودال\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [newOrder, setNewOrder] = useState({\r\n    project: id || \"\",\r\n    concrete_type: \"\",\r\n    concrete_pouring_type: \"\",\r\n    concrete_area_size: \"\",\r\n    delivery_datetime: \"\",\r\n    shift: 1,\r\n    concrete_resistance_class: \"\",\r\n    max_pipeline_length: \"\",\r\n    pouring_height: \"\",\r\n  });\r\n\r\n  // گرفتن لیست‌های موردنیاز\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      if (!token) {\r\n        toast.error(\"⛔ شما احراز هویت نشده‌اید! لطفاً وارد شوید.\");\r\n        navigate(\"/LoginForm\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const [typesRes, pouringRes, resistanceRes] = await Promise.all([\r\n          axios.get(\r\n            \"https://amin-beton-back.chbk.app/api/sales/concrete-list/\",\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          ),\r\n          axios.get(\r\n            \"https://amin-beton-back.chbk.app/api/sales/concrete-pouring-type-list/\",\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          ),\r\n          axios.get(\r\n            \"https://amin-beton-back.chbk.app/api/sales/concrete-resistance-class-list/\",\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          ),\r\n        ]);\r\n\r\n        setConcreteTypes(typesRes.data);\r\n        setConcretePouringTypes(pouringRes.data);\r\n        setResistanceClasses(resistanceRes.data);\r\n      } catch (err) {\r\n        toast.error(\"❌ خطا در دریافت داده‌ها!\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [navigate]);\r\n\r\n  useEffect(() => {\r\n    if (selectedDay) {\r\n      setIsTimeModalOpen(true); // وقتی تاریخ انتخاب شد، مودال ساعت باز شود\r\n    }\r\n  }, [selectedDay]);\r\n  const errorMessages = {\r\n    required: \"پر کردن این فیلد الزامی است.\",\r\n    minZero: \"مقدار باید صفر یا بیشتر باشد.\",\r\n    invalidDate: \"فرمت تاریخ نامعتبر است.\",\r\n    dateInPast: \"تاریخ انتخابی باید از تاریخ فعلی بزرگتر باشد.\",\r\n  };\r\n\r\n  // گرفتن عنوان پروژه\r\n  useEffect(() => {\r\n    const fetchProjectTitle = async () => {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      if (!token) {\r\n        toast.error(\"⛔ شما احراز هویت نشده‌اید! لطفاً وارد شوید.\");\r\n        navigate(\"/LoginForm\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get(\r\n          `https://amin-beton-back.chbk.app/api/projects/${id}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        setProjectTitle(response.data.title); // مقدار `title` را ذخیره کن\r\n      } catch (error) {\r\n        console.error(\"خطا در دریافت عنوان پروژه:\", error);\r\n        toast.error(\"❌ خطا در دریافت اطلاعات پروژه!\");\r\n      }\r\n    };\r\n\r\n    fetchProjectTitle();\r\n  }, [id, navigate]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"📅 selectedDay:\", selectedDay);\r\n    console.log(\r\n      \"🌙 shift:\",\r\n      shift === 2 ? \"شب\" : shift === 1 ? \"روز\" : \"انتخاب نشده\"\r\n    );\r\n    console.log(\"🕒 delivery_datetime:\", newOrder.delivery_datetime);\r\n  }, [selectedDay, shift, newOrder.delivery_datetime]);\r\n  // زمانی که ساعت انتخاب می‌شه\r\n  useEffect(() => {\r\n    if (!selectedDay) {\r\n      console.log(\"❗ selectedDay خالی است\");\r\n      return;\r\n    }\r\n\r\n    const { gy, gm, gd } = jalaali.toGregorian(\r\n      selectedDay.year,\r\n      selectedDay.month,\r\n      selectedDay.day\r\n    );\r\n\r\n    const currentDate = new Date(); // الان\r\n    const selectedDate = new Date(gy, gm - 1, gd); // تاریخ انتخاب‌شده\r\n\r\n    const today = new Date(\r\n      currentDate.getFullYear(),\r\n      currentDate.getMonth(),\r\n      currentDate.getDate()\r\n    );\r\n\r\n    console.log(\"✅ تاریخ انتخابی:\", selectedDate);\r\n\r\n    if (selectedDate < today) {\r\n      console.log(\"❌ تاریخ گذشته است\");\r\n\r\n      // خطا: تاریخ گذشته\r\n      setErrorMessage(\"❌ تاریخ انتخابی نمی‌تواند از امروز گذشته باشد.\");\r\n      setIsModalOpen(true); // مودال خطا باز بشه\r\n      setIsTimeModalOpen(false); // مودال ساعت حتماً بسته بشه\r\n\r\n      // ریست تاریخ و ساعت\r\n      setNewOrder((prev) => ({\r\n        ...prev,\r\n        delivery_datetime: \"\",\r\n      }));\r\n    } else {\r\n      console.log(\"✅ تاریخ معتبر است\");\r\n\r\n      // پاک کردن خطاها\r\n      setErrorMessage(\"\");\r\n      setIsModalOpen(false);\r\n\r\n      // مودال انتخاب ساعت باز بشه\r\n      setIsTimeModalOpen(true);\r\n    }\r\n  }, [selectedDay]);\r\n\r\n  // زمانی که ساعت انتخاب می‌شه\r\n  useEffect(() => {\r\n    if (!selectedDay || !selectedTime) {\r\n      console.log(\"⛔ منتظر انتخاب تاریخ و ساعت...\");\r\n      return;\r\n    }\r\n\r\n    const { gy, gm, gd } = jalaali.toGregorian(\r\n      selectedDay.year,\r\n      selectedDay.month,\r\n      selectedDay.day\r\n    );\r\n\r\n    const formattedDate = `${gy}-${String(gm).padStart(2, \"0\")}-${String(\r\n      gd\r\n    ).padStart(2, \"0\")}T${selectedTime}`;\r\n\r\n    console.log(\"🚀 delivery_datetime ساخته شد:\", formattedDate);\r\n\r\n    // 👇 اضافه کردن چک زمان فقط در صورتی که تاریخ امروز باشه\r\n    const currentDate = new Date(); // الان\r\n    const selectedDate = new Date(gy, gm - 1, gd); // تاریخ انتخاب‌شده\r\n\r\n    const today = new Date(\r\n      currentDate.getFullYear(),\r\n      currentDate.getMonth(),\r\n      currentDate.getDate()\r\n    );\r\n\r\n    const isToday = selectedDate.getTime() === today.getTime();\r\n\r\n    if (isToday) {\r\n      const currentHour = currentDate.getHours();\r\n      const currentMinute = currentDate.getMinutes();\r\n\r\n      const [selectedHour, selectedMinute] = selectedTime\r\n        .split(\":\")\r\n        .map(Number);\r\n\r\n      console.log(\"⌚ زمان فعلی:\", currentHour, currentMinute);\r\n      console.log(\"✅ زمان انتخابی:\", selectedHour, selectedMinute);\r\n\r\n      // اگه ساعت انتخابی کمتر یا برابر با ساعت فعلی بود → خطا بده\r\n      if (\r\n        selectedHour < currentHour ||\r\n        (selectedHour === currentHour && selectedMinute <= currentMinute)\r\n      ) {\r\n        console.log(\"❌ ساعت انتخابی کمتر از الان است!\");\r\n\r\n        setErrorMessage(\"❌ ساعت انتخابی نمی‌تواند کمتر از زمان فعلی باشد.\");\r\n        setIsModalOpen(true);\r\n\r\n        // ریست کردن datetime\r\n        setNewOrder((prev) => ({\r\n          ...prev,\r\n          delivery_datetime: \"\",\r\n        }));\r\n\r\n        return; // ادامه نده!\r\n      }\r\n    }\r\n\r\n    // ست کردن datetime نهایی\r\n    setNewOrder((prev) => ({\r\n      ...prev,\r\n      delivery_datetime: formattedDate,\r\n    }));\r\n\r\n    // اطمینان از بسته بودن خطاها\r\n    setErrorMessage(\"\");\r\n    setIsModalOpen(false);\r\n  }, [selectedTime]);\r\n  const handleConfirmTime = () => {\r\n    if (!selectedDay || !selectedTime) {\r\n      console.log(\"⛔ تاریخ یا ساعت انتخاب نشده\");\r\n      return;\r\n    }\r\n\r\n    const { gy, gm, gd } = jalaali.toGregorian(\r\n      selectedDay.year,\r\n      selectedDay.month,\r\n      selectedDay.day\r\n    );\r\n\r\n    const formattedDate = `${gy}-${String(gm).padStart(2, \"0\")}-${String(\r\n      gd\r\n    ).padStart(2, \"0\")}T${selectedTime}`;\r\n\r\n    const currentDate = new Date();\r\n    const selectedDate = new Date(gy, gm - 1, gd);\r\n    const selectedDateTime = new Date(\r\n      gy,\r\n      gm - 1,\r\n      gd,\r\n      ...selectedTime.split(\":\").map(Number)\r\n    );\r\n\r\n    const today = new Date(\r\n      currentDate.getFullYear(),\r\n      currentDate.getMonth(),\r\n      currentDate.getDate()\r\n    );\r\n\r\n    const isToday = selectedDate.getTime() === today.getTime();\r\n\r\n    // ✅ اعتبارسنجی ساعت در همان روز\r\n    if (isToday) {\r\n      const currentHour = currentDate.getHours();\r\n      const currentMinute = currentDate.getMinutes();\r\n\r\n      const [selectedHour, selectedMinute] = selectedTime\r\n        .split(\":\")\r\n        .map(Number);\r\n\r\n      if (\r\n        selectedHour < currentHour ||\r\n        (selectedHour === currentHour && selectedMinute <= currentMinute)\r\n      ) {\r\n        console.log(\"❌ ساعت انتخابی کمتر از زمان فعلی است!\");\r\n\r\n        setErrorMessage(\"❌ ساعت انتخابی نمی‌تواند کمتر از زمان فعلی باشد.\");\r\n        setIsModalOpen(true);\r\n\r\n        // ریست کن که اگه خطا داد دوباره بتونه انتخاب کنه\r\n        setNewOrder((prev) => ({\r\n          ...prev,\r\n          delivery_datetime: \"\",\r\n        }));\r\n        return;\r\n      }\r\n    }\r\n\r\n    // ✅ زمان معتبره → ثبت کن و مودال رو ببند\r\n    setNewOrder((prev) => ({\r\n      ...prev,\r\n      delivery_datetime: formattedDate,\r\n    }));\r\n\r\n    setErrorMessage(\"\");\r\n    setIsModalOpen(false);\r\n    setIsTimeModalOpen(false);\r\n    console.log(\"🚀 زمان تحویل ثبت شد:\", formattedDate);\r\n  };\r\n\r\n  // بستن مودال خطا\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    setErrorMessage(\"\");\r\n  };\r\n\r\n  // اعتبارسنجی فیلدها\r\n  const validateField = (field, value) => {\r\n    let error = \"\";\r\n\r\n    if (!value) {\r\n      error = errorMessages.required;\r\n    } else if (\r\n      [\"concrete_area_size\", \"max_pipeline_length\", \"pouring_height\"].includes(\r\n        field\r\n      )\r\n    ) {\r\n      if (isNaN(value) || Number(value) < 0) {\r\n        error = errorMessages.minZero;\r\n      }\r\n    } else if (field === \"delivery_datetime\") {\r\n      const selectedDate = new Date(value);\r\n      const now = new Date();\r\n      if (selectedDate <= now) {\r\n        error = errorMessages.dateInPast;\r\n      }\r\n    }\r\n\r\n    setErrors((prevErrors) => ({\r\n      ...prevErrors,\r\n      [field]: error,\r\n    }));\r\n\r\n    return error === \"\";\r\n  };\r\n\r\n  // تابع برای تبدیل اعداد فارسی به انگلیسی\r\n  const convertToEnglishDigits = (input) => {\r\n    const persianDigits = [\"۰\", \"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\"];\r\n    const englishDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n\r\n    return input\r\n      .split(\"\")\r\n      .map((char) => {\r\n        const index = persianDigits.indexOf(char);\r\n        return index !== -1 ? englishDigits[index] : char;\r\n      })\r\n      .join(\"\");\r\n  };\r\n\r\n  // درون handleChange از این تابع استفاده کنید\r\n  const handleChange = (field, value) => {\r\n    // تبدیل مقدار وارد شده به اعداد انگلیسی\r\n    const convertedValue = convertToEnglishDigits(value);\r\n\r\n    // ادامه کد handleChange برای به‌روز کردن وضعیت (state)\r\n    setNewOrder({\r\n      ...newOrder,\r\n      [field]: convertedValue,\r\n    });\r\n  };\r\n\r\n  // تغییر مقدار فرم\r\n\r\n  // در اینجا تاریخ و زمان جاری را می‌گیریم\r\n  const currentDateTime = new Date();\r\n\r\n  // تبدیل تاریخ انتخابی به شیء Date برای مقایسه\r\n  const selectedDateTime = new Date(newOrder.delivery_datetime);\r\n\r\n  // مقایسه تاریخ و زمان\r\n  if (selectedDateTime < currentDateTime) {\r\n    toast.error(\"❌ تاریخ و زمان انتخابی نمی‌تواند از زمان حال گذشته باشد.\");\r\n    return;\r\n  }\r\n\r\n  // ارسال فرم سفارش\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let formValid = true;\r\n    Object.keys(newOrder).forEach((field) => {\r\n      if (!validateField(field, newOrder[field])) {\r\n        formValid = false;\r\n      }\r\n    });\r\n\r\n    if (!formValid) {\r\n      toast.error(\"⚠ لطفاً خطاهای فرم را برطرف کنید.\");\r\n      return;\r\n    }\r\n\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (!token) {\r\n      toast.error(\"⛔ شما احراز هویت نشده‌اید! لطفاً وارد شوید.\");\r\n      navigate(\"/LoginForm\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"https://amin-beton-back.chbk.app/api/orders/\",\r\n        { ...newOrder, shift },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      console.log(\"Response from API:\", response); // بررسی پاسخ کلی از سرور\r\n      console.log(\"Order ID from response:\", response.data.id); // بررسی id که از سرور دریافت شده است\r\n      navigate(`/PumpPage/${response.data.id}`); // هدایت به صفحه\r\n    } catch (error) {\r\n      console.error(\"خطای سرور:\", error); // بررسی خطا در درخواست\r\n    }\r\n  };\r\n\r\n  // اگر لودینگ بود...\r\n  if (loading) {\r\n    return (\r\n      <div className=\"py-5 text-center text-white\">در حال بارگذاری...</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen p-8 bg-gray-100 bg-Bokara-Grey\">\r\n      <h2 className=\"pt-10 mb-4 text-xl text-center text-white md:text-2xl\">\r\n        خرید برای\r\n        <p>{projectTitle || \"در حال دریافت عنوان پروژه...\"}</p>\r\n      </h2>\r\n\r\n      <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\r\n        {/* نوع بتن */}\r\n        <div>\r\n          <label className=\"block text-white\">نوع بتن</label>\r\n          <select\r\n            value={newOrder.concrete_type}\r\n            onChange={(e) => handleChange(\"concrete_type\", e.target.value)}\r\n            className=\"w-full p-2 pl-4 text-white border bg-Bokara-Grey\"\r\n          >\r\n            <option value=\"\">انتخاب نوع بتن</option>\r\n            {concreteTypes.map((type) => (\r\n              <option key={type.id} value={type.id}>\r\n                {type.title}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {errors.concrete_type && (\r\n            <p className=\"text-red\">{errors.concrete_type}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* مقطع بتن‌ریزی */}\r\n        <div>\r\n          <label className=\"block text-white\">مقطع بتن‌ریزی</label>\r\n          <select\r\n            value={newOrder.concrete_pouring_type}\r\n            onChange={(e) =>\r\n              handleChange(\"concrete_pouring_type\", e.target.value)\r\n            }\r\n            className=\"w-full p-2 pl-4 text-white border bg-Bokara-Grey\"\r\n          >\r\n            <option value=\"\">انتخاب مقطع بتن‌ریزی</option>\r\n            {concretePouringTypes.map((pouring) => (\r\n              <option key={pouring.id} value={pouring.id}>\r\n                {pouring.title}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {errors.concrete_pouring_type && (\r\n            <p className=\"text-red\">{errors.concrete_pouring_type}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* رده مقاومت بتن */}\r\n        {/* رده مقاومت بتن */}\r\n        <div>\r\n          <label className=\"block text-white\">رده مقاومت بتن</label>\r\n          <select\r\n            value={newOrder.concrete_resistance_class}\r\n            onChange={(e) =>\r\n              handleChange(\"concrete_resistance_class\", e.target.value)\r\n            }\r\n            className=\"w-full p-2 pl-4 text-white border bg-Bokara-Grey\"\r\n          >\r\n            <option value=\"\">انتخاب کلاس مقاومت بتن</option>\r\n            {resistanceClasses.map((cls) => (\r\n              <option key={cls.id} value={cls.id}>\r\n                {cls.title}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {errors.concrete_resistance_class && (\r\n            <p className=\"text-red\">{errors.concrete_resistance_class}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* متراژ بتن */}\r\n        <div>\r\n          <label className=\"block mb-1 text-white\">متراژ بتن (مترمکعب)</label>\r\n          <Input\r\n            type=\"number\"\r\n            name=\"concrete_area_size\"\r\n            value={newOrder.concrete_area_size}\r\n            onChange={(e) => handleChange(\"concrete_area_size\", e.target.value)}\r\n            className=\"w-full p-2 border border-gray-300 rounded\"\r\n          />\r\n          {errors.concrete_area_size && (\r\n            <p className=\"mt-1 text-sm text-red\">{errors.concrete_area_size}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* حداکثر طول لوله کشی */}\r\n        <div>\r\n          <label className=\"block mb-1 text-white\">\r\n            حداکثر متراژ لوله‌کشی (متر)\r\n          </label>\r\n          <Input\r\n            type=\"number\"\r\n            value={newOrder.max_pipeline_length}\r\n            onChange={(e) =>\r\n              handleChange(\"max_pipeline_length\", e.target.value)\r\n            }\r\n            className=\"w-full p-2 border border-gray-300 rounded\"\r\n          />\r\n          {errors.max_pipeline_length && (\r\n            <p className=\"mt-1 text-sm text-red\">\r\n              {errors.max_pipeline_length}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        {/* ارتفاع بتن‌ریزی */}\r\n        <div>\r\n          <label className=\"block mb-1 text-white\">\r\n            ارتفاع بتن‌ریزی از محل پمپ (متر)\r\n          </label>\r\n          <Input\r\n            type=\"number\"\r\n            value={newOrder.pouring_height}\r\n            onChange={(e) => handleChange(\"pouring_height\", e.target.value)}\r\n            className=\"w-full p-2 border border-gray-300 rounded\"\r\n          />\r\n          {errors.pouring_height && (\r\n            <p className=\"mt-1 text-sm text-red\">{errors.pouring_height}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* تقویم و انتخاب ساعت */}\r\n        <div className=\"flex items-center justify-center w-full mt-4\">\r\n          <CustomCalendar\r\n            selectedDay={selectedDay}\r\n            setSelectedDay={setSelectedDay}\r\n            shift={shift}\r\n            setShift={setShift}\r\n          />\r\n        </div>\r\n\r\n        {/* انتخاب ساعت */}\r\n        {isTimeModalOpen && (\r\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n            <div className=\"relative z-50 flex flex-col items-center justify-center p-6 rounded-lg shadow-lg bg-Bokara-Grey\">\r\n              <h2 className=\"mb-4 text-lg text-white\">انتخاب ساعت تحویل</h2>\r\n              <input\r\n                type=\"time\"\r\n                value={selectedTime}\r\n                onChange={(e) => setSelectedTime(e.target.value)}\r\n                className=\"w-full p-2 border border-gray-300 rounded\"\r\n              />\r\n              <div className=\"flex justify-end mt-4\">\r\n                <button\r\n                  onClick={handleConfirmTime}\r\n                  className=\"px-4 py-2 bg-blue-500 rounded text-School-Bus\"\r\n                >\r\n                  تایید\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* نمایش ارور کلی */}\r\n        {isModalOpen && (\r\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n            <div className=\"relative z-50 p-6 rounded-lg bg-red\">\r\n              <h2 className=\"text-white\">{errorMessage}</h2>\r\n              <button\r\n                onClick={handleCloseModal}\r\n                className=\"px-4 py-2 mt-4 text-white rounded bg-School-Bus\"\r\n              >\r\n                بستن\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* دکمه ادامه */}\r\n        <div className=\"flex items-center justify-center\">\r\n          <ButtonProject\r\n            type=\"submit\"\r\n            className=\"w-full py-2 mt-8 md:w-2/3 md:px-40\"\r\n          >\r\n            ادامه\r\n          </ButtonProject>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SaleProject;\r\n"
        }
    ]
}