{
    "sourceFile": "src/Sales/VibratorPage.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1744122429557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744123048581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,16 +151,24 @@\n \r\n       // اگر موفقیت‌آمیز بود\r\n       if (response.status === 200) {\r\n         console.log(\"✅ Server Response:\", response.data);\r\n-        toast.success(\"✔ سفارش با موفقیت ثبت شد!\");\r\n-\r\n-        // ریلود صفحه\r\n-        location.reload(); // صفحه را ریلود می‌کند\r\n+        toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n+      \r\n+        // بروزرسانی لیست‌های انتخاب شده\r\n+        setSelectedVibrators((prev) => [...prev, ...newVibrators]);\r\n+        setSelectedSubVibrators((prev) => [...prev, ...newSubVibrators]);\r\n+      \r\n+        // پاک کردن انتخاب‌های موقت\r\n+        setTempSelectedVibrators([]);\r\n+        setTempSelectedSubVibrators([]);\r\n+        setSubVibrators([]);\r\n+        setQuantity(1);\r\n       } else {\r\n         setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-        setIsModalOpen(true);\r\n+        setIsModalOpen(true); // باز کردن مودال خطا\r\n       }\r\n+      \r\n     } catch (error) {\r\n       // در صورت بروز خطا\r\n       console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n       setModalMessage(\r\n"
                },
                {
                    "date": 1744123194566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,22 +152,29 @@\n       // اگر موفقیت‌آمیز بود\r\n       if (response.status === 200) {\r\n         console.log(\"✅ Server Response:\", response.data);\r\n         toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n-\r\n-        // بروزرسانی لیست‌های انتخاب شده\r\n-        setSelectedVibrators((prev) => [...prev, ...newVibrators]);\r\n-        setSelectedSubVibrators((prev) => [...prev, ...newSubVibrators]);\r\n-\r\n-        // پاک کردن انتخاب‌های موقت\r\n+      \r\n+        // بروزرسانی لیست‌های انتخاب شده بدون رفرش صفحه\r\n+        setSelectedVibrators((prev) => {\r\n+          // اینجا می‌خواهیم ویبراتورهای جدید را اضافه کنیم\r\n+          return [...prev, ...newVibrators];\r\n+        });\r\n+        setSelectedSubVibrators((prev) => {\r\n+          // اینجا می‌خواهیم زیر ویبراتورها را اضافه کنیم\r\n+          return [...prev, ...newSubVibrators];\r\n+        });\r\n+      \r\n+        // پاک کردن انتخاب‌های موقت بعد از اضافه کردن\r\n         setTempSelectedVibrators([]);\r\n         setTempSelectedSubVibrators([]);\r\n         setSubVibrators([]);\r\n         setQuantity(1);\r\n       } else {\r\n         setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n         setIsModalOpen(true); // باز کردن مودال خطا\r\n       }\r\n+      \r\n     } catch (error) {\r\n       // در صورت بروز خطا\r\n       console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n       setModalMessage(\r\n"
                },
                {
                    "date": 1744123250324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -733,70 +733,69 @@\n           </div>\r\n         )}\r\n         {/* نمایش انتخاب‌های کاربر */}\r\n         <div className=\"mb-8\">\r\n-          <h3 className=\"text-lg font-bold\">\r\n-            ویبراتورهای ثبت‌شده برای این سفارش\r\n-          </h3>\r\n-          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-            {selectedVibrators.map((vibrator) => {\r\n-              if (!vibrator.vibrator || !vibrator.vibrator.title) {\r\n-                return null;\r\n-              }\r\n+  <h3 className=\"text-lg font-bold\">\r\n+    ویبراتورهای ثبت‌شده برای این سفارش\r\n+  </h3>\r\n+  <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+    {selectedVibrators.map((vibrator) => {\r\n+      if (!vibrator.vibrator || !vibrator.vibrator.title) {\r\n+        return null;\r\n+      }\r\n \r\n-              // پیدا کردن زیرویبراتورهای مربوط به هر ویبراتور\r\n-              const subVibratorsForThis = vibrator.sub_vibrator\r\n-                ? [vibrator.sub_vibrator]\r\n-                : [];\r\n+      // پیدا کردن زیرویبراتورهای مربوط به هر ویبراتور\r\n+      const subVibratorsForThis = vibrator.sub_vibrator\r\n+        ? [vibrator.sub_vibrator]\r\n+        : [];\r\n \r\n-              return (\r\n-                <div\r\n-                  key={vibrator.id}\r\n-                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n-                >\r\n-                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n-                  <div className=\"mb-2\">\r\n-                    {vibrator.vibrator?.title || \"ویبراتور نامشخص\"}\r\n-                  </div>\r\n-                  <div>تعداد ویبراتور: {vibrator.count}</div>\r\n-                  {subVibratorsForThis.length > 0 && (\r\n-                    <div>\r\n-                      {subVibratorsForThis.map((sub_vibrator) => (\r\n-                        <div key={sub_vibrator.id} className=\"text-sm\">\r\n-                          زیرویبراتور: {sub_vibrator.title}\r\n-                        </div>\r\n-                      ))}\r\n-                    </div>\r\n-                  )}\r\n-                  <button\r\n-                    className=\"border-none text-red\"\r\n-                    onClick={() => handleDeleteVibratorOrder(vibrator.id)}\r\n-                  >\r\n-                    حذف\r\n-                  </button>\r\n+      return (\r\n+        <div\r\n+          key={vibrator.id}\r\n+          className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n+        >\r\n+          <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n+          <div className=\"mb-2\">\r\n+            {vibrator.vibrator?.title || \"ویبراتور نامشخص\"}\r\n+          </div>\r\n+          <div>تعداد ویبراتور: {vibrator.count}</div>\r\n+          {subVibratorsForThis.length > 0 && (\r\n+            <div>\r\n+              {subVibratorsForThis.map((sub_vibrator) => (\r\n+                <div key={sub_vibrator.id} className=\"text-sm\">\r\n+                  زیرویبراتور: {sub_vibrator.title}\r\n                 </div>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-\r\n-          <Button\r\n-            className=\"px-10\"\r\n-            onClick={() => {\r\n-              handleUpdateOrder();\r\n-              handleAddAndSubmit();\r\n-\r\n-              // navigate(`/FormPage/${orderId}`); // یا هر مسیر مرحله‌ی بعدی که مناسب باشه\r\n-            }}\r\n+              ))}\r\n+            </div>\r\n+          )}\r\n+          <button\r\n+            className=\"border-none text-red\"\r\n+            onClick={() => handleDeleteVibratorOrder(vibrator.id)}\r\n           >\r\n-            ادامه\r\n-          </Button>\r\n-          <Modal\r\n-            isOpen={isModalOpen}\r\n-            onClose={() => setIsModalOpen(false)}\r\n-            message={modalMessage}\r\n-          />\r\n+            حذف\r\n+          </button>\r\n         </div>\r\n+      );\r\n+    })}\r\n+  </div>\r\n \r\n+  <Button\r\n+    className=\"px-10\"\r\n+    onClick={() => {\r\n+      handleUpdateOrder();\r\n+      handleAddAndSubmit();\r\n+    }}\r\n+  >\r\n+    ادامه\r\n+  </Button>\r\n+  <Modal\r\n+    isOpen={isModalOpen}\r\n+    onClose={() => setIsModalOpen(false)}\r\n+    message={modalMessage}\r\n+  />\r\n+</div>\r\n+\r\n+\r\n         {showVibratorModal && (\r\n           <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n             <div className=\"p-8 text-black bg-white rounded-lg w-96\">\r\n               <h2 className=\"mb-4 text-lg font-bold text-center\">\r\n"
                }
            ],
            "date": 1744122429557,
            "name": "Commit-0",
            "content": "// export default Vibrator\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Button from \"../ui/Button\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Modal from \"../pages/Modal\";\r\nconst VibratorPage = () => {\r\n  const [vibrators, setVibrators] = useState([]); // لیست ویبراتورها\r\n  const [subVibrators, setSubVibrators] = useState([]); // زیر ویبراتورها\r\n  const [selectedVibrators, setSelectedVibrators] = useState([]); // ویبراتورهای انتخاب‌شده\r\n  const [selectedSubVibrators, setSelectedSubVibrators] = useState([]); // زیر ویبراتورهای انتخاب‌شده\r\n  const [loading, setLoading] = useState(true); // در حال بارگذاری؟\r\n  const [tempSelectedVibrators, setTempSelectedVibrators] = useState([]); // ویبراتورهای انتخاب‌شده موقت\r\n  const [tempSelectedSubVibrators, setTempSelectedSubVibrators] = useState([]); // زیر ویبراتورهای انتخاب‌شده موقت\r\n  const { orderId } = useParams(); // شماره سفارش\r\n  const [projectTitle, setProjectTitle] = useState(\"\"); // عنوان پروژه\r\n  const navigate = useNavigate(); // برای مسیریابی\r\n  const [malepSelected, setMalepSelected] = useState(\"\"); // ماله پروانه\r\n  const [quantity, setQuantity] = useState(1); // تعداد ویبراتورها\r\n  const [isSubmitting, setIsSubmitting] = useState(false); // بررسی وضعیت ارسال\r\n  const [showVibratorModal, setShowVibratorModal] = useState(false); // نمایش مدال ویبراتور\r\n  const [showVibratorSelection, setShowVibratorSelection] = useState(false); // نمایش انتخاب ویبراتور\r\n  const [supervisionSelected, setSupervisionSelected] = useState(null); // نظارت انتخاب‌شده\r\n  const [supervisionDescription, setSupervisionDescription] = useState(\"\");\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState(\"\");\r\n  const handleVibratorSelection = (id) => {\r\n    if (quantity < 1) {\r\n      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n      return;\r\n    }\r\n\r\n    const vibrator = vibrators.find((v) => v.id === id);\r\n    if (!vibrator) return;\r\n\r\n    const isSelected = tempSelectedVibrators.some((v) => v.id === vibrator.id);\r\n\r\n    if (isSelected) {\r\n      // اگر دوباره کلیک کرد، انتخاب رو حذف کن\r\n      setTempSelectedVibrators([]);\r\n      setTempSelectedSubVibrators([]);\r\n      setSubVibrators([]);\r\n    } else {\r\n      // هر انتخاب قبلی رو حذف کن و فقط این ویبراتور رو انتخاب کن\r\n      setTempSelectedVibrators([\r\n        {\r\n          ...vibrator,\r\n          count: quantity,\r\n        },\r\n      ]);\r\n\r\n      setTempSelectedSubVibrators([]); // زیر ویبراتورهای قبلی پاک بشه\r\n      setSubVibrators([]);\r\n      fetchSubVibrators(id);\r\n    }\r\n\r\n    // ذخیره انتخاب‌ها در localStorage\r\n    localStorage.setItem(\r\n      \"tempSelectedVibrators\",\r\n      JSON.stringify(tempSelectedVibrators)\r\n    );\r\n    localStorage.setItem(\r\n      \"tempSelectedSubVibrators\",\r\n      JSON.stringify(tempSelectedSubVibrators)\r\n    );\r\n  };\r\n\r\n  //   // بازیابی داده‌ها از localStorage\r\n  //   const savedSupervisionSelected = localStorage.getItem(\r\n  //     \"supervisionSelected\"\r\n  //   );\r\n  //   const savedMalepSelected = localStorage.getItem(\"malepSelected\");\r\n  //   const savedQuantity = localStorage.getItem(\"quantity\");\r\n  //   const savedSupervisionDescription = localStorage.getItem(\r\n  //     \"supervisionDescription\"\r\n  //   );\r\n\r\n  //   // تنظیم وضعیت بر اساس داده‌های ذخیره‌شده\r\n  //   if (savedSupervisionSelected) {\r\n  //     setSupervisionSelected(savedSupervisionSelected);\r\n  //   }\r\n  //   if (savedMalepSelected) {\r\n  //     setMalepSelected(savedMalepSelected);\r\n  //   }\r\n  //   if (savedQuantity) {\r\n  //     setQuantity(Number(savedQuantity));\r\n  //   }\r\n  //   if (savedSupervisionDescription) {\r\n  //     setSupervisionDescription(savedSupervisionDescription);\r\n  //   }\r\n  // }, []);\r\n\r\n  const handleSubmitOrder = async (orderId) => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n\r\n    // بررسی احراز هویت\r\n    if (!token) {\r\n      toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n      return;\r\n    }\r\n\r\n    // بررسی اینکه سفارش و ویبراتور انتخاب شده باشد\r\n    if (!orderId || tempSelectedVibrators.length === 0) {\r\n      toast.error(\"❌ سفارش یا ویبراتور انتخاب نشده است!\");\r\n      return;\r\n    }\r\n\r\n    const payload = [];\r\n\r\n    // ایجاد payload برای ارسال\r\n    tempSelectedVibrators.forEach((vibrator) => {\r\n      const subVibratorsForThisVibrator = tempSelectedSubVibrators.filter(\r\n        (subVibrator) => subVibrator.vibratorId === vibrator.id\r\n      );\r\n\r\n      if (subVibratorsForThisVibrator.length > 0) {\r\n        // ارسال ویبراتور و زیر ویبراتورها با هم\r\n        subVibratorsForThisVibrator.forEach((subVibrator) => {\r\n          payload.push({\r\n            order: Number(orderId),\r\n            vibrator: Number(vibrator.id),\r\n            count: Number(vibrator.count),\r\n            sub_vibrator: Number(subVibrator.id),\r\n          });\r\n        });\r\n      } else {\r\n        // فقط ویبراتور را ارسال می‌کنیم\r\n        payload.push({\r\n          order: Number(orderId),\r\n          vibrator: Number(vibrator.id),\r\n          count: Number(vibrator.count),\r\n          sub_vibrator: null,\r\n        });\r\n      }\r\n    });\r\n\r\n    try {\r\n      // ارسال به سرور\r\n      const response = await axios.post(\r\n        \"https://amin-beton-back.chbk.app/api/orders/add-vibrator-order/\",\r\n        payload,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      // اگر موفقیت‌آمیز بود\r\n      if (response.status === 200) {\r\n        console.log(\"✅ Server Response:\", response.data);\r\n        toast.success(\"✔ سفارش با موفقیت ثبت شد!\");\r\n\r\n        // ریلود صفحه\r\n        location.reload(); // صفحه را ریلود می‌کند\r\n      } else {\r\n        setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n        setIsModalOpen(true);\r\n      }\r\n    } catch (error) {\r\n      // در صورت بروز خطا\r\n      console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n      setModalMessage(\r\n        error.response?.data?.message || \"❌ ارسال سفارش با مشکل مواجه شد!\"\r\n      );\r\n      setIsModalOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleAddAndSubmit = async () => {\r\n    console.log(\"🚀 handleAddAndSubmit اجرا شد!\");\r\n\r\n    if (\r\n      tempSelectedVibrators.length === 0 &&\r\n      tempSelectedSubVibrators.length === 0\r\n    ) {\r\n      setModalMessage(\"⚠️ ویبراتوری انتخاب نکردید!\");\r\n      setIsModalOpen(true); // باز کردن مودال خطا\r\n      return;\r\n    }\r\n\r\n    console.log(\"🔍 Selected SubVibrators:\", tempSelectedSubVibrators);\r\n\r\n    // چک کردن orderId قبل از ارسال\r\n    if (!orderId) {\r\n      setModalMessage(\"❌ شماره سفارش مشخص نشده است!\");\r\n      setIsModalOpen(true); // باز کردن مودال خطا\r\n      return;\r\n    }\r\n\r\n    // اضافه کردن تعداد به ویبراتورها و زیر ویبراتورها\r\n    const newVibrators = tempSelectedVibrators.map((vibrator) => ({\r\n      ...vibrator,\r\n      count: quantity,\r\n    }));\r\n\r\n    const newSubVibrators = tempSelectedSubVibrators.map((subVibrator) => ({\r\n      ...subVibrator,\r\n      count: quantity,\r\n    }));\r\n\r\n    const payload = [];\r\n\r\n    newVibrators.forEach((vibrator) => {\r\n      // پیدا کردن زیر ویبراتورهای مربوط به این ویبراتور\r\n      const subVibratorsForThisVibrator = newSubVibrators.filter(\r\n        (subVibrator) => subVibrator.vibratorId === vibrator.id\r\n      );\r\n\r\n      if (subVibratorsForThisVibrator.length > 0) {\r\n        // اگر ویبراتور زیر ویبراتور دارد، ارسال ویبراتور و زیر ویبراتور‌ها با هم\r\n        subVibratorsForThisVibrator.forEach((subVibrator) => {\r\n          payload.push({\r\n            order: Number(orderId),\r\n            vibrator: Number(vibrator.id),\r\n            count: Number(vibrator.count),\r\n            sub_vibrator: Number(subVibrator.id), // ارسال زیر ویبراتور\r\n          });\r\n        });\r\n      } else {\r\n        // اگر ویبراتور زیر ویبراتور ندارد، فقط ویبراتور را ارسال می‌کنیم\r\n        payload.push({\r\n          order: Number(orderId),\r\n          vibrator: Number(vibrator.id),\r\n          count: vibrator.countable ? Number(vibrator.count) : 1,\r\n          sub_vibrator: null, // بدون زیر ویبراتور\r\n        });\r\n      }\r\n    });\r\n\r\n    // ارسال تمامی درخواست‌ها به سرور\r\n    console.log(\"📦 Payload:\", payload);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"https://amin-beton-back.chbk.app/api/orders/add-vibrator-order/\", // فرض کنید این آدرس جدید است\r\n        payload,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        console.log(\"✅ Server Response:\", response.data);\r\n        toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n\r\n        // بروزرسانی لیست‌های انتخاب شده\r\n        setSelectedVibrators((prev) => [...prev, ...newVibrators]);\r\n        setSelectedSubVibrators((prev) => [...prev, ...newSubVibrators]);\r\n\r\n        // پاک کردن انتخاب‌های موقت\r\n        setTempSelectedVibrators([]);\r\n        setTempSelectedSubVibrators([]);\r\n        setSubVibrators([]);\r\n        setQuantity(1);\r\n      } else {\r\n        setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n        setIsModalOpen(true); // باز کردن مودال خطا\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n      setModalMessage(\r\n        error.response?.data?.message || \"❌ ارسال سفارش با مشکل مواجه شد!\"\r\n      );\r\n      setIsModalOpen(true); // باز کردن مودال خطا\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const fetchOrderData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const token = localStorage.getItem(\"accessToken\");\r\n\r\n        if (!token) {\r\n          toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n          return;\r\n        }\r\n\r\n        // دریافت داده‌های سفارش شامل پمپ‌ها و ویبراتورها\r\n        const orderDataRes = await axios.get(\r\n          `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n\r\n        console.log(\"پمپ‌ها و زیرپمپ‌ها:\", orderDataRes.data); // برای بررسی\r\n        console.log(\"ویبراتورها و زیرویبراتورها:\", orderDataRes.data); // بررسی پاسخ دریافتی\r\n\r\n        // داده‌های مربوط به ویبراتور\r\n        setSelectedVibrators(orderDataRes.data.vibrators || []);\r\n        setSelectedSubVibrators(orderDataRes.data.subVibrators || []);\r\n      } catch (err) {\r\n        toast.error(\"❌ خطا در دریافت داده‌های سفارش!\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (orderId) {\r\n      fetchOrderData();\r\n    }\r\n  }, [orderId]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      if (!token) {\r\n        toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const { data } = await axios.get(\r\n          \"https://amin-beton-back.chbk.app/api/sales-vibrator/\",\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        const parentVibrators = data.filter(\r\n          (vibrator) => vibrator.parent === null\r\n        );\r\n        setVibrators(parentVibrators); // Renamed variable from setPumps to setVibrators\r\n\r\n        const projectRes = await axios.get(\r\n          `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        setProjectTitle(projectRes.data.title || \"بدون عنوان\");\r\n      } catch (err) {\r\n        toast.error(\"❌ خطا در دریافت اطلاعات!\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [orderId]);\r\n\r\n  const fetchSubVibrators = async (id) => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (!token) {\r\n      toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.get(\r\n        `https://amin-beton-back.chbk.app/api/sales-vibrator/${id}/sub-vibrators/`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      if (data && data.length > 0) {\r\n        setSubVibrators((prev) => {\r\n          // Changed setSubPumps to setSubVibrators\r\n          const newSubs = data.filter(\r\n            (subVibrator) =>\r\n              !prev.some((existing) => existing.id === subVibrator.id)\r\n          );\r\n          return [...prev, ...newSubs];\r\n        });\r\n      } else {\r\n        setSubVibrators([]); // Make sure you're using setSubVibrators here\r\n      }\r\n    } catch (err) {\r\n      toast.error(\"❌ خطا در دریافت زیرمجموعه‌های ویبراتور!\"); // Updated error message\r\n    }\r\n  };\r\n\r\n  const handleSubVibratorSelection = (subVibratorId) => {\r\n    if (quantity < 1) {\r\n      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n      return;\r\n    }\r\n\r\n    const subVibrator = subVibrators.find((sv) => sv.id === subVibratorId);\r\n    if (!subVibrator) return;\r\n\r\n    // فقط یک ویبراتور انتخاب می‌شه پس اول اون رو می‌گیریم\r\n    const selectedVibrator = tempSelectedVibrators[0];\r\n    if (!selectedVibrator) {\r\n      toast.warn(\"⚠️ لطفاً ابتدا یک ویبراتور انتخاب کنید!\");\r\n      return;\r\n    }\r\n\r\n    const exists = tempSelectedSubVibrators.some(\r\n      (sv) => sv.id === subVibratorId && sv.vibratorId === selectedVibrator.id\r\n    );\r\n\r\n    if (exists) {\r\n      // اگه دوباره انتخاب بشه، حذف کن\r\n      setTempSelectedSubVibrators([]);\r\n    } else {\r\n      // قبلی رو حذف کن و فقط این رو بذار\r\n      setTempSelectedSubVibrators([\r\n        {\r\n          ...subVibrator,\r\n          count: quantity,\r\n          vibratorId: selectedVibrator.id,\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleQuantityChangeForVibrator = (id, value) => {\r\n    const numericValue = Number(value);\r\n    if (isNaN(numericValue) || numericValue < 1) return;\r\n\r\n    // تغییر تعداد ویبراتور انتخاب شده\r\n    setTempSelectedVibrators((prev) =>\r\n      prev.map((v) => (v.id === id ? { ...v, count: numericValue } : v))\r\n    );\r\n  };\r\n\r\n  const handleQuantityChangeForSubVibrator = (id, value) => {\r\n    const numericValue = Number(value);\r\n    if (isNaN(numericValue) || numericValue < 1) return;\r\n\r\n    // تغییر تعداد زیر ویبراتور انتخاب شده\r\n    setTempSelectedSubVibrators((prev) =>\r\n      prev.map((sv) => (sv.id === id ? { ...sv, count: numericValue } : sv))\r\n    );\r\n  };\r\n\r\n  const handleTempQuantityChange = (id, value, isSubVibrator = false) => {\r\n    const numericValue = Number(value);\r\n    if (isNaN(numericValue) || numericValue < 1) return;\r\n\r\n    if (isSubVibrator) {\r\n      setTempSelectedSubVibrators((prev) =>\r\n        prev.map((sv) => (sv.id === id ? { ...sv, count: numericValue } : sv))\r\n      );\r\n    } else {\r\n      setTempSelectedVibrators((prev) =>\r\n        prev.map((v) => (v.id === id ? { ...v, count: numericValue } : v))\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleQuantityChange = (e) => {\r\n    const updatedCount = Number(e.target.value);\r\n    if (!isNaN(updatedCount) && updatedCount >= 1) {\r\n      setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n    }\r\n  };\r\n\r\n  const handleRemoveVibrator = (id, isSubVibrator = false) => {\r\n    if (isSubVibrator) {\r\n      setSelectedSubVibrators((prev) => prev.filter((sv) => sv.id !== id));\r\n    } else {\r\n      setSelectedVibrators((prev) => prev.filter((v) => v.id !== id));\r\n    }\r\n\r\n    deleteVibratorOrder(id);\r\n  };\r\n\r\n\r\n  //   if (!token) {\r\n  //     toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   try {\r\n  //     await axios.delete(\r\n  //       `https://amin-beton-back.chbk.app/api/vibrator-orders/${id}/`,\r\n  //       { headers: { Authorization: `Bearer ${token}` } }\r\n  //     );\r\n  //     toast.success(\"✅ با موفقیت حذف شد!\");\r\n  //   } catch (err) {\r\n  //     toast.error(\"❌ خطا در حذف آیتم!\");\r\n  //   }\r\n  // };\r\n  const handleDeleteVibratorOrder = async (vibratorOrderId) => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (!token) {\r\n      toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await axios.delete(\r\n        `https://amin-beton-back.chbk.app/api/vibrator-orders/${vibratorOrderId}/`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      toast.success(\"✔ ویبراتور با موفقیت حذف شد!\");\r\n      // حذف از UI\r\n      setSelectedVibrators((prev) =>\r\n        prev.filter((v) => v.id !== vibratorOrderId)\r\n      );\r\n    } catch (error) {\r\n      console.error(\"❌ خطا در حذف ویبراتور:\", error.response?.data || error);\r\n      toast.error(\"❌ حذف ویبراتور با مشکل مواجه شد!\");\r\n    }\r\n  };\r\n  const handleUpdateOrder = async () => {\r\n    const token = localStorage.getItem(\"accessToken\"); // دریافت توکن از localStorage\r\n\r\n    // چک کردن اینکه آیا توکن وجود دارد یا نه\r\n    if (!token) {\r\n      setModalMessage(\"⛛ شما احراز هویت نشده‌اید!\");\r\n      setIsModalOpen(true);\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      sealing_implementation: supervisionSelected === \"yes\" ? \"Yes\" : \"No\",\r\n      power_trowel: malepSelected === \"yes\",\r\n      power_trowel_count: quantity,\r\n      additional_description: supervisionDescription,\r\n    };\r\n\r\n    try {\r\n      // ارسال درخواست به سرور برای به‌روزرسانی سفارش با هدر Authorization\r\n      const response = await axios.patch(\r\n        `https://amin-beton-back.chbk.app/api/orders/${orderId}/`, // استفاده از PATCH به جای PUT\r\n        payload,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`, // ارسال توکن در هدر\r\n            \"Content-Type\": \"application/json\", // نوع محتوا\r\n          },\r\n        }\r\n      );\r\n\r\n      // اگر به‌روزرسانی موفق بود\r\n      console.log(\"Order updated successfully:\", response.data);\r\n      setModalMessage(\"Order updated successfully\");\r\n      setIsModalOpen(true);\r\n\r\n      // ریلود صفحه برای مشاهده تغییرات\r\n      location.reload();\r\n    } catch (error) {\r\n      console.error(\"Error updating order:\", error);\r\n      setModalMessage(\"There was an error updating the order.\");\r\n      setIsModalOpen(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n      <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n        <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n          خرید برای <br /> {projectTitle}\r\n        </h1>\r\n        {/* Form Fields for Sealing Implementation (اجرا و نظارت آب‌بندی) */}\r\n        <div className=\"flex flex-col gap-4 mb-8\">\r\n          <h2 className=\"text-lg font-bold\">اجرا و نظارت آب‌بندی</h2>\r\n          <div className=\"flex gap-4\">\r\n            <Button\r\n              className={`rounded-full w-16 h-16 flex items-center justify-center text-sm transition-all duration-200 ${\r\n                supervisionSelected === \"yes\"\r\n                  ? \"bg-School-Bus text-black\"\r\n                  : \"border border-white text-white\"\r\n              }`}\r\n              variant={supervisionSelected === \"yes\" ? \"default\" : \"outline\"}\r\n              onClick={() => setSupervisionSelected(\"yes\")}\r\n            >\r\n              بله\r\n            </Button>\r\n            <Button\r\n              className={`rounded-full w-16 h-16 flex items-center justify-center text-sm transition-all duration-200 ${\r\n                supervisionSelected === \"no\"\r\n                  ? \"bg-School-Bus text-black\"\r\n                  : \"border border-white text-white\"\r\n              }`}\r\n              variant={supervisionSelected === \"no\" ? \"default\" : \"outline\"}\r\n              onClick={() => setSupervisionSelected(\"no\")}\r\n            >\r\n              خیر\r\n            </Button>\r\n          </div>\r\n\r\n          {supervisionSelected === \"yes\" && (\r\n            <div className=\"flex flex-col gap-2\">\r\n              <label htmlFor=\"supervisionDescription\">توضیحات:</label>\r\n              <textarea\r\n                id=\"supervisionDescription\"\r\n                className=\"w-full p-2 text-black border rounded-md\"\r\n                rows={4}\r\n                placeholder=\"توضیحات مربوط به اجرا و نظارت آب‌بندی را وارد کنید...\"\r\n                value={supervisionDescription}\r\n                onChange={(e) => setSupervisionDescription(e.target.value)}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Form Fields for Power Trowel (ماله پروانه) */}\r\n        <div className=\"flex flex-col gap-4 mb-8\">\r\n          <h2 className=\"text-lg font-bold\">ماله پروانه</h2>\r\n          <div className=\"flex gap-4\">\r\n            <Button\r\n              className={`rounded-full w-16 h-16 flex items-center justify-center text-sm transition-all duration-200 ${\r\n                malepSelected === \"yes\"\r\n                  ? \"bg-School-Bus text-black\"\r\n                  : \"border border-white text-white\"\r\n              }`}\r\n              variant=\"ghost\"\r\n              onClick={() => setMalepSelected(\"yes\")}\r\n            >\r\n              بله\r\n            </Button>\r\n            <Button\r\n              className={`rounded-full w-16 h-16 flex items-center justify-center text-sm transition-all duration-200 ${\r\n                malepSelected === \"no\"\r\n                  ? \"bg-School-Bus text-black\"\r\n                  : \"border border-white text-white\"\r\n              }`}\r\n              variant=\"ghost\"\r\n              onClick={() => setMalepSelected(\"no\")}\r\n            >\r\n              خیر\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Submit Button to Update Order */}\r\n        {/* <div className=\"flex justify-center mb-8\">\r\n          <Button className=\"px-10\">به روز رسانی سفارش</Button>\r\n        </div> */}\r\n\r\n        <div className=\"flex justify-start mb-8\">\r\n          <Button\r\n            className=\"px-4 rounded-lg\"\r\n            onClick={() => setShowVibratorModal(true)}\r\n          >\r\n            انتخاب ویبراتور\r\n          </Button>\r\n        </div>\r\n        {/* انتخاب نوع ویبراتور وقتی showVibratorSelection فعال شد */}\r\n        {showVibratorSelection && (\r\n          <div className=\"mb-8\">\r\n            <h2 className=\"text-lg font-bold\">نوع ویبراتور</h2>\r\n            <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n              {vibrators.map((vibrator) => {\r\n                const isSelected = tempSelectedVibrators.some(\r\n                  (v) => v.id === vibrator.id\r\n                );\r\n\r\n                return (\r\n                  <div\r\n                    key={vibrator.id}\r\n                    className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n                      isSelected ? \"border-School-Bus\" : \"border-white\"\r\n                    } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n                    onClick={() => handleVibratorSelection(vibrator.id)}\r\n                  >\r\n                    <div\r\n                      className={`w-4 h-4 mb-2 rounded-full ${\r\n                        isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n                      }`}\r\n                    ></div>\r\n                    <div className=\"mb-2\">{vibrator.title}</div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n\r\n            {tempSelectedVibrators.length > 0 && subVibrators.length > 0 && (\r\n              <div className=\"mb-8\">\r\n                <h3 className=\"text-lg font-bold\">زیرمجموعه‌های ویبراتور</h3>\r\n                <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n                  {subVibrators.map((subVibrator) => {\r\n                    const isSelected = tempSelectedSubVibrators.some(\r\n                      (sv) => sv.id === subVibrator.id\r\n                    );\r\n\r\n                    return (\r\n                      <div\r\n                        key={subVibrator.id}\r\n                        className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n                          isSelected ? \"border-School-Bus\" : \"border-white\"\r\n                        } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n                        onClick={() =>\r\n                          handleSubVibratorSelection(subVibrator.id)\r\n                        }\r\n                      >\r\n                        <div\r\n                          className={`w-4 h-4 mb-2 rounded-full ${\r\n                            isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n                          }`}\r\n                        ></div>\r\n                        <div className=\"mb-2\">{subVibrator.title}</div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* فیلد تعداد */}\r\n            {tempSelectedVibrators.some((vibrator) => vibrator.countable) && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <label htmlFor=\"totalQty\">تعداد:</label>\r\n                <input\r\n                  id=\"totalQty\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  value={quantity}\r\n                  onChange={handleQuantityChange}\r\n                  className=\"w-20 p-1 text-black border rounded-md\"\r\n                />\r\n              </div>\r\n            )}\r\n            {/* دکمه افزودن ویبراتور */}\r\n            <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n              <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n                افزودن ویبراتور\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* نمایش انتخاب‌های کاربر */}\r\n        <div className=\"mb-8\">\r\n          <h3 className=\"text-lg font-bold\">\r\n            ویبراتورهای ثبت‌شده برای این سفارش\r\n          </h3>\r\n          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n            {selectedVibrators.map((vibrator) => {\r\n              if (!vibrator.vibrator || !vibrator.vibrator.title) {\r\n                return null;\r\n              }\r\n\r\n              // پیدا کردن زیرویبراتورهای مربوط به هر ویبراتور\r\n              const subVibratorsForThis = vibrator.sub_vibrator\r\n                ? [vibrator.sub_vibrator]\r\n                : [];\r\n\r\n              return (\r\n                <div\r\n                  key={vibrator.id}\r\n                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n                >\r\n                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n                  <div className=\"mb-2\">\r\n                    {vibrator.vibrator?.title || \"ویبراتور نامشخص\"}\r\n                  </div>\r\n                  <div>تعداد ویبراتور: {vibrator.count}</div>\r\n                  {subVibratorsForThis.length > 0 && (\r\n                    <div>\r\n                      {subVibratorsForThis.map((sub_vibrator) => (\r\n                        <div key={sub_vibrator.id} className=\"text-sm\">\r\n                          زیرویبراتور: {sub_vibrator.title}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                  <button\r\n                    className=\"border-none text-red\"\r\n                    onClick={() => handleDeleteVibratorOrder(vibrator.id)}\r\n                  >\r\n                    حذف\r\n                  </button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <Button\r\n            className=\"px-10\"\r\n            onClick={() => {\r\n              handleUpdateOrder();\r\n              handleAddAndSubmit();\r\n\r\n              // navigate(`/FormPage/${orderId}`); // یا هر مسیر مرحله‌ی بعدی که مناسب باشه\r\n            }}\r\n          >\r\n            ادامه\r\n          </Button>\r\n          <Modal\r\n            isOpen={isModalOpen}\r\n            onClose={() => setIsModalOpen(false)}\r\n            message={modalMessage}\r\n          />\r\n        </div>\r\n\r\n        {showVibratorModal && (\r\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n            <div className=\"p-8 text-black bg-white rounded-lg w-96\">\r\n              <h2 className=\"mb-4 text-lg font-bold text-center\">\r\n                آیا می‌خواهید ویبراتور اضافه کنید؟\r\n              </h2>\r\n              <div className=\"flex justify-center gap-4\">\r\n                <Button\r\n                  className=\"px-2\"\r\n                  onClick={() => {\r\n                    setShowVibratorSelection(true); // بخش انتخاب ویبراتور باز شه\r\n                    setShowVibratorModal(false); // مودال بسته شه\r\n                  }}\r\n                >\r\n                  بله\r\n                </Button>\r\n                <Button\r\n                  className=\"px-2\"\r\n                  variant=\"outline\"\r\n                  onClick={() => setShowVibratorModal(false)} // فقط مودال ببند\r\n                >\r\n                  خیر\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={() => setIsModalOpen(false)}\r\n        message={modalMessage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VibratorPage;\r\n"
        }
    ]
}