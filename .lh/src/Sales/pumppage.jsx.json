{
    "sourceFile": "src/Sales/pumppage.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1744122177238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744122542864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,64 +325,8 @@\n       setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n     }\r\n   };\r\n \r\n-  //   if (!token) {\r\n-  //     toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-  //     return;\r\n-  //   }\r\n-\r\n-  //   if (!orderId) {\r\n-  //     toast.error(\"❌ شماره سفارش معتبر نیست!\");\r\n-  //     return;\r\n-  //   }\r\n-\r\n-  //   // فیلتر کردن پمپ‌ها و زیرپمپ‌ها بر اساس ID به‌طوری‌که تکراری نباشند\r\n-  //   const uniquePumps = [\r\n-  //     ...new Map(pumps.map((p) => [p.id, p])).values(), // حذف پمپ‌های تکراری بر اساس id\r\n-  //   ];\r\n-  //   const uniqueSubPumps = [\r\n-  //     ...new Map(subPumps.map((sp) => [sp.id, sp])).values(), // حذف زیرپمپ‌های تکراری بر اساس id\r\n-  //   ];\r\n-\r\n-  //   const payload = [\r\n-  //     ...uniqueSubPumps.map((sp) => ({\r\n-  //       order: orderId,\r\n-  //       pump: sp.parentId,\r\n-  //       count: sp.count,\r\n-  //       sub_pump: sp.id,\r\n-  //     })),\r\n-  //     ...uniquePumps\r\n-  //       .filter((p) => !uniqueSubPumps.some((sp) => sp.parentId === p.id)) // پمپ‌هایی که زیرپمپ ندارند\r\n-  //       .map((p) => ({\r\n-  //         order: orderId,\r\n-  //         pump: p.id,\r\n-  //         count: p.count,\r\n-  //         sub_pump: null,\r\n-  //       })),\r\n-  //   ];\r\n-\r\n-  //   try {\r\n-  //     if (payload.length > 0) {\r\n-  //       await axios.post(\r\n-  //         \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n-  //         payload,\r\n-  //         {\r\n-  //           headers: {\r\n-  //             Authorization: `Bearer ${token}`,\r\n-  //             \"Content-Type\": \"application/json\",\r\n-  //           },\r\n-  //         }\r\n-  //       );\r\n-  //       toast.success(\"✅ سفارش با موفقیت ثبت شد!\");\r\n-  //     } else {\r\n-  //       toast.warn(\"⚠️ هیچ آیتمی برای ارسال وجود ندارد!\");\r\n-  //     }\r\n-  //   } catch (err) {\r\n-  //     toast.error(\"❌ خطا در افزودن پمپ به سفارش!\");\r\n-  //   }\r\n-  // };\r\n-\r\n   const handleRemovePump = (id, isSubPump = false) => {\r\n     if (isSubPump) {\r\n       setSelectedSubPumps((prev) => prev.filter((sp) => sp.id !== id));\r\n     } else {\r\n"
                },
                {
                    "date": 1744124987632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -433,9 +433,9 @@\n           {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n           {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n           {selectedPumps.map((pump) => (\r\n             <div\r\n-              key={pump.id}\r\n+              key={pump.pump.id}\r\n               className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n             >\r\n               <div className=\"flex flex-row items-center gap-4\">\r\n                 <span>\r\n"
                },
                {
                    "date": 1744124999043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -433,9 +433,9 @@\n           {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n           {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n           {selectedPumps.map((pump) => (\r\n             <div\r\n-              key={pump.pump.id}\r\n+              key={pump.id}\r\n               className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n             >\r\n               <div className=\"flex flex-row items-center gap-4\">\r\n                 <span>\r\n"
                },
                {
                    "date": 1744125361703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,509 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import axios from \"axios\";\r\n+import { toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import Button from \"../ui/Button\";\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import Modal from \"../pages/Modal\";\r\n+const PumpPage = () => {\r\n+  const [pumps, setPumps] = useState([]);\r\n+  const [subPumps, setSubPumps] = useState([]);\r\n+  const [selectedPumps, setSelectedPumps] = useState([]);\r\n+  const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n+  const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n+  const { orderId } = useParams();\r\n+  const [projectTitle, setProjectTitle] = useState(\"\");\r\n+  // const { orderId } = useParams(); //\r\n+  const navigate = useNavigate();\r\n+  const [quantity, setQuantity] = useState(1);\r\n+  const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n+  const [isModalOpen, setIsModalOpen] = useState(false);\r\n+  const [modalMessage, setModalMessage] = useState(\"\");\r\n+  useEffect(() => {\r\n+    console.log(\"🟢 orderId from useParams:\", orderId);\r\n+  }, [orderId]);\r\n+  const uniquePumps = [\r\n+    ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n+  ];\r\n+  const handleSubmitOrder = async (orderId) => {\r\n+    const token = localStorage.getItem(\"accessToken\");\r\n+    if (!token) {\r\n+      toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    if (!orderId || tempSelectedPumps.length === 0) {\r\n+      toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n+      return;\r\n+    }\r\n+\r\n+    const payload = [];\r\n+\r\n+    tempSelectedPumps.forEach((pump) => {\r\n+      // پیدا کردن زیرپمپ‌های مربوط به این پمپ\r\n+      const subPumpsForThisPump = tempSelectedSubPumps.filter(\r\n+        (subPump) => subPump.pumpId === pump.id\r\n+      );\r\n+\r\n+      if (subPumpsForThisPump.length > 0) {\r\n+        // اگر زیرپمپ دارد، ارسال پمپ و زیرپمپ‌ها با هم\r\n+        subPumpsForThisPump.forEach((subPump) => {\r\n+          payload.push({\r\n+            order: Number(orderId),\r\n+            pump: Number(pump.id),\r\n+            count: Number(pump.count),\r\n+            sub_pump: Number(subPump.id),\r\n+          });\r\n+        });\r\n+      } else {\r\n+        // اگر زیرپمپ ندارد، فقط پمپ را ارسال می‌کنیم\r\n+        payload.push({\r\n+          order: Number(orderId),\r\n+          pump: Number(pump.id),\r\n+          count: Number(pump.count),\r\n+          sub_pump: null, // بدون زیرپمپ\r\n+        });\r\n+      }\r\n+    });\r\n+\r\n+    console.log(\"📦 Payload:\", payload);\r\n+\r\n+    try {\r\n+      const response = await axios.post(\r\n+        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n+        payload,\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+            \"Content-Type\": \"application/json\",\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"✅ Server Response:\", response.data);\r\n+      toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n+    } catch (error) {\r\n+      console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n+      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddAndSubmit = async () => {\r\n+    console.log(\"🚀 handleAddAndSubmit اجرا شد!\");\r\n+\r\n+    if (tempSelectedPumps.length === 0 && tempSelectedSubPumps.length === 0) {\r\n+      setModalMessage(\"⚠️ پمپی انتخاب نکردید!\");\r\n+      setIsModalOpen(true); // باز کردن مودال خطا\r\n+      return;\r\n+    }\r\n+\r\n+    console.log(\"🔍 Selected SubPumps:\", tempSelectedSubPumps);\r\n+\r\n+    // چک کردن orderId قبل از ارسال\r\n+    if (!orderId) {\r\n+      setModalMessage(\"❌ شماره سفارش مشخص نشده است!\");\r\n+      setIsModalOpen(true); // باز کردن مودال خطا\r\n+      return;\r\n+    }\r\n+\r\n+    const newPumps = tempSelectedPumps.map((pump) => ({\r\n+      ...pump,\r\n+      count: quantity,\r\n+    }));\r\n+\r\n+    const newSubPumps = tempSelectedSubPumps.map((subPump) => ({\r\n+      ...subPump,\r\n+      count: quantity,\r\n+    }));\r\n+\r\n+    const payload = [];\r\n+\r\n+    newPumps.forEach((pump) => {\r\n+      const subPumpsForThisPump = newSubPumps.filter(\r\n+        (subPump) => subPump.pumpId === pump.id\r\n+      );\r\n+\r\n+      if (subPumpsForThisPump.length > 0) {\r\n+        subPumpsForThisPump.forEach((subPump) => {\r\n+          payload.push({\r\n+            order: Number(orderId),\r\n+            pump: Number(pump.id),\r\n+            count: Number(pump.count),\r\n+            sub_pump: Number(subPump.id),\r\n+          });\r\n+        });\r\n+      } else {\r\n+        payload.push({\r\n+          order: Number(orderId),\r\n+          pump: Number(pump.id),\r\n+          count: pump.countable ? Number(pump.count) : 1,\r\n+          sub_pump: null,\r\n+        });\r\n+      }\r\n+    });\r\n+\r\n+    // ارسال به سرور\r\n+    try {\r\n+      const response = await axios.post(\r\n+        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n+        payload,\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n+            \"Content-Type\": \"application/json\",\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      if (response.status === 200) {\r\n+        toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n+        // به‌روزرسانی داده‌های پمپ‌ها\r\n+        setSelectedPumps((prev) => [...prev, ...newPumps]);\r\n+        setSelectedSubPumps((prev) => [...prev, ...newSubPumps]);\r\n+        setTempSelectedPumps([]);\r\n+        setTempSelectedSubPumps([]);\r\n+        setSubPumps([]);\r\n+        setQuantity(1);\r\n+      } else {\r\n+        setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n+        setIsModalOpen(true);\r\n+      }\r\n+    } catch (error) {\r\n+      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    const fetchOrderData = async () => {\r\n+      setLoading(true);\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+        const orderRes = await axios.get(\r\n+          `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n+          {\r\n+            headers: { Authorization: `Bearer ${token}` },\r\n+          }\r\n+        );\r\n+\r\n+        const orderData = orderRes.data;\r\n+\r\n+        setProjectTitle(orderData.title || \"بدون عنوان\");\r\n+        setPumps(orderData.pumps || []); // ✅ پمپ‌ها از همون ریسپانس\r\n+        console.log(\"پمپ‌ها دریافت شده:\", orderData.pumps);\r\n+      } catch (err) {\r\n+        toast.error(\"❌ خطا در دریافت اطلاعات سفارش یا پمپ‌ها!\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchOrderData();\r\n+  }, [orderId]);\r\n+\r\n+  const fetchSubPumps = async (id) => {\r\n+    const token = localStorage.getItem(\"accessToken\");\r\n+    if (!token) {\r\n+      toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const { data } = await axios.get(\r\n+        `https://amin-beton-back.chbk.app/api/sales-pump/${id}/sub-pumps/`,\r\n+        { headers: { Authorization: `Bearer ${token}` } }\r\n+      );\r\n+\r\n+      // همیشه داده جدید جایگزین بشه\r\n+      setSubPumps(data || []);\r\n+    } catch (err) {\r\n+      toast.error(\"❌ خطا در دریافت زیرمجموعه‌های پمپ!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handlePumpSelection = (id) => {\r\n+    if (quantity < 1) {\r\n+      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    // پیدا کردن پمپ بر اساس id، توجه به اینکه داده‌ها در structure `pump.pump.id` هستند\r\n+    const pump = pumps.find((p) => p.pump.id === id);\r\n+    if (!pump) return;\r\n+\r\n+    const isSelected = tempSelectedPumps.some((p) => p.id === pump.pump.id);\r\n+\r\n+    // زیرپمپ‌ها و انتخاب‌های موقت رو پاک کن\r\n+    setTempSelectedSubPumps([]);\r\n+    setSubPumps([]);\r\n+\r\n+    if (isSelected) {\r\n+      // اگه دوباره کلیک شد، فقط زیرپمپ‌ها رو ری‌لود کن (انتخاب بمونه)\r\n+      fetchSubPumps(id);\r\n+    } else {\r\n+      // یه پمپ جدید انتخاب شده → انتخاب قبلی رو پاک و جدید بذار\r\n+      setTempSelectedPumps([\r\n+        {\r\n+          ...pump.pump, // حالا از pump.pump برای دسترسی به اطلاعات استفاده می‌کنیم\r\n+          count: quantity,\r\n+        },\r\n+      ]);\r\n+      fetchSubPumps(id);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubPumpSelection = (subPumpId) => {\r\n+    if (quantity < 1) {\r\n+      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    const subPump = subPumps.find((sp) => sp.id === subPumpId);\r\n+    if (!subPump) return;\r\n+\r\n+    const selectedPump = tempSelectedPumps[0]; // چون فقط یکی انتخاب می‌شه\r\n+    if (!selectedPump) {\r\n+      toast.warn(\"⚠️ لطفاً ابتدا یک پمپ انتخاب کنید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    const exists = tempSelectedSubPumps.some(\r\n+      (sp) => sp.id === subPumpId && sp.pumpId === selectedPump.id\r\n+    );\r\n+\r\n+    if (exists) {\r\n+      // اگه همون زیرپمپ دوباره کلیک بشه، پاکش کن\r\n+      setTempSelectedSubPumps([]);\r\n+    } else {\r\n+      // فقط همین یه زیرپمپ رو نگه دار\r\n+      setTempSelectedSubPumps([\r\n+        {\r\n+          ...subPump,\r\n+          count: quantity,\r\n+          pumpId: selectedPump.id,\r\n+        },\r\n+      ]);\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChangeForPump = (id, value) => {\r\n+    const numericValue = Number(value);\r\n+    if (isNaN(numericValue) || numericValue < 1) return;\r\n+\r\n+    // تغییر تعداد پمپ انتخاب شده\r\n+    setTempSelectedPumps((prev) =>\r\n+      prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n+    );\r\n+  };\r\n+\r\n+  const handleQuantityChangeForSubPump = (id, value) => {\r\n+    const numericValue = Number(value);\r\n+    if (isNaN(numericValue) || numericValue < 1) return;\r\n+\r\n+    // تغییر تعداد زیرپمپ انتخاب شده\r\n+    setTempSelectedSubPumps((prev) =>\r\n+      prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n+    );\r\n+  };\r\n+\r\n+  const handleTempQuantityChange = (id, value, isSubPump = false) => {\r\n+    const numericValue = Number(value);\r\n+    if (isNaN(numericValue) || numericValue < 1) return;\r\n+\r\n+    if (isSubPump) {\r\n+      setTempSelectedSubPumps((prev) =>\r\n+        prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n+      );\r\n+    } else {\r\n+      setTempSelectedPumps((prev) =>\r\n+        prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n+      );\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuantityChange = (e) => {\r\n+    const updatedCount = Number(e.target.value);\r\n+    if (!isNaN(updatedCount) && updatedCount >= 1) {\r\n+      setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n+    }\r\n+  };\r\n+\r\n+  const handleRemovePump = (id, isSubPump = false) => {\r\n+    if (isSubPump) {\r\n+      setSelectedSubPumps((prev) => prev.filter((sp) => sp.id !== id));\r\n+    } else {\r\n+      setSelectedPumps((prev) => prev.filter((p) => p.id !== id));\r\n+    }\r\n+\r\n+    deletePumpOrder(id);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n+      <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n+        <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n+          خرید برای <br /> {projectTitle}\r\n+        </h1>\r\n+\r\n+        <div className=\"mb-8\">\r\n+          <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n+          <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n+            {uniquePumps.map((pump) => {\r\n+              // بررسی عنوان پمپ\r\n+              const isSelected = tempSelectedPumps.some(\r\n+                (p) => p.id === pump.pump.id\r\n+              ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n+\r\n+              return (\r\n+                <div\r\n+                  key={pump.pump.id} // استفاده از pump.pump.id\r\n+                  className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n+                    isSelected ? \"border-School-Bus\" : \"border-white\"\r\n+                  } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n+                  onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n+                >\r\n+                  <div\r\n+                    className={`w-4 h-4 mb-2 rounded-full ${\r\n+                      isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n+                    }`}\r\n+                  ></div>\r\n+                  <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n+                  {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n+                </div>\r\n+              );\r\n+            })}\r\n+          </div>\r\n+\r\n+          {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n+            <div className=\"mb-8\">\r\n+              <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n+              <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+                {subPumps.map((subPump) => {\r\n+                  const isSelected = tempSelectedSubPumps.some(\r\n+                    (sp) => sp.id === subPump.id\r\n+                  );\r\n+\r\n+                  return (\r\n+                    <div\r\n+                      key={subPump.id}\r\n+                      className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n+                        isSelected ? \"border-School-Bus\" : \"border-white\"\r\n+                      } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n+                      onClick={() => handleSubPumpSelection(subPump.id)}\r\n+                    >\r\n+                      <div\r\n+                        className={`w-4 h-4 mb-2 rounded-full ${\r\n+                          isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n+                        }`}\r\n+                      ></div>\r\n+                      <div className=\"mb-2\">{subPump.title}</div>\r\n+                    </div>\r\n+                  );\r\n+                })}\r\n+              </div>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+\r\n+        {tempSelectedPumps.some((pump) => pump.countable) && (\r\n+          <div className=\"flex items-center gap-2 mt-4\">\r\n+            <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n+              تعداد پمپ\r\n+            </label>\r\n+            <input\r\n+              id=\"totalQty\"\r\n+              type=\"number\"\r\n+              min=\"1\"\r\n+              value={quantity}\r\n+              onChange={handleQuantityChange}\r\n+              className=\"w-24 p-2 text-black border rounded-md\"\r\n+            />\r\n+          </div>\r\n+        )}\r\n+\r\n+        {/* دکمه افزودن پمپ‌ها */}\r\n+        <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n+          <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n+            افزودن پمپ‌ها\r\n+          </Button>\r\n+        </div>\r\n+\r\n+        {/* نمایش انتخاب‌های پمپ‌ها */}\r\n+        <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n+          <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n+\r\n+          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n+          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n+          {selectedPumps.map((pump) => (\r\n+            <div\r\n+              key={pump.id}\r\n+              className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n+            >\r\n+              <div className=\"flex flex-row items-center gap-4\">\r\n+                <span>\r\n+                  پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n+                  {selectedSubPumps.filter(\r\n+                    (subPump) => subPump.pumpId === pump.id\r\n+                  ).length > 0\r\n+                    ? selectedSubPumps\r\n+                        .filter((subPump) => subPump.pumpId === pump.id)\r\n+                        .map((subPump) => subPump.title)\r\n+                        .join(\", \")\r\n+                    : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n+                  | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n+                  <button\r\n+                    onClick={() => handleRemovePump(pump.id)}\r\n+                    className=\"text-red hover:text-red-700\"\r\n+                  >\r\n+                    حذف\r\n+                  </button>\r\n+                </span>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+        <div className=\"mb-8\">\r\n+          <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n+          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+            {selectedPumps.map((pump) => {\r\n+              const subPumpsForThisPump = selectedSubPumps.filter(\r\n+                (subPump) => subPump.pumpId === pump.id\r\n+              );\r\n+              return (\r\n+                <div\r\n+                  key={pump.id}\r\n+                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n+                >\r\n+                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n+                  <div className=\"mb-2\">{pump.title}</div>\r\n+                  <div>\r\n+                    تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n+                    {subPumpsForThisPump.length}\r\n+                  </div>\r\n+                </div>\r\n+              );\r\n+            })}\r\n+          </div>\r\n+        </div>\r\n+\r\n+        <Button\r\n+          className=\"px-10\"\r\n+          onClick={() => {\r\n+            handleAddAndSubmit();\r\n+            navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n+          }}\r\n+        >\r\n+          ادامه\r\n+        </Button>\r\n+        <Modal\r\n+          isOpen={isModalOpen}\r\n+          onClose={() => setIsModalOpen(false)}\r\n+          message={modalMessage}\r\n+        />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default PumpPage;\r\n"
                },
                {
                    "date": 1744125397877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n   const [quantity, setQuantity] = useState(1);\r\n   const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n   const [isModalOpen, setIsModalOpen] = useState(false);\r\n   const [modalMessage, setModalMessage] = useState(\"\");\r\n+  const { orderId } = useParams();\r\n+\r\n   useEffect(() => {\r\n     console.log(\"🟢 orderId from useParams:\", orderId);\r\n   }, [orderId]);\r\n   const uniquePumps = [\r\n"
                },
                {
                    "date": 1744125408404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n   const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n-  const { orderId } = useParams();\r\n+\r\n   const [projectTitle, setProjectTitle] = useState(\"\");\r\n   // const { orderId } = useParams(); //\r\n   const navigate = useNavigate();\r\n   const [quantity, setQuantity] = useState(1);\r\n"
                },
                {
                    "date": 1744125502589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,21 +12,17 @@\n   const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n   const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n-\r\n+  const { orderId } = useParams();\r\n   const [projectTitle, setProjectTitle] = useState(\"\");\r\n   // const { orderId } = useParams(); //\r\n   const navigate = useNavigate();\r\n   const [quantity, setQuantity] = useState(1);\r\n   const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n   const [isModalOpen, setIsModalOpen] = useState(false);\r\n   const [modalMessage, setModalMessage] = useState(\"\");\r\n-  const { orderId } = useParams();\r\n \r\n-  useEffect(() => {\r\n-    console.log(\"🟢 orderId from useParams:\", orderId);\r\n-  }, [orderId]);\r\n   const uniquePumps = [\r\n     ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n   ];\r\n   const handleSubmitOrder = async (orderId) => {\r\n@@ -508,510 +504,4 @@\n   );\r\n };\r\n \r\n export default PumpPage;\r\n-import React, { useState, useEffect } from \"react\";\r\n-import axios from \"axios\";\r\n-import { toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import Button from \"../ui/Button\";\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import Modal from \"../pages/Modal\";\r\n-const PumpPage = () => {\r\n-  const [pumps, setPumps] = useState([]);\r\n-  const [subPumps, setSubPumps] = useState([]);\r\n-  const [selectedPumps, setSelectedPumps] = useState([]);\r\n-  const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n-  const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n-  const { orderId } = useParams();\r\n-  const [projectTitle, setProjectTitle] = useState(\"\");\r\n-  // const { orderId } = useParams(); //\r\n-  const navigate = useNavigate();\r\n-  const [quantity, setQuantity] = useState(1);\r\n-  const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n-  const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  const [modalMessage, setModalMessage] = useState(\"\");\r\n-  const uniquePumps = [\r\n-    ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n-  ];\r\n-  const handleSubmitOrder = async (orderId) => {\r\n-    const token = localStorage.getItem(\"accessToken\");\r\n-    if (!token) {\r\n-      toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    if (!orderId || tempSelectedPumps.length === 0) {\r\n-      toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n-      return;\r\n-    }\r\n-\r\n-    const payload = [];\r\n-\r\n-    tempSelectedPumps.forEach((pump) => {\r\n-      // پیدا کردن زیرپمپ‌های مربوط به این پمپ\r\n-      const subPumpsForThisPump = tempSelectedSubPumps.filter(\r\n-        (subPump) => subPump.pumpId === pump.id\r\n-      );\r\n-\r\n-      if (subPumpsForThisPump.length > 0) {\r\n-        // اگر زیرپمپ دارد، ارسال پمپ و زیرپمپ‌ها با هم\r\n-        subPumpsForThisPump.forEach((subPump) => {\r\n-          payload.push({\r\n-            order: Number(orderId),\r\n-            pump: Number(pump.id),\r\n-            count: Number(pump.count),\r\n-            sub_pump: Number(subPump.id),\r\n-          });\r\n-        });\r\n-      } else {\r\n-        // اگر زیرپمپ ندارد، فقط پمپ را ارسال می‌کنیم\r\n-        payload.push({\r\n-          order: Number(orderId),\r\n-          pump: Number(pump.id),\r\n-          count: Number(pump.count),\r\n-          sub_pump: null, // بدون زیرپمپ\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-    console.log(\"📦 Payload:\", payload);\r\n-\r\n-    try {\r\n-      const response = await axios.post(\r\n-        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n-        payload,\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-            \"Content-Type\": \"application/json\",\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"✅ Server Response:\", response.data);\r\n-      toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n-    } catch (error) {\r\n-      console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n-      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddAndSubmit = async () => {\r\n-    console.log(\"🚀 handleAddAndSubmit اجرا شد!\");\r\n-\r\n-    if (tempSelectedPumps.length === 0 && tempSelectedSubPumps.length === 0) {\r\n-      setModalMessage(\"⚠️ پمپی انتخاب نکردید!\");\r\n-      setIsModalOpen(true); // باز کردن مودال خطا\r\n-      return;\r\n-    }\r\n-\r\n-    console.log(\"🔍 Selected SubPumps:\", tempSelectedSubPumps);\r\n-\r\n-    // چک کردن orderId قبل از ارسال\r\n-    if (!orderId) {\r\n-      setModalMessage(\"❌ شماره سفارش مشخص نشده است!\");\r\n-      setIsModalOpen(true); // باز کردن مودال خطا\r\n-      return;\r\n-    }\r\n-\r\n-    const newPumps = tempSelectedPumps.map((pump) => ({\r\n-      ...pump,\r\n-      count: quantity,\r\n-    }));\r\n-\r\n-    const newSubPumps = tempSelectedSubPumps.map((subPump) => ({\r\n-      ...subPump,\r\n-      count: quantity,\r\n-    }));\r\n-\r\n-    const payload = [];\r\n-\r\n-    newPumps.forEach((pump) => {\r\n-      const subPumpsForThisPump = newSubPumps.filter(\r\n-        (subPump) => subPump.pumpId === pump.id\r\n-      );\r\n-\r\n-      if (subPumpsForThisPump.length > 0) {\r\n-        subPumpsForThisPump.forEach((subPump) => {\r\n-          payload.push({\r\n-            order: Number(orderId),\r\n-            pump: Number(pump.id),\r\n-            count: Number(pump.count),\r\n-            sub_pump: Number(subPump.id),\r\n-          });\r\n-        });\r\n-      } else {\r\n-        payload.push({\r\n-          order: Number(orderId),\r\n-          pump: Number(pump.id),\r\n-          count: pump.countable ? Number(pump.count) : 1,\r\n-          sub_pump: null,\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-    // ارسال به سرور\r\n-    try {\r\n-      const response = await axios.post(\r\n-        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n-        payload,\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n-            \"Content-Type\": \"application/json\",\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      if (response.status === 200) {\r\n-        toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n-        // به‌روزرسانی داده‌های پمپ‌ها\r\n-        setSelectedPumps((prev) => [...prev, ...newPumps]);\r\n-        setSelectedSubPumps((prev) => [...prev, ...newSubPumps]);\r\n-        setTempSelectedPumps([]);\r\n-        setTempSelectedSubPumps([]);\r\n-        setSubPumps([]);\r\n-        setQuantity(1);\r\n-      } else {\r\n-        setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-        setIsModalOpen(true);\r\n-      }\r\n-    } catch (error) {\r\n-      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    const fetchOrderData = async () => {\r\n-      setLoading(true);\r\n-      try {\r\n-        const token = localStorage.getItem(\"accessToken\");\r\n-\r\n-        const orderRes = await axios.get(\r\n-          `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n-          {\r\n-            headers: { Authorization: `Bearer ${token}` },\r\n-          }\r\n-        );\r\n-\r\n-        const orderData = orderRes.data;\r\n-\r\n-        setProjectTitle(orderData.title || \"بدون عنوان\");\r\n-        setPumps(orderData.pumps || []); // ✅ پمپ‌ها از همون ریسپانس\r\n-        console.log(\"پمپ‌ها دریافت شده:\", orderData.pumps);\r\n-      } catch (err) {\r\n-        toast.error(\"❌ خطا در دریافت اطلاعات سفارش یا پمپ‌ها!\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchOrderData();\r\n-  }, [orderId]);\r\n-\r\n-  const fetchSubPumps = async (id) => {\r\n-    const token = localStorage.getItem(\"accessToken\");\r\n-    if (!token) {\r\n-      toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const { data } = await axios.get(\r\n-        `https://amin-beton-back.chbk.app/api/sales-pump/${id}/sub-pumps/`,\r\n-        { headers: { Authorization: `Bearer ${token}` } }\r\n-      );\r\n-\r\n-      // همیشه داده جدید جایگزین بشه\r\n-      setSubPumps(data || []);\r\n-    } catch (err) {\r\n-      toast.error(\"❌ خطا در دریافت زیرمجموعه‌های پمپ!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handlePumpSelection = (id) => {\r\n-    if (quantity < 1) {\r\n-      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    // پیدا کردن پمپ بر اساس id، توجه به اینکه داده‌ها در structure `pump.pump.id` هستند\r\n-    const pump = pumps.find((p) => p.pump.id === id);\r\n-    if (!pump) return;\r\n-\r\n-    const isSelected = tempSelectedPumps.some((p) => p.id === pump.pump.id);\r\n-\r\n-    // زیرپمپ‌ها و انتخاب‌های موقت رو پاک کن\r\n-    setTempSelectedSubPumps([]);\r\n-    setSubPumps([]);\r\n-\r\n-    if (isSelected) {\r\n-      // اگه دوباره کلیک شد، فقط زیرپمپ‌ها رو ری‌لود کن (انتخاب بمونه)\r\n-      fetchSubPumps(id);\r\n-    } else {\r\n-      // یه پمپ جدید انتخاب شده → انتخاب قبلی رو پاک و جدید بذار\r\n-      setTempSelectedPumps([\r\n-        {\r\n-          ...pump.pump, // حالا از pump.pump برای دسترسی به اطلاعات استفاده می‌کنیم\r\n-          count: quantity,\r\n-        },\r\n-      ]);\r\n-      fetchSubPumps(id);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubPumpSelection = (subPumpId) => {\r\n-    if (quantity < 1) {\r\n-      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    const subPump = subPumps.find((sp) => sp.id === subPumpId);\r\n-    if (!subPump) return;\r\n-\r\n-    const selectedPump = tempSelectedPumps[0]; // چون فقط یکی انتخاب می‌شه\r\n-    if (!selectedPump) {\r\n-      toast.warn(\"⚠️ لطفاً ابتدا یک پمپ انتخاب کنید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    const exists = tempSelectedSubPumps.some(\r\n-      (sp) => sp.id === subPumpId && sp.pumpId === selectedPump.id\r\n-    );\r\n-\r\n-    if (exists) {\r\n-      // اگه همون زیرپمپ دوباره کلیک بشه، پاکش کن\r\n-      setTempSelectedSubPumps([]);\r\n-    } else {\r\n-      // فقط همین یه زیرپمپ رو نگه دار\r\n-      setTempSelectedSubPumps([\r\n-        {\r\n-          ...subPump,\r\n-          count: quantity,\r\n-          pumpId: selectedPump.id,\r\n-        },\r\n-      ]);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChangeForPump = (id, value) => {\r\n-    const numericValue = Number(value);\r\n-    if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-    // تغییر تعداد پمپ انتخاب شده\r\n-    setTempSelectedPumps((prev) =>\r\n-      prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n-    );\r\n-  };\r\n-\r\n-  const handleQuantityChangeForSubPump = (id, value) => {\r\n-    const numericValue = Number(value);\r\n-    if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-    // تغییر تعداد زیرپمپ انتخاب شده\r\n-    setTempSelectedSubPumps((prev) =>\r\n-      prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n-    );\r\n-  };\r\n-\r\n-  const handleTempQuantityChange = (id, value, isSubPump = false) => {\r\n-    const numericValue = Number(value);\r\n-    if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-    if (isSubPump) {\r\n-      setTempSelectedSubPumps((prev) =>\r\n-        prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n-      );\r\n-    } else {\r\n-      setTempSelectedPumps((prev) =>\r\n-        prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (e) => {\r\n-    const updatedCount = Number(e.target.value);\r\n-    if (!isNaN(updatedCount) && updatedCount >= 1) {\r\n-      setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n-    }\r\n-  };\r\n-\r\n-  const handleRemovePump = (id, isSubPump = false) => {\r\n-    if (isSubPump) {\r\n-      setSelectedSubPumps((prev) => prev.filter((sp) => sp.id !== id));\r\n-    } else {\r\n-      setSelectedPumps((prev) => prev.filter((p) => p.id !== id));\r\n-    }\r\n-\r\n-    deletePumpOrder(id);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n-      <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n-        <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n-          خرید برای <br /> {projectTitle}\r\n-        </h1>\r\n-\r\n-        <div className=\"mb-8\">\r\n-          <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n-          <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n-            {uniquePumps.map((pump) => {\r\n-              // بررسی عنوان پمپ\r\n-              const isSelected = tempSelectedPumps.some(\r\n-                (p) => p.id === pump.pump.id\r\n-              ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n-\r\n-              return (\r\n-                <div\r\n-                  key={pump.pump.id} // استفاده از pump.pump.id\r\n-                  className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n-                    isSelected ? \"border-School-Bus\" : \"border-white\"\r\n-                  } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n-                  onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n-                >\r\n-                  <div\r\n-                    className={`w-4 h-4 mb-2 rounded-full ${\r\n-                      isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n-                    }`}\r\n-                  ></div>\r\n-                  <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n-                  {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n-                </div>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-\r\n-          {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n-            <div className=\"mb-8\">\r\n-              <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n-              <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-                {subPumps.map((subPump) => {\r\n-                  const isSelected = tempSelectedSubPumps.some(\r\n-                    (sp) => sp.id === subPump.id\r\n-                  );\r\n-\r\n-                  return (\r\n-                    <div\r\n-                      key={subPump.id}\r\n-                      className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n-                        isSelected ? \"border-School-Bus\" : \"border-white\"\r\n-                      } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n-                      onClick={() => handleSubPumpSelection(subPump.id)}\r\n-                    >\r\n-                      <div\r\n-                        className={`w-4 h-4 mb-2 rounded-full ${\r\n-                          isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n-                        }`}\r\n-                      ></div>\r\n-                      <div className=\"mb-2\">{subPump.title}</div>\r\n-                    </div>\r\n-                  );\r\n-                })}\r\n-              </div>\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n-\r\n-        {tempSelectedPumps.some((pump) => pump.countable) && (\r\n-          <div className=\"flex items-center gap-2 mt-4\">\r\n-            <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n-              تعداد پمپ\r\n-            </label>\r\n-            <input\r\n-              id=\"totalQty\"\r\n-              type=\"number\"\r\n-              min=\"1\"\r\n-              value={quantity}\r\n-              onChange={handleQuantityChange}\r\n-              className=\"w-24 p-2 text-black border rounded-md\"\r\n-            />\r\n-          </div>\r\n-        )}\r\n-\r\n-        {/* دکمه افزودن پمپ‌ها */}\r\n-        <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n-          <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n-            افزودن پمپ‌ها\r\n-          </Button>\r\n-        </div>\r\n-\r\n-        {/* نمایش انتخاب‌های پمپ‌ها */}\r\n-        <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n-          <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n-\r\n-          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n-          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n-          {selectedPumps.map((pump) => (\r\n-            <div\r\n-              key={pump.id}\r\n-              className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n-            >\r\n-              <div className=\"flex flex-row items-center gap-4\">\r\n-                <span>\r\n-                  پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n-                  {selectedSubPumps.filter(\r\n-                    (subPump) => subPump.pumpId === pump.id\r\n-                  ).length > 0\r\n-                    ? selectedSubPumps\r\n-                        .filter((subPump) => subPump.pumpId === pump.id)\r\n-                        .map((subPump) => subPump.title)\r\n-                        .join(\", \")\r\n-                    : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n-                  | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n-                  <button\r\n-                    onClick={() => handleRemovePump(pump.id)}\r\n-                    className=\"text-red hover:text-red-700\"\r\n-                  >\r\n-                    حذف\r\n-                  </button>\r\n-                </span>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-        <div className=\"mb-8\">\r\n-          <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n-          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-            {selectedPumps.map((pump) => {\r\n-              const subPumpsForThisPump = selectedSubPumps.filter(\r\n-                (subPump) => subPump.pumpId === pump.id\r\n-              );\r\n-              return (\r\n-                <div\r\n-                  key={pump.id}\r\n-                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n-                >\r\n-                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n-                  <div className=\"mb-2\">{pump.title}</div>\r\n-                  <div>\r\n-                    تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n-                    {subPumpsForThisPump.length}\r\n-                  </div>\r\n-                </div>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <Button\r\n-          className=\"px-10\"\r\n-          onClick={() => {\r\n-            handleAddAndSubmit();\r\n-            navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n-          }}\r\n-        >\r\n-          ادامه\r\n-        </Button>\r\n-        <Modal\r\n-          isOpen={isModalOpen}\r\n-          onClose={() => setIsModalOpen(false)}\r\n-          message={modalMessage}\r\n-        />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default PumpPage;\r\n"
                },
                {
                    "date": 1744126702927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,507 +0,0 @@\n-import React, { useState, useEffect } from \"react\";\r\n-import axios from \"axios\";\r\n-import { toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import Button from \"../ui/Button\";\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import Modal from \"../pages/Modal\";\r\n-const PumpPage = () => {\r\n-  const [pumps, setPumps] = useState([]);\r\n-  const [subPumps, setSubPumps] = useState([]);\r\n-  const [selectedPumps, setSelectedPumps] = useState([]);\r\n-  const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n-  const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n-  const { orderId } = useParams();\r\n-  const [projectTitle, setProjectTitle] = useState(\"\");\r\n-  // const { orderId } = useParams(); //\r\n-  const navigate = useNavigate();\r\n-  const [quantity, setQuantity] = useState(1);\r\n-  const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n-  const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  const [modalMessage, setModalMessage] = useState(\"\");\r\n-\r\n-  const uniquePumps = [\r\n-    ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n-  ];\r\n-  const handleSubmitOrder = async (orderId) => {\r\n-    const token = localStorage.getItem(\"accessToken\");\r\n-    if (!token) {\r\n-      toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    if (!orderId || tempSelectedPumps.length === 0) {\r\n-      toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n-      return;\r\n-    }\r\n-\r\n-    const payload = [];\r\n-\r\n-    tempSelectedPumps.forEach((pump) => {\r\n-      // پیدا کردن زیرپمپ‌های مربوط به این پمپ\r\n-      const subPumpsForThisPump = tempSelectedSubPumps.filter(\r\n-        (subPump) => subPump.pumpId === pump.id\r\n-      );\r\n-\r\n-      if (subPumpsForThisPump.length > 0) {\r\n-        // اگر زیرپمپ دارد، ارسال پمپ و زیرپمپ‌ها با هم\r\n-        subPumpsForThisPump.forEach((subPump) => {\r\n-          payload.push({\r\n-            order: Number(orderId),\r\n-            pump: Number(pump.id),\r\n-            count: Number(pump.count),\r\n-            sub_pump: Number(subPump.id),\r\n-          });\r\n-        });\r\n-      } else {\r\n-        // اگر زیرپمپ ندارد، فقط پمپ را ارسال می‌کنیم\r\n-        payload.push({\r\n-          order: Number(orderId),\r\n-          pump: Number(pump.id),\r\n-          count: Number(pump.count),\r\n-          sub_pump: null, // بدون زیرپمپ\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-    console.log(\"📦 Payload:\", payload);\r\n-\r\n-    try {\r\n-      const response = await axios.post(\r\n-        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n-        payload,\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-            \"Content-Type\": \"application/json\",\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"✅ Server Response:\", response.data);\r\n-      toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n-    } catch (error) {\r\n-      console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n-      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddAndSubmit = async () => {\r\n-    console.log(\"🚀 handleAddAndSubmit اجرا شد!\");\r\n-\r\n-    if (tempSelectedPumps.length === 0 && tempSelectedSubPumps.length === 0) {\r\n-      setModalMessage(\"⚠️ پمپی انتخاب نکردید!\");\r\n-      setIsModalOpen(true); // باز کردن مودال خطا\r\n-      return;\r\n-    }\r\n-\r\n-    console.log(\"🔍 Selected SubPumps:\", tempSelectedSubPumps);\r\n-\r\n-    // چک کردن orderId قبل از ارسال\r\n-    if (!orderId) {\r\n-      setModalMessage(\"❌ شماره سفارش مشخص نشده است!\");\r\n-      setIsModalOpen(true); // باز کردن مودال خطا\r\n-      return;\r\n-    }\r\n-\r\n-    const newPumps = tempSelectedPumps.map((pump) => ({\r\n-      ...pump,\r\n-      count: quantity,\r\n-    }));\r\n-\r\n-    const newSubPumps = tempSelectedSubPumps.map((subPump) => ({\r\n-      ...subPump,\r\n-      count: quantity,\r\n-    }));\r\n-\r\n-    const payload = [];\r\n-\r\n-    newPumps.forEach((pump) => {\r\n-      const subPumpsForThisPump = newSubPumps.filter(\r\n-        (subPump) => subPump.pumpId === pump.id\r\n-      );\r\n-\r\n-      if (subPumpsForThisPump.length > 0) {\r\n-        subPumpsForThisPump.forEach((subPump) => {\r\n-          payload.push({\r\n-            order: Number(orderId),\r\n-            pump: Number(pump.id),\r\n-            count: Number(pump.count),\r\n-            sub_pump: Number(subPump.id),\r\n-          });\r\n-        });\r\n-      } else {\r\n-        payload.push({\r\n-          order: Number(orderId),\r\n-          pump: Number(pump.id),\r\n-          count: pump.countable ? Number(pump.count) : 1,\r\n-          sub_pump: null,\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-    // ارسال به سرور\r\n-    try {\r\n-      const response = await axios.post(\r\n-        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n-        payload,\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n-            \"Content-Type\": \"application/json\",\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      if (response.status === 200) {\r\n-        toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n-        // به‌روزرسانی داده‌های پمپ‌ها\r\n-        setSelectedPumps((prev) => [...prev, ...newPumps]);\r\n-        setSelectedSubPumps((prev) => [...prev, ...newSubPumps]);\r\n-        setTempSelectedPumps([]);\r\n-        setTempSelectedSubPumps([]);\r\n-        setSubPumps([]);\r\n-        setQuantity(1);\r\n-      } else {\r\n-        setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-        setIsModalOpen(true);\r\n-      }\r\n-    } catch (error) {\r\n-      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    const fetchOrderData = async () => {\r\n-      setLoading(true);\r\n-      try {\r\n-        const token = localStorage.getItem(\"accessToken\");\r\n-\r\n-        const orderRes = await axios.get(\r\n-          `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n-          {\r\n-            headers: { Authorization: `Bearer ${token}` },\r\n-          }\r\n-        );\r\n-\r\n-        const orderData = orderRes.data;\r\n-\r\n-        setProjectTitle(orderData.title || \"بدون عنوان\");\r\n-        setPumps(orderData.pumps || []); // ✅ پمپ‌ها از همون ریسپانس\r\n-        console.log(\"پمپ‌ها دریافت شده:\", orderData.pumps);\r\n-      } catch (err) {\r\n-        toast.error(\"❌ خطا در دریافت اطلاعات سفارش یا پمپ‌ها!\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchOrderData();\r\n-  }, [orderId]);\r\n-\r\n-  const fetchSubPumps = async (id) => {\r\n-    const token = localStorage.getItem(\"accessToken\");\r\n-    if (!token) {\r\n-      toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const { data } = await axios.get(\r\n-        `https://amin-beton-back.chbk.app/api/sales-pump/${id}/sub-pumps/`,\r\n-        { headers: { Authorization: `Bearer ${token}` } }\r\n-      );\r\n-\r\n-      // همیشه داده جدید جایگزین بشه\r\n-      setSubPumps(data || []);\r\n-    } catch (err) {\r\n-      toast.error(\"❌ خطا در دریافت زیرمجموعه‌های پمپ!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handlePumpSelection = (id) => {\r\n-    if (quantity < 1) {\r\n-      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    // پیدا کردن پمپ بر اساس id، توجه به اینکه داده‌ها در structure `pump.pump.id` هستند\r\n-    const pump = pumps.find((p) => p.pump.id === id);\r\n-    if (!pump) return;\r\n-\r\n-    const isSelected = tempSelectedPumps.some((p) => p.id === pump.pump.id);\r\n-\r\n-    // زیرپمپ‌ها و انتخاب‌های موقت رو پاک کن\r\n-    setTempSelectedSubPumps([]);\r\n-    setSubPumps([]);\r\n-\r\n-    if (isSelected) {\r\n-      // اگه دوباره کلیک شد، فقط زیرپمپ‌ها رو ری‌لود کن (انتخاب بمونه)\r\n-      fetchSubPumps(id);\r\n-    } else {\r\n-      // یه پمپ جدید انتخاب شده → انتخاب قبلی رو پاک و جدید بذار\r\n-      setTempSelectedPumps([\r\n-        {\r\n-          ...pump.pump, // حالا از pump.pump برای دسترسی به اطلاعات استفاده می‌کنیم\r\n-          count: quantity,\r\n-        },\r\n-      ]);\r\n-      fetchSubPumps(id);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubPumpSelection = (subPumpId) => {\r\n-    if (quantity < 1) {\r\n-      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    const subPump = subPumps.find((sp) => sp.id === subPumpId);\r\n-    if (!subPump) return;\r\n-\r\n-    const selectedPump = tempSelectedPumps[0]; // چون فقط یکی انتخاب می‌شه\r\n-    if (!selectedPump) {\r\n-      toast.warn(\"⚠️ لطفاً ابتدا یک پمپ انتخاب کنید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    const exists = tempSelectedSubPumps.some(\r\n-      (sp) => sp.id === subPumpId && sp.pumpId === selectedPump.id\r\n-    );\r\n-\r\n-    if (exists) {\r\n-      // اگه همون زیرپمپ دوباره کلیک بشه، پاکش کن\r\n-      setTempSelectedSubPumps([]);\r\n-    } else {\r\n-      // فقط همین یه زیرپمپ رو نگه دار\r\n-      setTempSelectedSubPumps([\r\n-        {\r\n-          ...subPump,\r\n-          count: quantity,\r\n-          pumpId: selectedPump.id,\r\n-        },\r\n-      ]);\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChangeForPump = (id, value) => {\r\n-    const numericValue = Number(value);\r\n-    if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-    // تغییر تعداد پمپ انتخاب شده\r\n-    setTempSelectedPumps((prev) =>\r\n-      prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n-    );\r\n-  };\r\n-\r\n-  const handleQuantityChangeForSubPump = (id, value) => {\r\n-    const numericValue = Number(value);\r\n-    if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-    // تغییر تعداد زیرپمپ انتخاب شده\r\n-    setTempSelectedSubPumps((prev) =>\r\n-      prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n-    );\r\n-  };\r\n-\r\n-  const handleTempQuantityChange = (id, value, isSubPump = false) => {\r\n-    const numericValue = Number(value);\r\n-    if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-    if (isSubPump) {\r\n-      setTempSelectedSubPumps((prev) =>\r\n-        prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n-      );\r\n-    } else {\r\n-      setTempSelectedPumps((prev) =>\r\n-        prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuantityChange = (e) => {\r\n-    const updatedCount = Number(e.target.value);\r\n-    if (!isNaN(updatedCount) && updatedCount >= 1) {\r\n-      setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n-    }\r\n-  };\r\n-\r\n-  const handleRemovePump = (id, isSubPump = false) => {\r\n-    if (isSubPump) {\r\n-      setSelectedSubPumps((prev) => prev.filter((sp) => sp.id !== id));\r\n-    } else {\r\n-      setSelectedPumps((prev) => prev.filter((p) => p.id !== id));\r\n-    }\r\n-\r\n-    deletePumpOrder(id);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n-      <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n-        <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n-          خرید برای <br /> {projectTitle}\r\n-        </h1>\r\n-\r\n-        <div className=\"mb-8\">\r\n-          <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n-          <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n-            {uniquePumps.map((pump) => {\r\n-              // بررسی عنوان پمپ\r\n-              const isSelected = tempSelectedPumps.some(\r\n-                (p) => p.id === pump.pump.id\r\n-              ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n-\r\n-              return (\r\n-                <div\r\n-                  key={pump.pump.id} // استفاده از pump.pump.id\r\n-                  className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n-                    isSelected ? \"border-School-Bus\" : \"border-white\"\r\n-                  } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n-                  onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n-                >\r\n-                  <div\r\n-                    className={`w-4 h-4 mb-2 rounded-full ${\r\n-                      isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n-                    }`}\r\n-                  ></div>\r\n-                  <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n-                  {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n-                </div>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-\r\n-          {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n-            <div className=\"mb-8\">\r\n-              <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n-              <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-                {subPumps.map((subPump) => {\r\n-                  const isSelected = tempSelectedSubPumps.some(\r\n-                    (sp) => sp.id === subPump.id\r\n-                  );\r\n-\r\n-                  return (\r\n-                    <div\r\n-                      key={subPump.id}\r\n-                      className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n-                        isSelected ? \"border-School-Bus\" : \"border-white\"\r\n-                      } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n-                      onClick={() => handleSubPumpSelection(subPump.id)}\r\n-                    >\r\n-                      <div\r\n-                        className={`w-4 h-4 mb-2 rounded-full ${\r\n-                          isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n-                        }`}\r\n-                      ></div>\r\n-                      <div className=\"mb-2\">{subPump.title}</div>\r\n-                    </div>\r\n-                  );\r\n-                })}\r\n-              </div>\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n-\r\n-        {tempSelectedPumps.some((pump) => pump.countable) && (\r\n-          <div className=\"flex items-center gap-2 mt-4\">\r\n-            <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n-              تعداد پمپ\r\n-            </label>\r\n-            <input\r\n-              id=\"totalQty\"\r\n-              type=\"number\"\r\n-              min=\"1\"\r\n-              value={quantity}\r\n-              onChange={handleQuantityChange}\r\n-              className=\"w-24 p-2 text-black border rounded-md\"\r\n-            />\r\n-          </div>\r\n-        )}\r\n-\r\n-        {/* دکمه افزودن پمپ‌ها */}\r\n-        <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n-          <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n-            افزودن پمپ‌ها\r\n-          </Button>\r\n-        </div>\r\n-\r\n-        {/* نمایش انتخاب‌های پمپ‌ها */}\r\n-        <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n-          <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n-\r\n-          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n-          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n-          {selectedPumps.map((pump) => (\r\n-            <div\r\n-              key={pump.id}\r\n-              className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n-            >\r\n-              <div className=\"flex flex-row items-center gap-4\">\r\n-                <span>\r\n-                  پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n-                  {selectedSubPumps.filter(\r\n-                    (subPump) => subPump.pumpId === pump.id\r\n-                  ).length > 0\r\n-                    ? selectedSubPumps\r\n-                        .filter((subPump) => subPump.pumpId === pump.id)\r\n-                        .map((subPump) => subPump.title)\r\n-                        .join(\", \")\r\n-                    : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n-                  | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n-                  <button\r\n-                    onClick={() => handleRemovePump(pump.id)}\r\n-                    className=\"text-red hover:text-red-700\"\r\n-                  >\r\n-                    حذف\r\n-                  </button>\r\n-                </span>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-        <div className=\"mb-8\">\r\n-          <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n-          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-            {selectedPumps.map((pump) => {\r\n-              const subPumpsForThisPump = selectedSubPumps.filter(\r\n-                (subPump) => subPump.pumpId === pump.id\r\n-              );\r\n-              return (\r\n-                <div\r\n-                  key={pump.id}\r\n-                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n-                >\r\n-                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n-                  <div className=\"mb-2\">{pump.title}</div>\r\n-                  <div>\r\n-                    تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n-                    {subPumpsForThisPump.length}\r\n-                  </div>\r\n-                </div>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <Button\r\n-          className=\"px-10\"\r\n-          onClick={() => {\r\n-            handleAddAndSubmit();\r\n-            navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n-          }}\r\n-        >\r\n-          ادامه\r\n-        </Button>\r\n-        <Modal\r\n-          isOpen={isModalOpen}\r\n-          onClose={() => setIsModalOpen(false)}\r\n-          message={modalMessage}\r\n-        />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default PumpPage;\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744126742502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,7 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import axios from \"axios\";\r\n+import { toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import Button from \"../ui/Button\";\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import Modal from \"../pages/Modal\";\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744126808328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,4 +4,173 @@\n import \"react-toastify/dist/ReactToastify.css\";\r\n import Button from \"../ui/Button\";\r\n import { useParams, useNavigate } from \"react-router-dom\";\r\n import Modal from \"../pages/Modal\";\r\n+\r\n+return (\r\n+  <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n+    <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n+      <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n+        خرید برای <br /> {projectTitle}\r\n+      </h1>\r\n+\r\n+      <div className=\"mb-8\">\r\n+        <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n+        <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n+          {uniquePumps.map((pump) => {\r\n+            // بررسی عنوان پمپ\r\n+            const isSelected = tempSelectedPumps.some(\r\n+              (p) => p.id === pump.pump.id\r\n+            ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n+\r\n+            return (\r\n+              <div\r\n+                key={pump.pump.id} // استفاده از pump.pump.id\r\n+                className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n+                  isSelected ? \"border-School-Bus\" : \"border-white\"\r\n+                } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n+                onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n+              >\r\n+                <div\r\n+                  className={`w-4 h-4 mb-2 rounded-full ${\r\n+                    isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n+                  }`}\r\n+                ></div>\r\n+                <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n+                {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n+              </div>\r\n+            );\r\n+          })}\r\n+        </div>\r\n+\r\n+        {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n+          <div className=\"mb-8\">\r\n+            <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n+            <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+              {subPumps.map((subPump) => {\r\n+                const isSelected = tempSelectedSubPumps.some(\r\n+                  (sp) => sp.id === subPump.id\r\n+                );\r\n+\r\n+                return (\r\n+                  <div\r\n+                    key={subPump.id}\r\n+                    className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n+                      isSelected ? \"border-School-Bus\" : \"border-white\"\r\n+                    } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n+                    onClick={() => handleSubPumpSelection(subPump.id)}\r\n+                  >\r\n+                    <div\r\n+                      className={`w-4 h-4 mb-2 rounded-full ${\r\n+                        isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n+                      }`}\r\n+                    ></div>\r\n+                    <div className=\"mb-2\">{subPump.title}</div>\r\n+                  </div>\r\n+                );\r\n+              })}\r\n+            </div>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+\r\n+      {tempSelectedPumps.some((pump) => pump.countable) && (\r\n+        <div className=\"flex items-center gap-2 mt-4\">\r\n+          <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n+            تعداد پمپ\r\n+          </label>\r\n+          <input\r\n+            id=\"totalQty\"\r\n+            type=\"number\"\r\n+            min=\"1\"\r\n+            value={quantity}\r\n+            onChange={handleQuantityChange}\r\n+            className=\"w-24 p-2 text-black border rounded-md\"\r\n+          />\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* دکمه افزودن پمپ‌ها */}\r\n+      <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n+        <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n+          افزودن پمپ‌ها\r\n+        </Button>\r\n+      </div>\r\n+\r\n+      {/* نمایش انتخاب‌های پمپ‌ها */}\r\n+      <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n+        <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n+\r\n+        {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n+        {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n+        {selectedPumps.map((pump) => (\r\n+          <div\r\n+            key={pump.id}\r\n+            className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n+          >\r\n+            <div className=\"flex flex-row items-center gap-4\">\r\n+              <span>\r\n+                پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n+                {selectedSubPumps.filter(\r\n+                  (subPump) => subPump.pumpId === pump.id\r\n+                ).length > 0\r\n+                  ? selectedSubPumps\r\n+                      .filter((subPump) => subPump.pumpId === pump.id)\r\n+                      .map((subPump) => subPump.title)\r\n+                      .join(\", \")\r\n+                  : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n+                | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n+                <button\r\n+                  onClick={() => handleRemovePump(pump.id)}\r\n+                  className=\"text-red hover:text-red-700\"\r\n+                >\r\n+                  حذف\r\n+                </button>\r\n+              </span>\r\n+            </div>\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+      <div className=\"mb-8\">\r\n+        <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n+        <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+          {selectedPumps.map((pump) => {\r\n+            const subPumpsForThisPump = selectedSubPumps.filter(\r\n+              (subPump) => subPump.pumpId === pump.id\r\n+            );\r\n+            return (\r\n+              <div\r\n+                key={pump.id}\r\n+                className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n+              >\r\n+                <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n+                <div className=\"mb-2\">{pump.title}</div>\r\n+                <div>\r\n+                  تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n+                  {subPumpsForThisPump.length}\r\n+                </div>\r\n+              </div>\r\n+            );\r\n+          })}\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <Button\r\n+        className=\"px-10\"\r\n+        onClick={() => {\r\n+          handleAddAndSubmit();\r\n+          navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n+        }}\r\n+      >\r\n+        ادامه\r\n+      </Button>\r\n+      <Modal\r\n+        isOpen={isModalOpen}\r\n+        onClose={() => setIsModalOpen(false)}\r\n+        message={modalMessage}\r\n+      />\r\n+    </div>\r\n+  </div>\r\n+);\r\n+};\r\n+\r\n+export default PumpPage;\r\n"
                },
                {
                    "date": 1744126818775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,394 @@\n import \"react-toastify/dist/ReactToastify.css\";\r\n import Button from \"../ui/Button\";\r\n import { useParams, useNavigate } from \"react-router-dom\";\r\n import Modal from \"../pages/Modal\";\r\n+const PumpPage = () => {\r\n+  // const [pumps, setPumps] = useState([]);\r\n+  // const [subPumps, setSubPumps] = useState([]);\r\n+  // const [selectedPumps, setSelectedPumps] = useState([]);\r\n+  // const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n+  // const [loading, setLoading] = useState(true);\r\n+  // const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n+  // const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n+  // const { orderId } = useParams();\r\n+  // const [projectTitle, setProjectTitle] = useState(\"\");\r\n+  // // const { orderId } = useParams(); //\r\n+  // const navigate = useNavigate();\r\n+  // const [quantity, setQuantity] = useState(1);\r\n+  // const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n+  // const [isModalOpen, setIsModalOpen] = useState(false);\r\n+  // const [modalMessage, setModalMessage] = useState(\"\");\r\n+  // const uniquePumps = [\r\n+  //   ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n+  // ];\r\n+  // const handleSubmitOrder = async (orderId) => {\r\n+  //   const token = localStorage.getItem(\"accessToken\");\r\n+  //   if (!token) {\r\n+  //     toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n+  //     return;\r\n+  //   }\r\n \r\n+  //   if (!orderId || tempSelectedPumps.length === 0) {\r\n+  //     toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   const payload = [];\r\n+\r\n+  //   tempSelectedPumps.forEach((pump) => {\r\n+  //     // پیدا کردن زیرپمپ‌های مربوط به این پمپ\r\n+  //     const subPumpsForThisPump = tempSelectedSubPumps.filter(\r\n+  //       (subPump) => subPump.pumpId === pump.id\r\n+  //     );\r\n+\r\n+  //     if (subPumpsForThisPump.length > 0) {\r\n+  //       // اگر زیرپمپ دارد، ارسال پمپ و زیرپمپ‌ها با هم\r\n+  //       subPumpsForThisPump.forEach((subPump) => {\r\n+  //         payload.push({\r\n+  //           order: Number(orderId),\r\n+  //           pump: Number(pump.id),\r\n+  //           count: Number(pump.count),\r\n+  //           sub_pump: Number(subPump.id),\r\n+  //         });\r\n+  //       });\r\n+  //     } else {\r\n+  //       // اگر زیرپمپ ندارد، فقط پمپ را ارسال می‌کنیم\r\n+  //       payload.push({\r\n+  //         order: Number(orderId),\r\n+  //         pump: Number(pump.id),\r\n+  //         count: Number(pump.count),\r\n+  //         sub_pump: null, // بدون زیرپمپ\r\n+  //       });\r\n+  //     }\r\n+  //   });\r\n+\r\n+  //   console.log(\"📦 Payload:\", payload);\r\n+\r\n+  //   try {\r\n+  //     const response = await axios.post(\r\n+  //       \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n+  //       payload,\r\n+  //       {\r\n+  //         headers: {\r\n+  //           Authorization: `Bearer ${token}`,\r\n+  //           \"Content-Type\": \"application/json\",\r\n+  //         },\r\n+  //       }\r\n+  //     );\r\n+\r\n+  //     console.log(\"✅ Server Response:\", response.data);\r\n+  //     toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n+  //   } catch (error) {\r\n+  //     console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n+  //     toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n+  //   }\r\n+  // };\r\n+\r\n+  // const handleAddAndSubmit = async () => {\r\n+  //   console.log(\"🚀 handleAddAndSubmit اجرا شد!\");\r\n+\r\n+  //   if (tempSelectedPumps.length === 0 && tempSelectedSubPumps.length === 0) {\r\n+  //     setModalMessage(\"⚠️ پمپی انتخاب نکردید!\");\r\n+  //     setIsModalOpen(true); // باز کردن مودال خطا\r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   console.log(\"🔍 Selected SubPumps:\", tempSelectedSubPumps);\r\n+\r\n+  //   // چک کردن orderId قبل از ارسال\r\n+  //   if (!orderId) {\r\n+  //     setModalMessage(\"❌ شماره سفارش مشخص نشده است!\");\r\n+  //     setIsModalOpen(true); // باز کردن مودال خطا\r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   const newPumps = tempSelectedPumps.map((pump) => ({\r\n+  //     ...pump,\r\n+  //     count: quantity,\r\n+  //   }));\r\n+\r\n+  //   const newSubPumps = tempSelectedSubPumps.map((subPump) => ({\r\n+  //     ...subPump,\r\n+  //     count: quantity,\r\n+  //   }));\r\n+\r\n+  //   const payload = [];\r\n+\r\n+  //   newPumps.forEach((pump) => {\r\n+  //     const subPumpsForThisPump = newSubPumps.filter(\r\n+  //       (subPump) => subPump.pumpId === pump.id\r\n+  //     );\r\n+\r\n+  //     if (subPumpsForThisPump.length > 0) {\r\n+  //       subPumpsForThisPump.forEach((subPump) => {\r\n+  //         payload.push({\r\n+  //           order: Number(orderId),\r\n+  //           pump: Number(pump.id),\r\n+  //           count: Number(pump.count),\r\n+  //           sub_pump: Number(subPump.id),\r\n+  //         });\r\n+  //       });\r\n+  //     } else {\r\n+  //       payload.push({\r\n+  //         order: Number(orderId),\r\n+  //         pump: Number(pump.id),\r\n+  //         count: pump.countable ? Number(pump.count) : 1,\r\n+  //         sub_pump: null,\r\n+  //       });\r\n+  //     }\r\n+  //   });\r\n+\r\n+  //   // ارسال به سرور\r\n+  //   try {\r\n+  //     const response = await axios.post(\r\n+  //       \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n+  //       payload,\r\n+  //       {\r\n+  //         headers: {\r\n+  //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n+  //           \"Content-Type\": \"application/json\",\r\n+  //         },\r\n+  //       }\r\n+  //     );\r\n+\r\n+  //     if (response.status === 200) {\r\n+  //       toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n+  //       // به‌روزرسانی داده‌های پمپ‌ها\r\n+  //       setSelectedPumps((prev) => [...prev, ...newPumps]);\r\n+  //       setSelectedSubPumps((prev) => [...prev, ...newSubPumps]);\r\n+  //       setTempSelectedPumps([]);\r\n+  //       setTempSelectedSubPumps([]);\r\n+  //       setSubPumps([]);\r\n+  //       setQuantity(1);\r\n+  //     } else {\r\n+  //       setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n+  //       setIsModalOpen(true);\r\n+  //     }\r\n+  //   } catch (error) {\r\n+  //     toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n+  //   }\r\n+  // };\r\n+  // useEffect(() => {\r\n+  //   const fetchOrderData = async () => {\r\n+  //     setLoading(true);\r\n+  //     try {\r\n+  //       const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+  //       const orderRes = await axios.get(\r\n+  //         `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n+  //         {\r\n+  //           headers: { Authorization: `Bearer ${token}` },\r\n+  //         }\r\n+  //       );\r\n+\r\n+  //       const orderData = orderRes.data;\r\n+\r\n+  //       setProjectTitle(orderData.title || \"بدون عنوان\");\r\n+  //       setPumps(orderData.pumps || []); // ✅ پمپ‌ها از همون ریسپانس\r\n+  //       console.log(\"پمپ‌ها دریافت شده:\", orderData.pumps);\r\n+  //     } catch (err) {\r\n+  //       toast.error(\"❌ خطا در دریافت اطلاعات سفارش یا پمپ‌ها!\");\r\n+  //     } finally {\r\n+  //       setLoading(false);\r\n+  //     }\r\n+  //   };\r\n+\r\n+  //   fetchOrderData();\r\n+  // }, [orderId]);\r\n+\r\n+  // const fetchSubPumps = async (id) => {\r\n+  //   const token = localStorage.getItem(\"accessToken\");\r\n+  //   if (!token) {\r\n+  //     toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   try {\r\n+  //     const { data } = await axios.get(\r\n+  //       `https://amin-beton-back.chbk.app/api/sales-pump/${id}/sub-pumps/`,\r\n+  //       { headers: { Authorization: `Bearer ${token}` } }\r\n+  //     );\r\n+\r\n+  //     // همیشه داده جدید جایگزین بشه\r\n+  //     setSubPumps(data || []);\r\n+  //   } catch (err) {\r\n+  //     toast.error(\"❌ خطا در دریافت زیرمجموعه‌های پمپ!\");\r\n+  //   }\r\n+  // };\r\n+\r\n+  // const handlePumpSelection = (id) => {\r\n+  //   if (quantity < 1) {\r\n+  //     toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   // پیدا کردن پمپ بر اساس id، توجه به اینکه داده‌ها در structure `pump.pump.id` هستند\r\n+  //   const pump = pumps.find((p) => p.pump.id === id);\r\n+  //   if (!pump) return;\r\n+\r\n+  //   const isSelected = tempSelectedPumps.some((p) => p.id === pump.pump.id);\r\n+\r\n+  //   // زیرپمپ‌ها و انتخاب‌های موقت رو پاک کن\r\n+  //   setTempSelectedSubPumps([]);\r\n+  //   setSubPumps([]);\r\n+\r\n+  //   if (isSelected) {\r\n+  //     // اگه دوباره کلیک شد، فقط زیرپمپ‌ها رو ری‌لود کن (انتخاب بمونه)\r\n+  //     fetchSubPumps(id);\r\n+  //   } else {\r\n+  //     // یه پمپ جدید انتخاب شده → انتخاب قبلی رو پاک و جدید بذار\r\n+  //     setTempSelectedPumps([\r\n+  //       {\r\n+  //         ...pump.pump, // حالا از pump.pump برای دسترسی به اطلاعات استفاده می‌کنیم\r\n+  //         count: quantity,\r\n+  //       },\r\n+  //     ]);\r\n+  //     fetchSubPumps(id);\r\n+  //   }\r\n+  // };\r\n+\r\n+  // const handleSubPumpSelection = (subPumpId) => {\r\n+  //   if (quantity < 1) {\r\n+  //     toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   const subPump = subPumps.find((sp) => sp.id === subPumpId);\r\n+  //   if (!subPump) return;\r\n+\r\n+  //   const selectedPump = tempSelectedPumps[0]; // چون فقط یکی انتخاب می‌شه\r\n+  //   if (!selectedPump) {\r\n+  //     toast.warn(\"⚠️ لطفاً ابتدا یک پمپ انتخاب کنید!\");\r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   const exists = tempSelectedSubPumps.some(\r\n+  //     (sp) => sp.id === subPumpId && sp.pumpId === selectedPump.id\r\n+  //   );\r\n+\r\n+  //   if (exists) {\r\n+  //     // اگه همون زیرپمپ دوباره کلیک بشه، پاکش کن\r\n+  //     setTempSelectedSubPumps([]);\r\n+  //   } else {\r\n+  //     // فقط همین یه زیرپمپ رو نگه دار\r\n+  //     setTempSelectedSubPumps([\r\n+  //       {\r\n+  //         ...subPump,\r\n+  //         count: quantity,\r\n+  //         pumpId: selectedPump.id,\r\n+  //       },\r\n+  //     ]);\r\n+  //   }\r\n+  // };\r\n+\r\n+  // const handleQuantityChangeForPump = (id, value) => {\r\n+  //   const numericValue = Number(value);\r\n+  //   if (isNaN(numericValue) || numericValue < 1) return;\r\n+\r\n+  //   // تغییر تعداد پمپ انتخاب شده\r\n+  //   setTempSelectedPumps((prev) =>\r\n+  //     prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n+  //   );\r\n+  // };\r\n+\r\n+  // const handleQuantityChangeForSubPump = (id, value) => {\r\n+  //   const numericValue = Number(value);\r\n+  //   if (isNaN(numericValue) || numericValue < 1) return;\r\n+\r\n+  //   // تغییر تعداد زیرپمپ انتخاب شده\r\n+  //   setTempSelectedSubPumps((prev) =>\r\n+  //     prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n+  //   );\r\n+  // };\r\n+\r\n+  // const handleTempQuantityChange = (id, value, isSubPump = false) => {\r\n+  //   const numericValue = Number(value);\r\n+  //   if (isNaN(numericValue) || numericValue < 1) return;\r\n+\r\n+  //   if (isSubPump) {\r\n+  //     setTempSelectedSubPumps((prev) =>\r\n+  //       prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n+  //     );\r\n+  //   } else {\r\n+  //     setTempSelectedPumps((prev) =>\r\n+  //       prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n+  //     );\r\n+  //   }\r\n+  // };\r\n+\r\n+  // const handleQuantityChange = (e) => {\r\n+  //   const updatedCount = Number(e.target.value);\r\n+  //   if (!isNaN(updatedCount) && updatedCount >= 1) {\r\n+  //     setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n+  //   }\r\n+  // };\r\n+\r\n+  // //     toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n+  // //     return;\r\n+  // //   }\r\n+\r\n+  // //   if (!orderId) {\r\n+  // //     toast.error(\"❌ شماره سفارش معتبر نیست!\");\r\n+  // //     return;\r\n+  // //   }\r\n+\r\n+  // //   // فیلتر کردن پمپ‌ها و زیرپمپ‌ها بر اساس ID به‌طوری‌که تکراری نباشند\r\n+  // //   const uniquePumps = [\r\n+  // //     ...new Map(pumps.map((p) => [p.id, p])).values(), // حذف پمپ‌های تکراری بر اساس id\r\n+  // //   ];\r\n+  // //   const uniqueSubPumps = [\r\n+  // //     ...new Map(subPumps.map((sp) => [sp.id, sp])).values(), // حذف زیرپمپ‌های تکراری بر اساس id\r\n+  // //   ];\r\n+\r\n+  // //   const payload = [\r\n+  // //     ...uniqueSubPumps.map((sp) => ({\r\n+  // //       order: orderId,\r\n+  // //       pump: sp.parentId,\r\n+  // //       count: sp.count,\r\n+  // //       sub_pump: sp.id,\r\n+  // //     })),\r\n+  // //     ...uniquePumps\r\n+  // //       .filter((p) => !uniqueSubPumps.some((sp) => sp.parentId === p.id)) // پمپ‌هایی که زیرپمپ ندارند\r\n+  // //       .map((p) => ({\r\n+  // //         order: orderId,\r\n+  // //         pump: p.id,\r\n+  // //         count: p.count,\r\n+  // //         sub_pump: null,\r\n+  // //       })),\r\n+  // //   ];\r\n+\r\n+  // //   try {\r\n+  // //     if (payload.length > 0) {\r\n+  // //       await axios.post(\r\n+  // //         \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n+  // //         payload,\r\n+  // //         {\r\n+  // //           headers: {\r\n+  // //             Authorization: `Bearer ${token}`,\r\n+  // //             \"Content-Type\": \"application/json\",\r\n+  // //           },\r\n+  // //         }\r\n+  // //       );\r\n+  // //       toast.success(\"✅ سفارش با موفقیت ثبت شد!\");\r\n+  // //     } else {\r\n+  // //       toast.warn(\"⚠️ هیچ آیتمی برای ارسال وجود ندارد!\");\r\n+  // //     }\r\n+  // //   } catch (err) {\r\n+  // //     toast.error(\"❌ خطا در افزودن پمپ به سفارش!\");\r\n+  // //   }\r\n+  // // };\r\n+\r\n+  // const handleRemovePump = (id, isSubPump = false) => {\r\n+  //   if (isSubPump) {\r\n+  //     setSelectedSubPumps((prev) => prev.filter((sp) => sp.id !== id));\r\n+  //   } else {\r\n+  //     setSelectedPumps((prev) => prev.filter((p) => p.id !== id));\r\n+  //   }\r\n+\r\n+  //   deletePumpOrder(id);\r\n+  // };\r\n+\r\n return (\r\n   <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n     <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n       <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n"
                },
                {
                    "date": 1744126858947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,18 @@\n import Button from \"../ui/Button\";\r\n import { useParams, useNavigate } from \"react-router-dom\";\r\n import Modal from \"../pages/Modal\";\r\n const PumpPage = () => {\r\n-  // const [pumps, setPumps] = useState([]);\r\n-  // const [subPumps, setSubPumps] = useState([]);\r\n-  // const [selectedPumps, setSelectedPumps] = useState([]);\r\n-  // const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n-  // const [loading, setLoading] = useState(true);\r\n-  // const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n-  // const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n-  // const { orderId } = useParams();\r\n-  // const [projectTitle, setProjectTitle] = useState(\"\");\r\n-  // // const { orderId } = useParams(); //\r\n+  const [pumps, setPumps] = useState([]);\r\n+  const [subPumps, setSubPumps] = useState([]);\r\n+  const [selectedPumps, setSelectedPumps] = useState([]);\r\n+  const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n+  const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n+  const { orderId } = useParams();\r\n+  const [projectTitle, setProjectTitle] = useState(\"\");\r\n+  // const { orderId } = useParams(); //\r\n   // const navigate = useNavigate();\r\n   // const [quantity, setQuantity] = useState(1);\r\n   // const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n   // const [isModalOpen, setIsModalOpen] = useState(false);\r\n@@ -390,172 +390,172 @@\n \r\n   //   deletePumpOrder(id);\r\n   // };\r\n \r\n-return (\r\n-  <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n-    <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n-      <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n-        خرید برای <br /> {projectTitle}\r\n-      </h1>\r\n+  return (\r\n+    <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n+      <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n+        <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n+          خرید برای <br /> {projectTitle}\r\n+        </h1>\r\n \r\n-      <div className=\"mb-8\">\r\n-        <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n-        <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n-          {uniquePumps.map((pump) => {\r\n-            // بررسی عنوان پمپ\r\n-            const isSelected = tempSelectedPumps.some(\r\n-              (p) => p.id === pump.pump.id\r\n-            ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n+        <div className=\"mb-8\">\r\n+          <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n+          <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n+            {uniquePumps.map((pump) => {\r\n+              // بررسی عنوان پمپ\r\n+              const isSelected = tempSelectedPumps.some(\r\n+                (p) => p.id === pump.pump.id\r\n+              ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n \r\n-            return (\r\n-              <div\r\n-                key={pump.pump.id} // استفاده از pump.pump.id\r\n-                className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n-                  isSelected ? \"border-School-Bus\" : \"border-white\"\r\n-                } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n-                onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n-              >\r\n+              return (\r\n                 <div\r\n-                  className={`w-4 h-4 mb-2 rounded-full ${\r\n-                    isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n-                  }`}\r\n-                ></div>\r\n-                <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n-                {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n-              </div>\r\n-            );\r\n-          })}\r\n-        </div>\r\n+                  key={pump.pump.id} // استفاده از pump.pump.id\r\n+                  className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n+                    isSelected ? \"border-School-Bus\" : \"border-white\"\r\n+                  } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n+                  onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n+                >\r\n+                  <div\r\n+                    className={`w-4 h-4 mb-2 rounded-full ${\r\n+                      isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n+                    }`}\r\n+                  ></div>\r\n+                  <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n+                  {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n+                </div>\r\n+              );\r\n+            })}\r\n+          </div>\r\n \r\n-        {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n-          <div className=\"mb-8\">\r\n-            <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n-            <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-              {subPumps.map((subPump) => {\r\n-                const isSelected = tempSelectedSubPumps.some(\r\n-                  (sp) => sp.id === subPump.id\r\n-                );\r\n+          {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n+            <div className=\"mb-8\">\r\n+              <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n+              <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+                {subPumps.map((subPump) => {\r\n+                  const isSelected = tempSelectedSubPumps.some(\r\n+                    (sp) => sp.id === subPump.id\r\n+                  );\r\n \r\n-                return (\r\n-                  <div\r\n-                    key={subPump.id}\r\n-                    className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n-                      isSelected ? \"border-School-Bus\" : \"border-white\"\r\n-                    } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n-                    onClick={() => handleSubPumpSelection(subPump.id)}\r\n-                  >\r\n+                  return (\r\n                     <div\r\n-                      className={`w-4 h-4 mb-2 rounded-full ${\r\n-                        isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n-                      }`}\r\n-                    ></div>\r\n-                    <div className=\"mb-2\">{subPump.title}</div>\r\n-                  </div>\r\n-                );\r\n-              })}\r\n+                      key={subPump.id}\r\n+                      className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n+                        isSelected ? \"border-School-Bus\" : \"border-white\"\r\n+                      } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n+                      onClick={() => handleSubPumpSelection(subPump.id)}\r\n+                    >\r\n+                      <div\r\n+                        className={`w-4 h-4 mb-2 rounded-full ${\r\n+                          isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n+                        }`}\r\n+                      ></div>\r\n+                      <div className=\"mb-2\">{subPump.title}</div>\r\n+                    </div>\r\n+                  );\r\n+                })}\r\n+              </div>\r\n             </div>\r\n+          )}\r\n+        </div>\r\n+\r\n+        {tempSelectedPumps.some((pump) => pump.countable) && (\r\n+          <div className=\"flex items-center gap-2 mt-4\">\r\n+            <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n+              تعداد پمپ\r\n+            </label>\r\n+            <input\r\n+              id=\"totalQty\"\r\n+              type=\"number\"\r\n+              min=\"1\"\r\n+              value={quantity}\r\n+              onChange={handleQuantityChange}\r\n+              className=\"w-24 p-2 text-black border rounded-md\"\r\n+            />\r\n           </div>\r\n         )}\r\n-      </div>\r\n \r\n-      {tempSelectedPumps.some((pump) => pump.countable) && (\r\n-        <div className=\"flex items-center gap-2 mt-4\">\r\n-          <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n-            تعداد پمپ\r\n-          </label>\r\n-          <input\r\n-            id=\"totalQty\"\r\n-            type=\"number\"\r\n-            min=\"1\"\r\n-            value={quantity}\r\n-            onChange={handleQuantityChange}\r\n-            className=\"w-24 p-2 text-black border rounded-md\"\r\n-          />\r\n+        {/* دکمه افزودن پمپ‌ها */}\r\n+        <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n+          <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n+            افزودن پمپ‌ها\r\n+          </Button>\r\n         </div>\r\n-      )}\r\n \r\n-      {/* دکمه افزودن پمپ‌ها */}\r\n-      <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n-        <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n-          افزودن پمپ‌ها\r\n-        </Button>\r\n-      </div>\r\n+        {/* نمایش انتخاب‌های پمپ‌ها */}\r\n\\ No newline at end of file\n+        <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n+          <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n \r\n-      {/* نمایش انتخاب‌های پمپ‌ها */}\r\n-      <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n-        <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n-\r\n-        {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n-        {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n-        {selectedPumps.map((pump) => (\r\n-          <div\r\n-            key={pump.id}\r\n-            className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n-          >\r\n-            <div className=\"flex flex-row items-center gap-4\">\r\n-              <span>\r\n-                پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n-                {selectedSubPumps.filter(\r\n-                  (subPump) => subPump.pumpId === pump.id\r\n-                ).length > 0\r\n-                  ? selectedSubPumps\r\n-                      .filter((subPump) => subPump.pumpId === pump.id)\r\n-                      .map((subPump) => subPump.title)\r\n-                      .join(\", \")\r\n-                  : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n-                | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n-                <button\r\n-                  onClick={() => handleRemovePump(pump.id)}\r\n-                  className=\"text-red hover:text-red-700\"\r\n+          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n+          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n+          {selectedPumps.map((pump) => (\r\n+            <div\r\n+              key={pump.id}\r\n+              className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n+            >\r\n+              <div className=\"flex flex-row items-center gap-4\">\r\n+                <span>\r\n+                  پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n+                  {selectedSubPumps.filter(\r\n+                    (subPump) => subPump.pumpId === pump.id\r\n+                  ).length > 0\r\n+                    ? selectedSubPumps\r\n+                        .filter((subPump) => subPump.pumpId === pump.id)\r\n+                        .map((subPump) => subPump.title)\r\n+                        .join(\", \")\r\n+                    : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n+                  | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n+                  <button\r\n+                    onClick={() => handleRemovePump(pump.id)}\r\n+                    className=\"text-red hover:text-red-700\"\r\n+                  >\r\n+                    حذف\r\n+                  </button>\r\n+                </span>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+        <div className=\"mb-8\">\r\n+          <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n+          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+            {selectedPumps.map((pump) => {\r\n+              const subPumpsForThisPump = selectedSubPumps.filter(\r\n+                (subPump) => subPump.pumpId === pump.id\r\n+              );\r\n+              return (\r\n+                <div\r\n+                  key={pump.id}\r\n+                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n                 >\r\n-                  حذف\r\n-                </button>\r\n-              </span>\r\n-            </div>\r\n+                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n+                  <div className=\"mb-2\">{pump.title}</div>\r\n+                  <div>\r\n+                    تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n+                    {subPumpsForThisPump.length}\r\n+                  </div>\r\n+                </div>\r\n+              );\r\n+            })}\r\n           </div>\r\n-        ))}\r\n-      </div>\r\n-      <div className=\"mb-8\">\r\n-        <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n-        <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-          {selectedPumps.map((pump) => {\r\n-            const subPumpsForThisPump = selectedSubPumps.filter(\r\n-              (subPump) => subPump.pumpId === pump.id\r\n-            );\r\n-            return (\r\n-              <div\r\n-                key={pump.id}\r\n-                className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n-              >\r\n-                <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n-                <div className=\"mb-2\">{pump.title}</div>\r\n-                <div>\r\n-                  تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n-                  {subPumpsForThisPump.length}\r\n-                </div>\r\n-              </div>\r\n-            );\r\n-          })}\r\n         </div>\r\n+\r\n+        <Button\r\n+          className=\"px-10\"\r\n+          onClick={() => {\r\n+            handleAddAndSubmit();\r\n+            navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n+          }}\r\n+        >\r\n+          ادامه\r\n+        </Button>\r\n+        <Modal\r\n+          isOpen={isModalOpen}\r\n+          onClose={() => setIsModalOpen(false)}\r\n+          message={modalMessage}\r\n+        />\r\n       </div>\r\n-\r\n-      <Button\r\n-        className=\"px-10\"\r\n-        onClick={() => {\r\n-          handleAddAndSubmit();\r\n-          navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n-        }}\r\n-      >\r\n-        ادامه\r\n-      </Button>\r\n-      <Modal\r\n-        isOpen={isModalOpen}\r\n-        onClose={() => setIsModalOpen(false)}\r\n-        message={modalMessage}\r\n-      />\r\n     </div>\r\n-  </div>\r\n-);\r\n+  );\r\n };\r\n \r\n-export default PumpPage;\n+export default PumpPage;\r\n"
                },
                {
                    "date": 1744126876283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,22 +15,22 @@\n   const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n   const { orderId } = useParams();\r\n   const [projectTitle, setProjectTitle] = useState(\"\");\r\n   // const { orderId } = useParams(); //\r\n-  // const navigate = useNavigate();\r\n-  // const [quantity, setQuantity] = useState(1);\r\n-  // const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n-  // const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  // const [modalMessage, setModalMessage] = useState(\"\");\r\n-  // const uniquePumps = [\r\n-  //   ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n-  // ];\r\n-  // const handleSubmitOrder = async (orderId) => {\r\n-  //   const token = localStorage.getItem(\"accessToken\");\r\n-  //   if (!token) {\r\n-  //     toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-  //     return;\r\n-  //   }\r\n+  const navigate = useNavigate();\r\n+  const [quantity, setQuantity] = useState(1);\r\n+  const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n+  const [isModalOpen, setIsModalOpen] = useState(false);\r\n+  const [modalMessage, setModalMessage] = useState(\"\");\r\n+  const uniquePumps = [\r\n+    ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n+  ];\r\n+  const handleSubmitOrder = async (orderId) => {\r\n+    const token = localStorage.getItem(\"accessToken\");\r\n+    if (!token) {\r\n+      toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n+      return;\r\n+    }\r\n \r\n   //   if (!orderId || tempSelectedPumps.length === 0) {\r\n   //     toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n   //     return;\r\n"
                },
                {
                    "date": 1744126887096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,41 +30,41 @@\n       toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n       return;\r\n     }\r\n \r\n-  //   if (!orderId || tempSelectedPumps.length === 0) {\r\n-  //     toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n-  //     return;\r\n-  //   }\r\n+    if (!orderId || tempSelectedPumps.length === 0) {\r\n+      toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n+      return;\r\n+    }\r\n \r\n-  //   const payload = [];\r\n+    const payload = [];\r\n \r\n-  //   tempSelectedPumps.forEach((pump) => {\r\n-  //     // پیدا کردن زیرپمپ‌های مربوط به این پمپ\r\n-  //     const subPumpsForThisPump = tempSelectedSubPumps.filter(\r\n-  //       (subPump) => subPump.pumpId === pump.id\r\n-  //     );\r\n+    tempSelectedPumps.forEach((pump) => {\r\n+      // پیدا کردن زیرپمپ‌های مربوط به این پمپ\r\n+      const subPumpsForThisPump = tempSelectedSubPumps.filter(\r\n+        (subPump) => subPump.pumpId === pump.id\r\n+      );\r\n \r\n-  //     if (subPumpsForThisPump.length > 0) {\r\n-  //       // اگر زیرپمپ دارد، ارسال پمپ و زیرپمپ‌ها با هم\r\n-  //       subPumpsForThisPump.forEach((subPump) => {\r\n-  //         payload.push({\r\n-  //           order: Number(orderId),\r\n-  //           pump: Number(pump.id),\r\n-  //           count: Number(pump.count),\r\n-  //           sub_pump: Number(subPump.id),\r\n-  //         });\r\n-  //       });\r\n-  //     } else {\r\n-  //       // اگر زیرپمپ ندارد، فقط پمپ را ارسال می‌کنیم\r\n-  //       payload.push({\r\n-  //         order: Number(orderId),\r\n-  //         pump: Number(pump.id),\r\n-  //         count: Number(pump.count),\r\n-  //         sub_pump: null, // بدون زیرپمپ\r\n-  //       });\r\n-  //     }\r\n-  //   });\r\n+      if (subPumpsForThisPump.length > 0) {\r\n+        // اگر زیرپمپ دارد، ارسال پمپ و زیرپمپ‌ها با هم\r\n+        subPumpsForThisPump.forEach((subPump) => {\r\n+          payload.push({\r\n+            order: Number(orderId),\r\n+            pump: Number(pump.id),\r\n+            count: Number(pump.count),\r\n+            sub_pump: Number(subPump.id),\r\n+          });\r\n+        });\r\n+      } else {\r\n+        // اگر زیرپمپ ندارد، فقط پمپ را ارسال می‌کنیم\r\n+        payload.push({\r\n+          order: Number(orderId),\r\n+          pump: Number(pump.id),\r\n+          count: Number(pump.count),\r\n+          sub_pump: null, // بدون زیرپمپ\r\n+        });\r\n+      }\r\n+    });\r\n \r\n   //   console.log(\"📦 Payload:\", payload);\r\n \r\n   //   try {\r\n"
                },
                {
                    "date": 1744126902790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,561 +0,0 @@\n-import React, { useState, useEffect } from \"react\";\r\n-import axios from \"axios\";\r\n-import { toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import Button from \"../ui/Button\";\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import Modal from \"../pages/Modal\";\r\n-const PumpPage = () => {\r\n-  const [pumps, setPumps] = useState([]);\r\n-  const [subPumps, setSubPumps] = useState([]);\r\n-  const [selectedPumps, setSelectedPumps] = useState([]);\r\n-  const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n-  const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n-  const { orderId } = useParams();\r\n-  const [projectTitle, setProjectTitle] = useState(\"\");\r\n-  // const { orderId } = useParams(); //\r\n-  const navigate = useNavigate();\r\n-  const [quantity, setQuantity] = useState(1);\r\n-  const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n-  const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  const [modalMessage, setModalMessage] = useState(\"\");\r\n-  const uniquePumps = [\r\n-    ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n-  ];\r\n-  const handleSubmitOrder = async (orderId) => {\r\n-    const token = localStorage.getItem(\"accessToken\");\r\n-    if (!token) {\r\n-      toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-      return;\r\n-    }\r\n-\r\n-    if (!orderId || tempSelectedPumps.length === 0) {\r\n-      toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n-      return;\r\n-    }\r\n-\r\n-    const payload = [];\r\n-\r\n-    tempSelectedPumps.forEach((pump) => {\r\n-      // پیدا کردن زیرپمپ‌های مربوط به این پمپ\r\n-      const subPumpsForThisPump = tempSelectedSubPumps.filter(\r\n-        (subPump) => subPump.pumpId === pump.id\r\n-      );\r\n-\r\n-      if (subPumpsForThisPump.length > 0) {\r\n-        // اگر زیرپمپ دارد، ارسال پمپ و زیرپمپ‌ها با هم\r\n-        subPumpsForThisPump.forEach((subPump) => {\r\n-          payload.push({\r\n-            order: Number(orderId),\r\n-            pump: Number(pump.id),\r\n-            count: Number(pump.count),\r\n-            sub_pump: Number(subPump.id),\r\n-          });\r\n-        });\r\n-      } else {\r\n-        // اگر زیرپمپ ندارد، فقط پمپ را ارسال می‌کنیم\r\n-        payload.push({\r\n-          order: Number(orderId),\r\n-          pump: Number(pump.id),\r\n-          count: Number(pump.count),\r\n-          sub_pump: null, // بدون زیرپمپ\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-  //   console.log(\"📦 Payload:\", payload);\r\n-\r\n-  //   try {\r\n-  //     const response = await axios.post(\r\n-  //       \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n-  //       payload,\r\n-  //       {\r\n-  //         headers: {\r\n-  //           Authorization: `Bearer ${token}`,\r\n-  //           \"Content-Type\": \"application/json\",\r\n-  //         },\r\n-  //       }\r\n-  //     );\r\n-\r\n-  //     console.log(\"✅ Server Response:\", response.data);\r\n-  //     toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n-  //   } catch (error) {\r\n-  //     console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n-  //     toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const handleAddAndSubmit = async () => {\r\n-  //   console.log(\"🚀 handleAddAndSubmit اجرا شد!\");\r\n-\r\n-  //   if (tempSelectedPumps.length === 0 && tempSelectedSubPumps.length === 0) {\r\n-  //     setModalMessage(\"⚠️ پمپی انتخاب نکردید!\");\r\n-  //     setIsModalOpen(true); // باز کردن مودال خطا\r\n-  //     return;\r\n-  //   }\r\n-\r\n-  //   console.log(\"🔍 Selected SubPumps:\", tempSelectedSubPumps);\r\n-\r\n-  //   // چک کردن orderId قبل از ارسال\r\n-  //   if (!orderId) {\r\n-  //     setModalMessage(\"❌ شماره سفارش مشخص نشده است!\");\r\n-  //     setIsModalOpen(true); // باز کردن مودال خطا\r\n-  //     return;\r\n-  //   }\r\n-\r\n-  //   const newPumps = tempSelectedPumps.map((pump) => ({\r\n-  //     ...pump,\r\n-  //     count: quantity,\r\n-  //   }));\r\n-\r\n-  //   const newSubPumps = tempSelectedSubPumps.map((subPump) => ({\r\n-  //     ...subPump,\r\n-  //     count: quantity,\r\n-  //   }));\r\n-\r\n-  //   const payload = [];\r\n-\r\n-  //   newPumps.forEach((pump) => {\r\n-  //     const subPumpsForThisPump = newSubPumps.filter(\r\n-  //       (subPump) => subPump.pumpId === pump.id\r\n-  //     );\r\n-\r\n-  //     if (subPumpsForThisPump.length > 0) {\r\n-  //       subPumpsForThisPump.forEach((subPump) => {\r\n-  //         payload.push({\r\n-  //           order: Number(orderId),\r\n-  //           pump: Number(pump.id),\r\n-  //           count: Number(pump.count),\r\n-  //           sub_pump: Number(subPump.id),\r\n-  //         });\r\n-  //       });\r\n-  //     } else {\r\n-  //       payload.push({\r\n-  //         order: Number(orderId),\r\n-  //         pump: Number(pump.id),\r\n-  //         count: pump.countable ? Number(pump.count) : 1,\r\n-  //         sub_pump: null,\r\n-  //       });\r\n-  //     }\r\n-  //   });\r\n-\r\n-  //   // ارسال به سرور\r\n-  //   try {\r\n-  //     const response = await axios.post(\r\n-  //       \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n-  //       payload,\r\n-  //       {\r\n-  //         headers: {\r\n-  //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n-  //           \"Content-Type\": \"application/json\",\r\n-  //         },\r\n-  //       }\r\n-  //     );\r\n-\r\n-  //     if (response.status === 200) {\r\n-  //       toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n-  //       // به‌روزرسانی داده‌های پمپ‌ها\r\n-  //       setSelectedPumps((prev) => [...prev, ...newPumps]);\r\n-  //       setSelectedSubPumps((prev) => [...prev, ...newSubPumps]);\r\n-  //       setTempSelectedPumps([]);\r\n-  //       setTempSelectedSubPumps([]);\r\n-  //       setSubPumps([]);\r\n-  //       setQuantity(1);\r\n-  //     } else {\r\n-  //       setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-  //       setIsModalOpen(true);\r\n-  //     }\r\n-  //   } catch (error) {\r\n-  //     toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n-  //   }\r\n-  // };\r\n-  // useEffect(() => {\r\n-  //   const fetchOrderData = async () => {\r\n-  //     setLoading(true);\r\n-  //     try {\r\n-  //       const token = localStorage.getItem(\"accessToken\");\r\n-\r\n-  //       const orderRes = await axios.get(\r\n-  //         `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n-  //         {\r\n-  //           headers: { Authorization: `Bearer ${token}` },\r\n-  //         }\r\n-  //       );\r\n-\r\n-  //       const orderData = orderRes.data;\r\n-\r\n-  //       setProjectTitle(orderData.title || \"بدون عنوان\");\r\n-  //       setPumps(orderData.pumps || []); // ✅ پمپ‌ها از همون ریسپانس\r\n-  //       console.log(\"پمپ‌ها دریافت شده:\", orderData.pumps);\r\n-  //     } catch (err) {\r\n-  //       toast.error(\"❌ خطا در دریافت اطلاعات سفارش یا پمپ‌ها!\");\r\n-  //     } finally {\r\n-  //       setLoading(false);\r\n-  //     }\r\n-  //   };\r\n-\r\n-  //   fetchOrderData();\r\n-  // }, [orderId]);\r\n-\r\n-  // const fetchSubPumps = async (id) => {\r\n-  //   const token = localStorage.getItem(\"accessToken\");\r\n-  //   if (!token) {\r\n-  //     toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-  //     return;\r\n-  //   }\r\n-\r\n-  //   try {\r\n-  //     const { data } = await axios.get(\r\n-  //       `https://amin-beton-back.chbk.app/api/sales-pump/${id}/sub-pumps/`,\r\n-  //       { headers: { Authorization: `Bearer ${token}` } }\r\n-  //     );\r\n-\r\n-  //     // همیشه داده جدید جایگزین بشه\r\n-  //     setSubPumps(data || []);\r\n-  //   } catch (err) {\r\n-  //     toast.error(\"❌ خطا در دریافت زیرمجموعه‌های پمپ!\");\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const handlePumpSelection = (id) => {\r\n-  //   if (quantity < 1) {\r\n-  //     toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n-  //     return;\r\n-  //   }\r\n-\r\n-  //   // پیدا کردن پمپ بر اساس id، توجه به اینکه داده‌ها در structure `pump.pump.id` هستند\r\n-  //   const pump = pumps.find((p) => p.pump.id === id);\r\n-  //   if (!pump) return;\r\n-\r\n-  //   const isSelected = tempSelectedPumps.some((p) => p.id === pump.pump.id);\r\n-\r\n-  //   // زیرپمپ‌ها و انتخاب‌های موقت رو پاک کن\r\n-  //   setTempSelectedSubPumps([]);\r\n-  //   setSubPumps([]);\r\n-\r\n-  //   if (isSelected) {\r\n-  //     // اگه دوباره کلیک شد، فقط زیرپمپ‌ها رو ری‌لود کن (انتخاب بمونه)\r\n-  //     fetchSubPumps(id);\r\n-  //   } else {\r\n-  //     // یه پمپ جدید انتخاب شده → انتخاب قبلی رو پاک و جدید بذار\r\n-  //     setTempSelectedPumps([\r\n-  //       {\r\n-  //         ...pump.pump, // حالا از pump.pump برای دسترسی به اطلاعات استفاده می‌کنیم\r\n-  //         count: quantity,\r\n-  //       },\r\n-  //     ]);\r\n-  //     fetchSubPumps(id);\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const handleSubPumpSelection = (subPumpId) => {\r\n-  //   if (quantity < 1) {\r\n-  //     toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n-  //     return;\r\n-  //   }\r\n-\r\n-  //   const subPump = subPumps.find((sp) => sp.id === subPumpId);\r\n-  //   if (!subPump) return;\r\n-\r\n-  //   const selectedPump = tempSelectedPumps[0]; // چون فقط یکی انتخاب می‌شه\r\n-  //   if (!selectedPump) {\r\n-  //     toast.warn(\"⚠️ لطفاً ابتدا یک پمپ انتخاب کنید!\");\r\n-  //     return;\r\n-  //   }\r\n-\r\n-  //   const exists = tempSelectedSubPumps.some(\r\n-  //     (sp) => sp.id === subPumpId && sp.pumpId === selectedPump.id\r\n-  //   );\r\n-\r\n-  //   if (exists) {\r\n-  //     // اگه همون زیرپمپ دوباره کلیک بشه، پاکش کن\r\n-  //     setTempSelectedSubPumps([]);\r\n-  //   } else {\r\n-  //     // فقط همین یه زیرپمپ رو نگه دار\r\n-  //     setTempSelectedSubPumps([\r\n-  //       {\r\n-  //         ...subPump,\r\n-  //         count: quantity,\r\n-  //         pumpId: selectedPump.id,\r\n-  //       },\r\n-  //     ]);\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const handleQuantityChangeForPump = (id, value) => {\r\n-  //   const numericValue = Number(value);\r\n-  //   if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-  //   // تغییر تعداد پمپ انتخاب شده\r\n-  //   setTempSelectedPumps((prev) =>\r\n-  //     prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n-  //   );\r\n-  // };\r\n-\r\n-  // const handleQuantityChangeForSubPump = (id, value) => {\r\n-  //   const numericValue = Number(value);\r\n-  //   if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-  //   // تغییر تعداد زیرپمپ انتخاب شده\r\n-  //   setTempSelectedSubPumps((prev) =>\r\n-  //     prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n-  //   );\r\n-  // };\r\n-\r\n-  // const handleTempQuantityChange = (id, value, isSubPump = false) => {\r\n-  //   const numericValue = Number(value);\r\n-  //   if (isNaN(numericValue) || numericValue < 1) return;\r\n-\r\n-  //   if (isSubPump) {\r\n-  //     setTempSelectedSubPumps((prev) =>\r\n-  //       prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n-  //     );\r\n-  //   } else {\r\n-  //     setTempSelectedPumps((prev) =>\r\n-  //       prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n-  //     );\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const handleQuantityChange = (e) => {\r\n-  //   const updatedCount = Number(e.target.value);\r\n-  //   if (!isNaN(updatedCount) && updatedCount >= 1) {\r\n-  //     setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n-  //   }\r\n-  // };\r\n-\r\n-  // //     toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n-  // //     return;\r\n-  // //   }\r\n-\r\n-  // //   if (!orderId) {\r\n-  // //     toast.error(\"❌ شماره سفارش معتبر نیست!\");\r\n-  // //     return;\r\n-  // //   }\r\n-\r\n-  // //   // فیلتر کردن پمپ‌ها و زیرپمپ‌ها بر اساس ID به‌طوری‌که تکراری نباشند\r\n-  // //   const uniquePumps = [\r\n-  // //     ...new Map(pumps.map((p) => [p.id, p])).values(), // حذف پمپ‌های تکراری بر اساس id\r\n-  // //   ];\r\n-  // //   const uniqueSubPumps = [\r\n-  // //     ...new Map(subPumps.map((sp) => [sp.id, sp])).values(), // حذف زیرپمپ‌های تکراری بر اساس id\r\n-  // //   ];\r\n-\r\n-  // //   const payload = [\r\n-  // //     ...uniqueSubPumps.map((sp) => ({\r\n-  // //       order: orderId,\r\n-  // //       pump: sp.parentId,\r\n-  // //       count: sp.count,\r\n-  // //       sub_pump: sp.id,\r\n-  // //     })),\r\n-  // //     ...uniquePumps\r\n-  // //       .filter((p) => !uniqueSubPumps.some((sp) => sp.parentId === p.id)) // پمپ‌هایی که زیرپمپ ندارند\r\n-  // //       .map((p) => ({\r\n-  // //         order: orderId,\r\n-  // //         pump: p.id,\r\n-  // //         count: p.count,\r\n-  // //         sub_pump: null,\r\n-  // //       })),\r\n-  // //   ];\r\n-\r\n-  // //   try {\r\n-  // //     if (payload.length > 0) {\r\n-  // //       await axios.post(\r\n-  // //         \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n-  // //         payload,\r\n-  // //         {\r\n-  // //           headers: {\r\n-  // //             Authorization: `Bearer ${token}`,\r\n-  // //             \"Content-Type\": \"application/json\",\r\n-  // //           },\r\n-  // //         }\r\n-  // //       );\r\n-  // //       toast.success(\"✅ سفارش با موفقیت ثبت شد!\");\r\n-  // //     } else {\r\n-  // //       toast.warn(\"⚠️ هیچ آیتمی برای ارسال وجود ندارد!\");\r\n-  // //     }\r\n-  // //   } catch (err) {\r\n-  // //     toast.error(\"❌ خطا در افزودن پمپ به سفارش!\");\r\n-  // //   }\r\n-  // // };\r\n-\r\n-  // const handleRemovePump = (id, isSubPump = false) => {\r\n-  //   if (isSubPump) {\r\n-  //     setSelectedSubPumps((prev) => prev.filter((sp) => sp.id !== id));\r\n-  //   } else {\r\n-  //     setSelectedPumps((prev) => prev.filter((p) => p.id !== id));\r\n-  //   }\r\n-\r\n-  //   deletePumpOrder(id);\r\n-  // };\r\n-\r\n-  return (\r\n-    <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n-      <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n-        <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n-          خرید برای <br /> {projectTitle}\r\n-        </h1>\r\n-\r\n-        <div className=\"mb-8\">\r\n-          <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n-          <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n-            {uniquePumps.map((pump) => {\r\n-              // بررسی عنوان پمپ\r\n-              const isSelected = tempSelectedPumps.some(\r\n-                (p) => p.id === pump.pump.id\r\n-              ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n-\r\n-              return (\r\n-                <div\r\n-                  key={pump.pump.id} // استفاده از pump.pump.id\r\n-                  className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n-                    isSelected ? \"border-School-Bus\" : \"border-white\"\r\n-                  } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n-                  onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n-                >\r\n-                  <div\r\n-                    className={`w-4 h-4 mb-2 rounded-full ${\r\n-                      isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n-                    }`}\r\n-                  ></div>\r\n-                  <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n-                  {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n-                </div>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-\r\n-          {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n-            <div className=\"mb-8\">\r\n-              <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n-              <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-                {subPumps.map((subPump) => {\r\n-                  const isSelected = tempSelectedSubPumps.some(\r\n-                    (sp) => sp.id === subPump.id\r\n-                  );\r\n-\r\n-                  return (\r\n-                    <div\r\n-                      key={subPump.id}\r\n-                      className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n-                        isSelected ? \"border-School-Bus\" : \"border-white\"\r\n-                      } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n-                      onClick={() => handleSubPumpSelection(subPump.id)}\r\n-                    >\r\n-                      <div\r\n-                        className={`w-4 h-4 mb-2 rounded-full ${\r\n-                          isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n-                        }`}\r\n-                      ></div>\r\n-                      <div className=\"mb-2\">{subPump.title}</div>\r\n-                    </div>\r\n-                  );\r\n-                })}\r\n-              </div>\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n-\r\n-        {tempSelectedPumps.some((pump) => pump.countable) && (\r\n-          <div className=\"flex items-center gap-2 mt-4\">\r\n-            <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n-              تعداد پمپ\r\n-            </label>\r\n-            <input\r\n-              id=\"totalQty\"\r\n-              type=\"number\"\r\n-              min=\"1\"\r\n-              value={quantity}\r\n-              onChange={handleQuantityChange}\r\n-              className=\"w-24 p-2 text-black border rounded-md\"\r\n-            />\r\n-          </div>\r\n-        )}\r\n-\r\n-        {/* دکمه افزودن پمپ‌ها */}\r\n-        <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n-          <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n-            افزودن پمپ‌ها\r\n-          </Button>\r\n-        </div>\r\n-\r\n-        {/* نمایش انتخاب‌های پمپ‌ها */}\r\n-        <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n-          <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n-\r\n-          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n-          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n-          {selectedPumps.map((pump) => (\r\n-            <div\r\n-              key={pump.id}\r\n-              className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n-            >\r\n-              <div className=\"flex flex-row items-center gap-4\">\r\n-                <span>\r\n-                  پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n-                  {selectedSubPumps.filter(\r\n-                    (subPump) => subPump.pumpId === pump.id\r\n-                  ).length > 0\r\n-                    ? selectedSubPumps\r\n-                        .filter((subPump) => subPump.pumpId === pump.id)\r\n-                        .map((subPump) => subPump.title)\r\n-                        .join(\", \")\r\n-                    : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n-                  | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n-                  <button\r\n-                    onClick={() => handleRemovePump(pump.id)}\r\n-                    className=\"text-red hover:text-red-700\"\r\n-                  >\r\n-                    حذف\r\n-                  </button>\r\n-                </span>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-        <div className=\"mb-8\">\r\n-          <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n-          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-            {selectedPumps.map((pump) => {\r\n-              const subPumpsForThisPump = selectedSubPumps.filter(\r\n-                (subPump) => subPump.pumpId === pump.id\r\n-              );\r\n-              return (\r\n-                <div\r\n-                  key={pump.id}\r\n-                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n-                >\r\n-                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n-                  <div className=\"mb-2\">{pump.title}</div>\r\n-                  <div>\r\n-                    تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n-                    {subPumpsForThisPump.length}\r\n-                  </div>\r\n-                </div>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <Button\r\n-          className=\"px-10\"\r\n-          onClick={() => {\r\n-            handleAddAndSubmit();\r\n-            navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n-          }}\r\n-        >\r\n-          ادامه\r\n-        </Button>\r\n-        <Modal\r\n-          isOpen={isModalOpen}\r\n-          onClose={() => setIsModalOpen(false)}\r\n-          message={modalMessage}\r\n-        />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default PumpPage;\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744126958537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,466 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import axios from \"axios\";\r\n+import { toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import Button from \"../ui/Button\";\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import Modal from \"../pages/Modal\";\r\n+const PumpPage = () => {\r\n+  const [pumps, setPumps] = useState([]);\r\n+  const [subPumps, setSubPumps] = useState([]);\r\n+  const [selectedPumps, setSelectedPumps] = useState([]);\r\n+  const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n+  const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n+  const { orderId } = useParams();\r\n+  const [projectTitle, setProjectTitle] = useState(\"\");\r\n+\r\n+  const navigate = useNavigate();\r\n+  const [quantity, setQuantity] = useState(1);\r\n+// اضافه کردن state برای بررسی ارسال\r\n+  const [isModalOpen, setIsModalOpen] = useState(false);\r\n+  const [modalMessage, setModalMessage] = useState(\"\");\r\n+  const uniquePumps = [\r\n+    ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n+  ];\r\n+\r\n+  const handleAddAndSubmit = async () => {\r\n+    console.log(\"🚀 handleAddAndSubmit اجرا شد!\");\r\n+\r\n+    if (tempSelectedPumps.length === 0 && tempSelectedSubPumps.length === 0) {\r\n+      setModalMessage(\"⚠️ پمپی انتخاب نکردید!\");\r\n+      setIsModalOpen(true); // باز کردن مودال خطا\r\n+      return;\r\n+    }\r\n+\r\n+    console.log(\"🔍 Selected SubPumps:\", tempSelectedSubPumps);\r\n+\r\n+    // چک کردن orderId قبل از ارسال\r\n+    if (!orderId) {\r\n+      setModalMessage(\"❌ شماره سفارش مشخص نشده است!\");\r\n+      setIsModalOpen(true); // باز کردن مودال خطا\r\n+      return;\r\n+    }\r\n+\r\n+    const newPumps = tempSelectedPumps.map((pump) => ({\r\n+      ...pump,\r\n+      count: quantity,\r\n+    }));\r\n+\r\n+    const newSubPumps = tempSelectedSubPumps.map((subPump) => ({\r\n+      ...subPump,\r\n+      count: quantity,\r\n+    }));\r\n+\r\n+    const payload = [];\r\n+\r\n+    newPumps.forEach((pump) => {\r\n+      const subPumpsForThisPump = newSubPumps.filter(\r\n+        (subPump) => subPump.pumpId === pump.id\r\n+      );\r\n+\r\n+      if (subPumpsForThisPump.length > 0) {\r\n+        subPumpsForThisPump.forEach((subPump) => {\r\n+          payload.push({\r\n+            order: Number(orderId),\r\n+            pump: Number(pump.id),\r\n+            count: Number(pump.count),\r\n+            sub_pump: Number(subPump.id),\r\n+          });\r\n+        });\r\n+      } else {\r\n+        payload.push({\r\n+          order: Number(orderId),\r\n+          pump: Number(pump.id),\r\n+          count: pump.countable ? Number(pump.count) : 1,\r\n+          sub_pump: null,\r\n+        });\r\n+      }\r\n+    });\r\n+\r\n+    // ارسال به سرور\r\n+    try {\r\n+      const response = await axios.post(\r\n+        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n+        payload,\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n+            \"Content-Type\": \"application/json\",\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      if (response.status === 200) {\r\n+        toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n+        // به‌روزرسانی داده‌های پمپ‌ها\r\n+        setSelectedPumps((prev) => [...prev, ...newPumps]);\r\n+        setSelectedSubPumps((prev) => [...prev, ...newSubPumps]);\r\n+        setTempSelectedPumps([]);\r\n+        setTempSelectedSubPumps([]);\r\n+        setSubPumps([]);\r\n+        setQuantity(1);\r\n+      } else {\r\n+        setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n+        setIsModalOpen(true);\r\n+      }\r\n+    } catch (error) {\r\n+      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    const fetchOrderData = async () => {\r\n+      setLoading(true);\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+        const orderRes = await axios.get(\r\n+          `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n+          {\r\n+            headers: { Authorization: `Bearer ${token}` },\r\n+          }\r\n+        );\r\n+\r\n+        const orderData = orderRes.data;\r\n+\r\n+        setProjectTitle(orderData.title || \"بدون عنوان\");\r\n+        setPumps(orderData.pumps || []); // ✅ پمپ‌ها از همون ریسپانس\r\n+        console.log(\"پمپ‌ها دریافت شده:\", orderData.pumps);\r\n+      } catch (err) {\r\n+        toast.error(\"❌ خطا در دریافت اطلاعات سفارش یا پمپ‌ها!\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchOrderData();\r\n+  }, [orderId]);\r\n+\r\n+  const fetchSubPumps = async (id) => {\r\n+    const token = localStorage.getItem(\"accessToken\");\r\n+    if (!token) {\r\n+      toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const { data } = await axios.get(\r\n+        `https://amin-beton-back.chbk.app/api/sales-pump/${id}/sub-pumps/`,\r\n+        { headers: { Authorization: `Bearer ${token}` } }\r\n+      );\r\n+\r\n+      // همیشه داده جدید جایگزین بشه\r\n+      setSubPumps(data || []);\r\n+    } catch (err) {\r\n+      toast.error(\"❌ خطا در دریافت زیرمجموعه‌های پمپ!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handlePumpSelection = (id) => {\r\n+    if (quantity < 1) {\r\n+      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    // پیدا کردن پمپ بر اساس id، توجه به اینکه داده‌ها در structure `pump.pump.id` هستند\r\n+    const pump = pumps.find((p) => p.pump.id === id);\r\n+    if (!pump) return;\r\n+\r\n+    const isSelected = tempSelectedPumps.some((p) => p.id === pump.pump.id);\r\n+\r\n+    // زیرپمپ‌ها و انتخاب‌های موقت رو پاک کن\r\n+    setTempSelectedSubPumps([]);\r\n+    setSubPumps([]);\r\n+\r\n+    if (isSelected) {\r\n+      // اگه دوباره کلیک شد، فقط زیرپمپ‌ها رو ری‌لود کن (انتخاب بمونه)\r\n+      fetchSubPumps(id);\r\n+    } else {\r\n+      // یه پمپ جدید انتخاب شده → انتخاب قبلی رو پاک و جدید بذار\r\n+      setTempSelectedPumps([\r\n+        {\r\n+          ...pump.pump, // حالا از pump.pump برای دسترسی به اطلاعات استفاده می‌کنیم\r\n+          count: quantity,\r\n+        },\r\n+      ]);\r\n+      fetchSubPumps(id);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubPumpSelection = (subPumpId) => {\r\n+    if (quantity < 1) {\r\n+      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    const subPump = subPumps.find((sp) => sp.id === subPumpId);\r\n+    if (!subPump) return;\r\n+\r\n+    const selectedPump = tempSelectedPumps[0]; // چون فقط یکی انتخاب می‌شه\r\n+    if (!selectedPump) {\r\n+      toast.warn(\"⚠️ لطفاً ابتدا یک پمپ انتخاب کنید!\");\r\n+      return;\r\n+    }\r\n+\r\n+    const exists = tempSelectedSubPumps.some(\r\n+      (sp) => sp.id === subPumpId && sp.pumpId === selectedPump.id\r\n+    );\r\n+\r\n+    if (exists) {\r\n+      // اگه همون زیرپمپ دوباره کلیک بشه، پاکش کن\r\n+      setTempSelectedSubPumps([]);\r\n+    } else {\r\n+      // فقط همین یه زیرپمپ رو نگه دار\r\n+      setTempSelectedSubPumps([\r\n+        {\r\n+          ...subPump,\r\n+          count: quantity,\r\n+          pumpId: selectedPump.id,\r\n+        },\r\n+      ]);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+\r\n+  const handleQuantityChange = (e) => {\r\n+    const updatedCount = Number(e.target.value);\r\n+    if (!isNaN(updatedCount) && updatedCount >= 1) {\r\n+      setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n+    }\r\n+  };\r\n+\r\n+ \r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   if (!orderId) {\r\n+  //     toast.error(\"❌ شماره سفارش معتبر نیست!\");\r\n+  //     return;\r\n+  //   }\r\n+\r\n+  //   // فیلتر کردن پمپ‌ها و زیرپمپ‌ها بر اساس ID به‌طوری‌که تکراری نباشند\r\n+  //   const uniquePumps = [\r\n+  //     ...new Map(pumps.map((p) => [p.id, p])).values(), // حذف پمپ‌های تکراری بر اساس id\r\n+  //   ];\r\n+  //   const uniqueSubPumps = [\r\n+  //     ...new Map(subPumps.map((sp) => [sp.id, sp])).values(), // حذف زیرپمپ‌های تکراری بر اساس id\r\n+  //   ];\r\n+\r\n+  //   const payload = [\r\n+  //     ...uniqueSubPumps.map((sp) => ({\r\n+  //       order: orderId,\r\n+  //       pump: sp.parentId,\r\n+  //       count: sp.count,\r\n+  //       sub_pump: sp.id,\r\n+  //     })),\r\n+  //     ...uniquePumps\r\n+  //       .filter((p) => !uniqueSubPumps.some((sp) => sp.parentId === p.id)) // پمپ‌هایی که زیرپمپ ندارند\r\n+  //       .map((p) => ({\r\n+  //         order: orderId,\r\n+  //         pump: p.id,\r\n+  //         count: p.count,\r\n+  //         sub_pump: null,\r\n+  //       })),\r\n+  //   ];\r\n+\r\n+  //   try {\r\n+  //     if (payload.length > 0) {\r\n+  //       await axios.post(\r\n+  //         \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n+  //         payload,\r\n+  //         {\r\n+  //           headers: {\r\n+  //             Authorization: `Bearer ${token}`,\r\n+  //             \"Content-Type\": \"application/json\",\r\n+  //           },\r\n+  //         }\r\n+  //       );\r\n+  //       toast.success(\"✅ سفارش با موفقیت ثبت شد!\");\r\n+  //     } else {\r\n+  //       toast.warn(\"⚠️ هیچ آیتمی برای ارسال وجود ندارد!\");\r\n+  //     }\r\n+  //   } catch (err) {\r\n+  //     toast.error(\"❌ خطا در افزودن پمپ به سفارش!\");\r\n+  //   }\r\n+  // };\r\n+\r\n+  const handleRemovePump = (id, isSubPump = false) => {\r\n+    if (isSubPump) {\r\n+      setSelectedSubPumps((prev) => prev.filter((sp) => sp.id !== id));\r\n+    } else {\r\n+      setSelectedPumps((prev) => prev.filter((p) => p.id !== id));\r\n+    }\r\n+\r\n+    deletePumpOrder(id);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n+      <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n+        <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n+          خرید برای <br /> {projectTitle}\r\n+        </h1>\r\n+\r\n+        <div className=\"mb-8\">\r\n+          <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n+          <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n+            {uniquePumps.map((pump) => {\r\n+              // بررسی عنوان پمپ\r\n+              const isSelected = tempSelectedPumps.some(\r\n+                (p) => p.id === pump.pump.id\r\n+              ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n+\r\n+              return (\r\n+                <div\r\n+                  key={pump.pump.id} // استفاده از pump.pump.id\r\n+                  className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n+                    isSelected ? \"border-School-Bus\" : \"border-white\"\r\n+                  } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n+                  onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n+                >\r\n+                  <div\r\n+                    className={`w-4 h-4 mb-2 rounded-full ${\r\n+                      isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n+                    }`}\r\n+                  ></div>\r\n+                  <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n+                  {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n+                </div>\r\n+              );\r\n+            })}\r\n+          </div>\r\n+\r\n+          {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n+            <div className=\"mb-8\">\r\n+              <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n+              <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+                {subPumps.map((subPump) => {\r\n+                  const isSelected = tempSelectedSubPumps.some(\r\n+                    (sp) => sp.id === subPump.id\r\n+                  );\r\n+\r\n+                  return (\r\n+                    <div\r\n+                      key={subPump.id}\r\n+                      className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n+                        isSelected ? \"border-School-Bus\" : \"border-white\"\r\n+                      } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n+                      onClick={() => handleSubPumpSelection(subPump.id)}\r\n+                    >\r\n+                      <div\r\n+                        className={`w-4 h-4 mb-2 rounded-full ${\r\n+                          isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n+                        }`}\r\n+                      ></div>\r\n+                      <div className=\"mb-2\">{subPump.title}</div>\r\n+                    </div>\r\n+                  );\r\n+                })}\r\n+              </div>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+\r\n+        {tempSelectedPumps.some((pump) => pump.countable) && (\r\n+          <div className=\"flex items-center gap-2 mt-4\">\r\n+            <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n+              تعداد پمپ\r\n+            </label>\r\n+            <input\r\n+              id=\"totalQty\"\r\n+              type=\"number\"\r\n+              min=\"1\"\r\n+              value={quantity}\r\n+              onChange={handleQuantityChange}\r\n+              className=\"w-24 p-2 text-black border rounded-md\"\r\n+            />\r\n+          </div>\r\n+        )}\r\n+\r\n+        {/* دکمه افزودن پمپ‌ها */}\r\n+        <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n+          <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n+            افزودن پمپ‌ها\r\n+          </Button>\r\n+        </div>\r\n+\r\n+        {/* نمایش انتخاب‌های پمپ‌ها */}\r\n+        <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n+          <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n+\r\n+          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n+          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n+          {selectedPumps.map((pump) => (\r\n+            <div\r\n+              key={pump.id}\r\n+              className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n+            >\r\n+              <div className=\"flex flex-row items-center gap-4\">\r\n+                <span>\r\n+                  پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n+                  {selectedSubPumps.filter(\r\n+                    (subPump) => subPump.pumpId === pump.id\r\n+                  ).length > 0\r\n+                    ? selectedSubPumps\r\n+                        .filter((subPump) => subPump.pumpId === pump.id)\r\n+                        .map((subPump) => subPump.title)\r\n+                        .join(\", \")\r\n+                    : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n+                  | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n+                  <button\r\n+                    onClick={() => handleRemovePump(pump.id)}\r\n+                    className=\"text-red hover:text-red-700\"\r\n+                  >\r\n+                    حذف\r\n+                  </button>\r\n+                </span>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+        <div className=\"mb-8\">\r\n+          <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n+          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n+            {selectedPumps.map((pump) => {\r\n+              const subPumpsForThisPump = selectedSubPumps.filter(\r\n+                (subPump) => subPump.pumpId === pump.id\r\n+              );\r\n+              return (\r\n+                <div\r\n+                  key={pump.id}\r\n+                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n+                >\r\n+                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n+                  <div className=\"mb-2\">{pump.title}</div>\r\n+                  <div>\r\n+                    تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n+                    {subPumpsForThisPump.length}\r\n+                  </div>\r\n+                </div>\r\n+              );\r\n+            })}\r\n+          </div>\r\n+        </div>\r\n+\r\n+        <Button\r\n+          className=\"px-10\"\r\n+          onClick={() => {\r\n+            handleAddAndSubmit();\r\n+            navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n+          }}\r\n+        >\r\n+          ادامه\r\n+        </Button>\r\n+        <Modal\r\n+          isOpen={isModalOpen}\r\n+          onClose={() => setIsModalOpen(false)}\r\n+          message={modalMessage}\r\n+        />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default PumpPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744157418373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -546,9 +546,9 @@\n               type=\"number\"\r\n               min=\"1\"\r\n               value={quantity}\r\n               onChange={handleQuantityChange}\r\n-              className=\"w-24 p-2 border rounded-md text-black\"\r\n+              className=\"w-24 p-2 text-black border rounded-md\"\r\n             />\r\n           </div>\r\n         )}\r\n \r\n@@ -562,12 +562,12 @@\n         {/* نمایش انتخاب‌های پمپ‌ها */}\r\n         <div className=\"mb-8\">\r\n           <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n           <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-            {selectedPumps.map((pump) => {\r\n-              if (!pump.pump || !pump.pump.title) {\r\n-                return null;\r\n-              }\r\n+          {selectedPumps.map((pump) => {\r\n+              const subPumpsForThisPump = selectedSubPumps.filter(\r\n+                (subPump) => subPump.pumpId === pump.id\r\n+              );\r\n \r\n               // پیدا کردن زیرپمپ‌های مربوط به هر پمپ\r\n               const subPumpsForThis = pump.sub_pump ? [pump.sub_pump] : [];\r\n \r\n"
                },
                {
                    "date": 1744157515067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,12 +562,16 @@\n         {/* نمایش انتخاب‌های پمپ‌ها */}\r\n         <div className=\"mb-8\">\r\n           <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n           <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n-            {selectedPumps.map((pump) => {\r\n+          {selectedPumps.map((pump) => {\r\n               const subPumpsForThisPump = selectedSubPumps.filter(\r\n                 (subPump) => subPump.pumpId === pump.id\r\n               );\r\n+            {selectedPumps.map((pump) => {\r\n+              if (!pump.pump || !pump.pump.title) {\r\n+                return null;\r\n+              }\r\n \r\n               // پیدا کردن زیرپمپ‌های مربوط به هر پمپ\r\n               const subPumpsForThis = pump.sub_pump ? [pump.sub_pump] : [];\r\n \r\n"
                }
            ],
            "date": 1744122177238,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Button from \"../ui/Button\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Modal from \"../pages/Modal\";\r\nconst PumpPage = () => {\r\n  const [pumps, setPumps] = useState([]);\r\n  const [subPumps, setSubPumps] = useState([]);\r\n  const [selectedPumps, setSelectedPumps] = useState([]);\r\n  const [selectedSubPumps, setSelectedSubPumps] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [tempSelectedPumps, setTempSelectedPumps] = useState([]);\r\n  const [tempSelectedSubPumps, setTempSelectedSubPumps] = useState([]);\r\n  const { orderId } = useParams();\r\n  const [projectTitle, setProjectTitle] = useState(\"\");\r\n  // const { orderId } = useParams(); //\r\n  const navigate = useNavigate();\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [isSubmitting, setIsSubmitting] = useState(false); // اضافه کردن state برای بررسی ارسال\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState(\"\");\r\n  const uniquePumps = [\r\n    ...new Map(pumps.map((item) => [item.pump.id, item])).values(),\r\n  ];\r\n  const handleSubmitOrder = async (orderId) => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (!token) {\r\n      toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n      return;\r\n    }\r\n\r\n    if (!orderId || tempSelectedPumps.length === 0) {\r\n      toast.error(\"❌ سفارش یا پمپ انتخاب نشده است!\");\r\n      return;\r\n    }\r\n\r\n    const payload = [];\r\n\r\n    tempSelectedPumps.forEach((pump) => {\r\n      // پیدا کردن زیرپمپ‌های مربوط به این پمپ\r\n      const subPumpsForThisPump = tempSelectedSubPumps.filter(\r\n        (subPump) => subPump.pumpId === pump.id\r\n      );\r\n\r\n      if (subPumpsForThisPump.length > 0) {\r\n        // اگر زیرپمپ دارد، ارسال پمپ و زیرپمپ‌ها با هم\r\n        subPumpsForThisPump.forEach((subPump) => {\r\n          payload.push({\r\n            order: Number(orderId),\r\n            pump: Number(pump.id),\r\n            count: Number(pump.count),\r\n            sub_pump: Number(subPump.id),\r\n          });\r\n        });\r\n      } else {\r\n        // اگر زیرپمپ ندارد، فقط پمپ را ارسال می‌کنیم\r\n        payload.push({\r\n          order: Number(orderId),\r\n          pump: Number(pump.id),\r\n          count: Number(pump.count),\r\n          sub_pump: null, // بدون زیرپمپ\r\n        });\r\n      }\r\n    });\r\n\r\n    console.log(\"📦 Payload:\", payload);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n        payload,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      console.log(\"✅ Server Response:\", response.data);\r\n      toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n    } catch (error) {\r\n      console.error(\"❌ Error Sending Request:\", error.response?.data || error);\r\n      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n    }\r\n  };\r\n\r\n  const handleAddAndSubmit = async () => {\r\n    console.log(\"🚀 handleAddAndSubmit اجرا شد!\");\r\n\r\n    if (tempSelectedPumps.length === 0 && tempSelectedSubPumps.length === 0) {\r\n      setModalMessage(\"⚠️ پمپی انتخاب نکردید!\");\r\n      setIsModalOpen(true); // باز کردن مودال خطا\r\n      return;\r\n    }\r\n\r\n    console.log(\"🔍 Selected SubPumps:\", tempSelectedSubPumps);\r\n\r\n    // چک کردن orderId قبل از ارسال\r\n    if (!orderId) {\r\n      setModalMessage(\"❌ شماره سفارش مشخص نشده است!\");\r\n      setIsModalOpen(true); // باز کردن مودال خطا\r\n      return;\r\n    }\r\n\r\n    const newPumps = tempSelectedPumps.map((pump) => ({\r\n      ...pump,\r\n      count: quantity,\r\n    }));\r\n\r\n    const newSubPumps = tempSelectedSubPumps.map((subPump) => ({\r\n      ...subPump,\r\n      count: quantity,\r\n    }));\r\n\r\n    const payload = [];\r\n\r\n    newPumps.forEach((pump) => {\r\n      const subPumpsForThisPump = newSubPumps.filter(\r\n        (subPump) => subPump.pumpId === pump.id\r\n      );\r\n\r\n      if (subPumpsForThisPump.length > 0) {\r\n        subPumpsForThisPump.forEach((subPump) => {\r\n          payload.push({\r\n            order: Number(orderId),\r\n            pump: Number(pump.id),\r\n            count: Number(pump.count),\r\n            sub_pump: Number(subPump.id),\r\n          });\r\n        });\r\n      } else {\r\n        payload.push({\r\n          order: Number(orderId),\r\n          pump: Number(pump.id),\r\n          count: pump.countable ? Number(pump.count) : 1,\r\n          sub_pump: null,\r\n        });\r\n      }\r\n    });\r\n\r\n    // ارسال به سرور\r\n    try {\r\n      const response = await axios.post(\r\n        \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n        payload,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        toast.success(\"✔ سفارش با موفقیت ارسال شد!\");\r\n        // به‌روزرسانی داده‌های پمپ‌ها\r\n        setSelectedPumps((prev) => [...prev, ...newPumps]);\r\n        setSelectedSubPumps((prev) => [...prev, ...newSubPumps]);\r\n        setTempSelectedPumps([]);\r\n        setTempSelectedSubPumps([]);\r\n        setSubPumps([]);\r\n        setQuantity(1);\r\n      } else {\r\n        setModalMessage(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n        setIsModalOpen(true);\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"❌ ارسال سفارش با مشکل مواجه شد!\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const fetchOrderData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const token = localStorage.getItem(\"accessToken\");\r\n\r\n        const orderRes = await axios.get(\r\n          `https://amin-beton-back.chbk.app/api/orders/${orderId}/`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n\r\n        const orderData = orderRes.data;\r\n\r\n        setProjectTitle(orderData.title || \"بدون عنوان\");\r\n        setPumps(orderData.pumps || []); // ✅ پمپ‌ها از همون ریسپانس\r\n        console.log(\"پمپ‌ها دریافت شده:\", orderData.pumps);\r\n      } catch (err) {\r\n        toast.error(\"❌ خطا در دریافت اطلاعات سفارش یا پمپ‌ها!\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchOrderData();\r\n  }, [orderId]);\r\n\r\n  const fetchSubPumps = async (id) => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (!token) {\r\n      toast.error(\"⛛ شما احراز هویت نشده‌اید!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.get(\r\n        `https://amin-beton-back.chbk.app/api/sales-pump/${id}/sub-pumps/`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      // همیشه داده جدید جایگزین بشه\r\n      setSubPumps(data || []);\r\n    } catch (err) {\r\n      toast.error(\"❌ خطا در دریافت زیرمجموعه‌های پمپ!\");\r\n    }\r\n  };\r\n\r\n  const handlePumpSelection = (id) => {\r\n    if (quantity < 1) {\r\n      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n      return;\r\n    }\r\n\r\n    // پیدا کردن پمپ بر اساس id، توجه به اینکه داده‌ها در structure `pump.pump.id` هستند\r\n    const pump = pumps.find((p) => p.pump.id === id);\r\n    if (!pump) return;\r\n\r\n    const isSelected = tempSelectedPumps.some((p) => p.id === pump.pump.id);\r\n\r\n    // زیرپمپ‌ها و انتخاب‌های موقت رو پاک کن\r\n    setTempSelectedSubPumps([]);\r\n    setSubPumps([]);\r\n\r\n    if (isSelected) {\r\n      // اگه دوباره کلیک شد، فقط زیرپمپ‌ها رو ری‌لود کن (انتخاب بمونه)\r\n      fetchSubPumps(id);\r\n    } else {\r\n      // یه پمپ جدید انتخاب شده → انتخاب قبلی رو پاک و جدید بذار\r\n      setTempSelectedPumps([\r\n        {\r\n          ...pump.pump, // حالا از pump.pump برای دسترسی به اطلاعات استفاده می‌کنیم\r\n          count: quantity,\r\n        },\r\n      ]);\r\n      fetchSubPumps(id);\r\n    }\r\n  };\r\n\r\n  const handleSubPumpSelection = (subPumpId) => {\r\n    if (quantity < 1) {\r\n      toast.warn(\"⚠️ لطفاً تعداد معتبر وارد کنید!\");\r\n      return;\r\n    }\r\n\r\n    const subPump = subPumps.find((sp) => sp.id === subPumpId);\r\n    if (!subPump) return;\r\n\r\n    const selectedPump = tempSelectedPumps[0]; // چون فقط یکی انتخاب می‌شه\r\n    if (!selectedPump) {\r\n      toast.warn(\"⚠️ لطفاً ابتدا یک پمپ انتخاب کنید!\");\r\n      return;\r\n    }\r\n\r\n    const exists = tempSelectedSubPumps.some(\r\n      (sp) => sp.id === subPumpId && sp.pumpId === selectedPump.id\r\n    );\r\n\r\n    if (exists) {\r\n      // اگه همون زیرپمپ دوباره کلیک بشه، پاکش کن\r\n      setTempSelectedSubPumps([]);\r\n    } else {\r\n      // فقط همین یه زیرپمپ رو نگه دار\r\n      setTempSelectedSubPumps([\r\n        {\r\n          ...subPump,\r\n          count: quantity,\r\n          pumpId: selectedPump.id,\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleQuantityChangeForPump = (id, value) => {\r\n    const numericValue = Number(value);\r\n    if (isNaN(numericValue) || numericValue < 1) return;\r\n\r\n    // تغییر تعداد پمپ انتخاب شده\r\n    setTempSelectedPumps((prev) =>\r\n      prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n    );\r\n  };\r\n\r\n  const handleQuantityChangeForSubPump = (id, value) => {\r\n    const numericValue = Number(value);\r\n    if (isNaN(numericValue) || numericValue < 1) return;\r\n\r\n    // تغییر تعداد زیرپمپ انتخاب شده\r\n    setTempSelectedSubPumps((prev) =>\r\n      prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n    );\r\n  };\r\n\r\n  const handleTempQuantityChange = (id, value, isSubPump = false) => {\r\n    const numericValue = Number(value);\r\n    if (isNaN(numericValue) || numericValue < 1) return;\r\n\r\n    if (isSubPump) {\r\n      setTempSelectedSubPumps((prev) =>\r\n        prev.map((sp) => (sp.id === id ? { ...sp, count: numericValue } : sp))\r\n      );\r\n    } else {\r\n      setTempSelectedPumps((prev) =>\r\n        prev.map((p) => (p.id === id ? { ...p, count: numericValue } : p))\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleQuantityChange = (e) => {\r\n    const updatedCount = Number(e.target.value);\r\n    if (!isNaN(updatedCount) && updatedCount >= 1) {\r\n      setQuantity(updatedCount); // بروزرسانی مقدار quantity\r\n    }\r\n  };\r\n\r\n  //   if (!token) {\r\n  //     toast.warn(\"⛛ شما احراز هویت نشده‌اید!\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   if (!orderId) {\r\n  //     toast.error(\"❌ شماره سفارش معتبر نیست!\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   // فیلتر کردن پمپ‌ها و زیرپمپ‌ها بر اساس ID به‌طوری‌که تکراری نباشند\r\n  //   const uniquePumps = [\r\n  //     ...new Map(pumps.map((p) => [p.id, p])).values(), // حذف پمپ‌های تکراری بر اساس id\r\n  //   ];\r\n  //   const uniqueSubPumps = [\r\n  //     ...new Map(subPumps.map((sp) => [sp.id, sp])).values(), // حذف زیرپمپ‌های تکراری بر اساس id\r\n  //   ];\r\n\r\n  //   const payload = [\r\n  //     ...uniqueSubPumps.map((sp) => ({\r\n  //       order: orderId,\r\n  //       pump: sp.parentId,\r\n  //       count: sp.count,\r\n  //       sub_pump: sp.id,\r\n  //     })),\r\n  //     ...uniquePumps\r\n  //       .filter((p) => !uniqueSubPumps.some((sp) => sp.parentId === p.id)) // پمپ‌هایی که زیرپمپ ندارند\r\n  //       .map((p) => ({\r\n  //         order: orderId,\r\n  //         pump: p.id,\r\n  //         count: p.count,\r\n  //         sub_pump: null,\r\n  //       })),\r\n  //   ];\r\n\r\n  //   try {\r\n  //     if (payload.length > 0) {\r\n  //       await axios.post(\r\n  //         \"https://amin-beton-back.chbk.app/api/orders/add-pump-order/\",\r\n  //         payload,\r\n  //         {\r\n  //           headers: {\r\n  //             Authorization: `Bearer ${token}`,\r\n  //             \"Content-Type\": \"application/json\",\r\n  //           },\r\n  //         }\r\n  //       );\r\n  //       toast.success(\"✅ سفارش با موفقیت ثبت شد!\");\r\n  //     } else {\r\n  //       toast.warn(\"⚠️ هیچ آیتمی برای ارسال وجود ندارد!\");\r\n  //     }\r\n  //   } catch (err) {\r\n  //     toast.error(\"❌ خطا در افزودن پمپ به سفارش!\");\r\n  //   }\r\n  // };\r\n\r\n  const handleRemovePump = (id, isSubPump = false) => {\r\n    if (isSubPump) {\r\n      setSelectedSubPumps((prev) => prev.filter((sp) => sp.id !== id));\r\n    } else {\r\n      setSelectedPumps((prev) => prev.filter((p) => p.id !== id));\r\n    }\r\n\r\n    deletePumpOrder(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen p-6 text-white bg-Bokara-Grey\">\r\n      <div className=\"container w-full max-w-5xl p-8 bg-gray-800 rounded-xl\">\r\n        <h1 className=\"mb-8 text-sm font-bold text-center md:text-2xl\">\r\n          خرید برای <br /> {projectTitle}\r\n        </h1>\r\n\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-lg font-bold\">پمپ‌ها</h2>\r\n          <div className=\"flex flex-row flex-wrap gap-6 mt-4 mb-8\">\r\n            {uniquePumps.map((pump) => {\r\n              // بررسی عنوان پمپ\r\n              const isSelected = tempSelectedPumps.some(\r\n                (p) => p.id === pump.pump.id\r\n              ); // توجه کنید که باید از pump.pump.id استفاده کنید\r\n\r\n              return (\r\n                <div\r\n                  key={pump.pump.id} // استفاده از pump.pump.id\r\n                  className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n                    isSelected ? \"border-School-Bus\" : \"border-white\"\r\n                  } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n                  onClick={() => handlePumpSelection(pump.pump.id)} // استفاده از pump.pump.id برای انتخاب پمپ\r\n                >\r\n                  <div\r\n                    className={`w-4 h-4 mb-2 rounded-full ${\r\n                      isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n                    }`}\r\n                  ></div>\r\n                  <div className=\"mb-2\">{pump.pump.title}</div>{\" \"}\r\n                  {/* استفاده از pump.pump.title برای نمایش عنوان */}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {tempSelectedPumps.length > 0 && subPumps.length > 0 && (\r\n            <div className=\"mb-8\">\r\n              <h3 className=\"text-lg font-bold\">زیرمجموعه‌های پمپ</h3>\r\n              <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n                {subPumps.map((subPump) => {\r\n                  const isSelected = tempSelectedSubPumps.some(\r\n                    (sp) => sp.id === subPump.id\r\n                  );\r\n\r\n                  return (\r\n                    <div\r\n                      key={subPump.id}\r\n                      className={`flex flex-col gap-2 items-center justify-center text-center w-40 border ${\r\n                        isSelected ? \"border-School-Bus\" : \"border-white\"\r\n                      } rounded-lg px-4 py-4 cursor-pointer transition-all duration-200 hover:scale-105`}\r\n                      onClick={() => handleSubPumpSelection(subPump.id)}\r\n                    >\r\n                      <div\r\n                        className={`w-4 h-4 mb-2 rounded-full ${\r\n                          isSelected ? \"bg-School-Bus\" : \"bg-white\"\r\n                        }`}\r\n                      ></div>\r\n                      <div className=\"mb-2\">{subPump.title}</div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {tempSelectedPumps.some((pump) => pump.countable) && (\r\n          <div className=\"flex items-center gap-2 mt-4\">\r\n            <label htmlFor=\"totalQty\" className=\"text-sm\">\r\n              تعداد پمپ\r\n            </label>\r\n            <input\r\n              id=\"totalQty\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              value={quantity}\r\n              onChange={handleQuantityChange}\r\n              className=\"w-24 p-2 text-black border rounded-md\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* دکمه افزودن پمپ‌ها */}\r\n        <div className=\"flex justify-center gap-6 px-10 mt-10\">\r\n          <Button className=\"px-10\" onClick={handleAddAndSubmit}>\r\n            افزودن پمپ‌ها\r\n          </Button>\r\n        </div>\r\n\r\n        {/* نمایش انتخاب‌های پمپ‌ها */}\r\n        <div className=\"flex flex-col gap-4 mt-10 mb-8\">\r\n          <h3 className=\"text-lg font-bold\">انتخاب‌های شما</h3>\r\n\r\n          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n          {/* نمایش پمپ‌ها و زیرپمپ‌ها در یک فیلد */}\r\n          {selectedPumps.map((pump) => (\r\n            <div\r\n              key={pump.id}\r\n              className=\"flex items-center justify-between p-4 border rounded-md border-School-Bus\"\r\n            >\r\n              <div className=\"flex flex-row items-center gap-4\">\r\n                <span>\r\n                  پمپ: {pump.title} | زیرپمپ:{\" \"}\r\n                  {selectedSubPumps.filter(\r\n                    (subPump) => subPump.pumpId === pump.id\r\n                  ).length > 0\r\n                    ? selectedSubPumps\r\n                        .filter((subPump) => subPump.pumpId === pump.id)\r\n                        .map((subPump) => subPump.title)\r\n                        .join(\", \")\r\n                    : \"هیچ زیرپمپی وجود ندارد\"}{\" \"}\r\n                  | {pump.countable && pump.count ? `تعداد: ${pump.count}` : \"\"}\r\n                  <button\r\n                    onClick={() => handleRemovePump(pump.id)}\r\n                    className=\"text-red hover:text-red-700\"\r\n                  >\r\n                    حذف\r\n                  </button>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"mb-8\">\r\n          <h3 className=\"text-lg font-bold\">پمپ‌های ثبت‌شده برای این سفارش</h3>\r\n          <div className=\"flex flex-row flex-wrap gap-6 mt-4\">\r\n            {selectedPumps.map((pump) => {\r\n              const subPumpsForThisPump = selectedSubPumps.filter(\r\n                (subPump) => subPump.pumpId === pump.id\r\n              );\r\n              return (\r\n                <div\r\n                  key={pump.id}\r\n                  className=\"flex flex-col items-center justify-center w-40 gap-2 px-4 py-4 text-center border rounded-lg border-School-Bus\"\r\n                >\r\n                  <div className=\"w-4 h-4 mb-2 rounded-full bg-School-Bus\"></div>\r\n                  <div className=\"mb-2\">{pump.title}</div>\r\n                  <div>\r\n                    تعداد پمپ: {pump.count} | زیرپمپ‌ها:{\" \"}\r\n                    {subPumpsForThisPump.length}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <Button\r\n          className=\"px-10\"\r\n          onClick={() => {\r\n            handleAddAndSubmit();\r\n            navigate(`/VibratorPage/${orderId}`); // مقدار orderId را مقداردهی کنید\r\n          }}\r\n        >\r\n          ادامه\r\n        </Button>\r\n        <Modal\r\n          isOpen={isModalOpen}\r\n          onClose={() => setIsModalOpen(false)}\r\n          message={modalMessage}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PumpPage;\r\n"
        }
    ]
}