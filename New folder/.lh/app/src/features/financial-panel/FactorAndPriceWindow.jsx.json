{
    "sourceFile": "app/src/features/financial-panel/FactorAndPriceWindow.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1745899348905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745899368395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,26 +110,26 @@\n     fetchFactor();\n   }, [orderId]);\n   const handleCreateInvoice = async (e) => {\n     e.preventDefault();\n-\n+  \n     if (!price) {\n       alert(\"لطفا مبلغ پیش فاکتور را وارد کنید\");\n       return;\n     }\n-\n+  \n     setLoading(true);\n-\n+  \n     try {\n       const formData = new FormData();\n       formData.append(\"order\", orderDetails.id);\n       formData.append(\"price\", price);\n       if (invoiceFile) {\n         formData.append(\"invoice_file\", invoiceFile);\n       }\n-\n+  \n       const token = localStorage.getItem(\"token\"); // اینجا توکن رو میگیریم\n-\n+  \n       const response = await fetch(\n         \"http://amin-beton-back.chbk.app/api/invoice-management/\",\n         {\n           method: \"POST\",\n@@ -138,15 +138,15 @@\n             Authorization: `Bearer ${token}`, // اضافه کردن هدر توکن\n           },\n         }\n       );\n-\n+  \n       if (response.ok) {\n         const data = await response.json();\n         alert(\"پیش فاکتور با موفقیت ایجاد شد!\");\n-\n+  \n         setInvoices((prev) => [...prev, data]);\n-\n+  \n         setPrice(\"\");\n         setInvoiceFile(null);\n       } else {\n         alert(\"مشکلی پیش آمد، دوباره تلاش کنید!\");\n@@ -157,8 +157,9 @@\n     } finally {\n       setLoading(false);\n     }\n   };\n+  \n \n   return (\n     <Wrapper>\n       <Title>فاکتور نهایی سفارش</Title>\n"
                },
                {
                    "date": 1745899376384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,55 +108,45 @@\n     };\n \n     fetchFactor();\n   }, [orderId]);\n-  const handleCreateInvoice = async (e) => {\n+\n+  const handleCreateFactor = async (e) => {\n     e.preventDefault();\n+    const token = localStorage.getItem(\"accessToken\");\n \n-    if (!price) {\n-      alert(\"لطفا مبلغ پیش فاکتور را وارد کنید\");\n+    if (!price || !fileLink) {\n+      alert(\"لطفاً تمامی فیلدها را پر کنید.\");\n       return;\n     }\n \n-    setLoading(true);\n+    const formData = new FormData();\n+    formData.append(\"price\", price);\n+    formData.append(\"factor\", fileLink); // اینجا فایل رو اضافه می‌کنیم\n+    formData.append(\"order_id\", orderId);\n \n     try {\n-      const formData = new FormData();\n-      formData.append(\"order\", orderDetails.id);\n-      formData.append(\"price\", price);\n-      if (invoiceFile) {\n-        formData.append(\"invoice_file\", invoiceFile);\n-      }\n-\n-      const token = localStorage.getItem(\"token\"); // اینجا توکن رو میگیریم\n-\n       const response = await fetch(\n-        \"http://amin-beton-back.chbk.app/api/invoice-management/\",\n+        \"https://amin-beton-back.chbk.app/api/orders/create-order-factor/\",\n         {\n           method: \"POST\",\n-          body: formData,\n           headers: {\n-            Authorization: `Bearer ${token}`, // اضافه کردن هدر توکن\n+            Authorization: `Bearer ${token}`,\n+            // توجه کن که نباید Content-Type رو دستی تنظیم کنی! مرورگر خودش انجام میده\n           },\n+          body: formData,\n         }\n       );\n \n-      if (response.ok) {\n+      if (response.status === 200) {\n         const data = await response.json();\n-        alert(\"پیش فاکتور با موفقیت ایجاد شد!\");\n-\n-        setInvoices((prev) => [...prev, data]);\n-\n-        setPrice(\"\");\n-        setInvoiceFile(null);\n+        setFactor(data);\n+        setShowForm(false);\n       } else {\n-        alert(\"مشکلی پیش آمد، دوباره تلاش کنید!\");\n+        console.error(\"خطا در ایجاد فاکتور\");\n       }\n     } catch (error) {\n       console.error(\"خطا در ارسال فاکتور:\", error);\n-      alert(\"خطا در ارسال فاکتور\");\n-    } finally {\n-      setLoading(false);\n     }\n   };\n \n   return (\n"
                }
            ],
            "date": 1745899348905,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  padding: 6rem;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  max-width: 800px;\n  margin: 0 auto;\n`;\n\nconst Title = styled.h2`\n  font-size: 2rem;\n  font-weight: bold;\n  color: var(--color-dark);\n  margin-bottom: 1rem;\n`;\n\nconst FormWrapper = styled.form`\n  background-color: #f1f1f1;\n  padding: 2rem;\n  border-radius: 8px;\n  margin-top: 3rem;\n`;\n\nconst InputField = styled.input`\n  width: 100%;\n  padding: 0.8rem;\n  margin-bottom: 1.5rem;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  font-size: 1rem;\n`;\n\nconst SubmitButton = styled.button`\n  padding: 0.8rem 1.6rem;\n  background-color: var(--color-brand-600);\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  font-size: 1.1rem;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: var(--color-brand-800);\n  }\n\n  &:disabled {\n    background-color: var(--color-grey-400);\n    cursor: not-allowed;\n  }\n`;\n\nconst InvoiceBox = styled.div`\n  background-color: #e8ffe8;\n  padding: 2rem;\n  border-radius: 8px;\n  margin-top: 2rem;\n  border: 1px solid #00b300;\n`;\n\nfunction FinalInvoiceSection({ orderDetails }) {\n  const [loading, setLoading] = useState(true);\n  const [factor, setFactor] = useState(null);\n  const [price, setPrice] = useState(\"\");\n  const [fileLink, setFileLink] = useState(\"\");\n  const [showForm, setShowForm] = useState(false); // برای نمایش فرم\n\n  const orderId = orderDetails.id; // استفاده از orderDetails برای دریافت id\n\n  useEffect(() => {\n    console.log(\"Order ID: \", orderId); // بررسی مقدار orderId\n    const fetchFactor = async () => {\n      const token = localStorage.getItem(\"accessToken\");\n\n      if (!token) {\n        console.error(\"توکن پیدا نشد!\");\n        return;\n      }\n\n      try {\n        const response = await fetch(\n          \"https://amin-beton-back.chbk.app/api/orders/get-order-factor/\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify({ order_id: orderId }), // از orderId استفاده کنید\n          }\n        );\n\n        if (response.status === 200) {\n          const data = await response.json();\n          setFactor(data);\n        } else if (response.status === 404) {\n          setShowForm(true);\n        }\n      } catch (error) {\n        console.error(\"خطا در دریافت فاکتور:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchFactor();\n  }, [orderId]);\n  const handleCreateInvoice = async (e) => {\n    e.preventDefault();\n  \n    if (!price) {\n      alert(\"لطفا مبلغ پیش فاکتور را وارد کنید\");\n      return;\n    }\n  \n    setLoading(true);\n  \n    try {\n      const formData = new FormData();\n      formData.append(\"order\", orderDetails.id);\n      formData.append(\"price\", price);\n      if (invoiceFile) {\n        formData.append(\"invoice_file\", invoiceFile);\n      }\n  \n      const token = localStorage.getItem(\"token\"); // اینجا توکن رو میگیریم\n  \n      const response = await fetch(\n        \"http://amin-beton-back.chbk.app/api/invoice-management/\",\n        {\n          method: \"POST\",\n          body: formData,\n          headers: {\n            Authorization: `Bearer ${token}`, // اضافه کردن هدر توکن\n          },\n        }\n      );\n  \n      if (response.ok) {\n        const data = await response.json();\n        alert(\"پیش فاکتور با موفقیت ایجاد شد!\");\n  \n        setInvoices((prev) => [...prev, data]);\n  \n        setPrice(\"\");\n        setInvoiceFile(null);\n      } else {\n        alert(\"مشکلی پیش آمد، دوباره تلاش کنید!\");\n      }\n    } catch (error) {\n      console.error(\"خطا در ارسال فاکتور:\", error);\n      alert(\"خطا در ارسال فاکتور\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n\n  return (\n    <Wrapper>\n      <Title>فاکتور نهایی سفارش</Title>\n\n      {loading && <p>در حال دریافت اطلاعات...</p>}\n\n      {!loading && factor ? (\n        <InvoiceBox>\n          <p>💰 قیمت: {factor.price} تومان</p>\n\n          <p>\n            📎 فایل فاکتور:{\" \"}\n            <a href={factor.factor} target=\"_blank\" rel=\"noopener noreferrer\">\n              دانلود\n            </a>\n          </p>\n        </InvoiceBox>\n      ) : (\n        !loading &&\n        showForm && (\n          <FormWrapper onSubmit={handleCreateFactor}>\n            <label>قیمت فاکتور:</label>\n            <InputField\n              type=\"number\"\n              value={price}\n              placeholder=\"مثلاً 2000000\"\n              onChange={(e) => setPrice(e.target.value)}\n            />\n            <label>لینک فایل فاکتور:</label>\n            <InputField\n              type=\"file\"\n              onChange={(e) => setFileLink(e.target.files[0])}\n            />\n\n            <SubmitButton type=\"submit\">ایجاد فاکتور</SubmitButton>\n          </FormWrapper>\n        )\n      )}\n    </Wrapper>\n  );\n}\n\nFinalInvoiceSection.propTypes = {\n  orderDetails: PropTypes.shape({\n    id: PropTypes.number.isRequired, // id باید یک عدد باشد\n    invoices: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired, // id فاکتور باید یک عدد باشد\n        status: PropTypes.number.isRequired, // وضعیت باید یک عدد باشد\n        invoice_file: PropTypes.string, // فایل فاکتور (اختیاری)\n        deny_reason: PropTypes.string, // دلیل رد (اختیاری)\n        created_at: PropTypes.string, // تاریخ ایجاد باید یک رشته باشد\n        price: PropTypes.number.isRequired, // قیمت باید یک عدد باشد\n      })\n    ).isRequired, // آرایه‌ای از فاکتورها که باید موجود باشد\n  }).isRequired, // `orderDetails` باید موجود باشد\n};\n\nexport default FinalInvoiceSection;\n"
        }
    ]
}